\n\n// ====== lib/core/di/trade_provider.dart ======\n
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../config/app_config.dart';
import '../services/hive_service.dart';          // 🎯 NEW
import '../network/api_client.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider; // 🆕 WebSocket import
import '../../data/datasources/trade_cache_ds.dart';
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/trade_repository_impl.dart';
import '../../domain/entities/trade.dart';
import '../../domain/usecases/trade_usecase.dart';

/// 🆕 마켓 정보 클래스
class MarketInfo {
  final String market;      // KRW-BTC
  final String koreanName;  // 비트코인
  final String englishName; // Bitcoin

  const MarketInfo({
    required this.market,
    required this.koreanName,
    required this.englishName,
  });

  factory MarketInfo.fromJson(Map<String, dynamic> json) {
    return MarketInfo(
      market: json['market'] ?? '',
      koreanName: json['korean_name'] ?? '',
      englishName: json['english_name'] ?? '',
    );
  }
}

/// 0) REST API client
final apiClientProvider = Provider<ApiClient>((ref) => ApiClient(
      apiKey: AppConfig.apiKey,
      apiSecret: AppConfig.apiSecret,
    ));

/// 🎯 HiveService Provider (main.dart에서 override)
final hiveServiceProvider = Provider<HiveService>((ref) {
  throw UnimplementedError('HiveService must be provided via main.dart override');
});

/// 🆕 마켓 정보 Provider (1시간 캐시 + market_warning 필터링)
final marketInfoProvider = FutureProvider<Map<String, MarketInfo>>((ref) async {
  final client = ref.read(apiClientProvider);
  
  try {
    final result = await client.request<List<dynamic>>(
      method: 'GET',
      path: '${AppConfig.upbitRestBase}/market/all',
      cacheDur: const Duration(hours: 1), // 1시간 캐시
    );
    
    return result.when(
      ok: (markets) {
        final Map<String, MarketInfo> marketMap = {};
        int filteredCount = 0;
        
        for (final market in markets) {
          if (market is Map<String, dynamic>) {
            // 🔒 market_warning 필터링 (업비트 백서 준수)
            final warning = market['market_warning'] as String?;
            if (warning == 'CAUTION') {
              filteredCount++;
              if (AppConfig.enableTradeLog) {
                log.d('Filtered CAUTION market: ${market['market']}');
              }
              continue; // CAUTION 종목은 건너뛰기
            }
            
            final info = MarketInfo.fromJson(market);
            marketMap[info.market] = info;
          }
        }
        
        if (AppConfig.enableTradeLog) {
          log.i('마켓 정보 로드됨: ${marketMap.length}개 (CAUTION 필터링: $filteredCount개)');
        }
        return marketMap;
      },
      err: (error) {
        log.w('마켓 정보 로드 실패: $error');
        return <String, MarketInfo>{};
      },
    );
  } catch (e) {
    log.e('마켓 정보 로드 중 오류: $e');
    return <String, MarketInfo>{};
  }
});

/// 1) KRW market list (top 199 by volume + essentials) + market_warning 필터링
final marketsProvider = FutureProvider<List<String>>((ref) async {
  final client = ref.read(apiClientProvider);

  // fetch all markets (cache 5 minutes)
  final marketResult = await client.request<List<dynamic>>(
    method: 'GET',
    path: '${AppConfig.upbitRestBase}/market/all',
    cacheDur: const Duration(minutes: 5),
  );
  final allMarkets =
      marketResult.when(ok: (v) => v, err: (_) => <dynamic>[]);

  // 🔒 filter KRW markets + market_warning 필터링 (업비트 백서 준수)
  final krwMarkets = <String>[];
  int cautionCount = 0;
  
  for (final market in allMarkets.whereType<Map<String, dynamic>>()) {
    final marketCode = market['market'] as String?;
    if (marketCode != null && marketCode.startsWith('KRW-')) {
      // CAUTION 종목은 WebSocket 구독에서 제외
      final warning = market['market_warning'] as String?;
      if (warning == 'CAUTION') {
        cautionCount++;
        continue;
      }
      krwMarkets.add(marketCode);
    }
  }
  
  if (AppConfig.enableTradeLog && cautionCount > 0) {
    log.i('CAUTION 종목 $cautionCount개 제외됨 (WebSocket 구독 안전성)');
  }

  // pick top by 24h volume (or acc_trade_price when outside 9–10am)
  final now = DateTime.now();
  final isEarly = now.hour >= 9 && now.hour < 10;
  final key = isEarly ? 'acc_trade_price_24h' : 'acc_trade_price';

  // real-time ticker lookup (no cache)
  final tickerResult = await client.request<List<dynamic>>(
    method: 'GET',
    path: '${AppConfig.upbitRestBase}/ticker',
    query: {'markets': krwMarkets.join(',')},
    cacheDur: null,
  );
  final tickers = tickerResult
      .when(ok: (v) => v, err: (_) => <dynamic>[])  
      .whereType<Map<String, dynamic>>()
      .toList()
    ..sort((a, b) =>
        ((b[key] as num?) ?? 0).compareTo((a[key] as num?) ?? 0));

  // ─── WS 구독 종목 슬라이싱 로직 (essentials 우선 + 중복 제거 후 상위 199개) ───
  const essentials = ['KRW-BTC', 'KRW-ETH', 'KRW-XRP', 'KRW-SOL'];
  final sortedMarkets = tickers.map((e) => e['market'] as String).toList();
  final combined = [
    ...essentials.where((market) => krwMarkets.contains(market)), // 🔒 essentials도 CAUTION 체크
    ...sortedMarkets.where((m) => !essentials.contains(m)),
  ];
  return combined.take(199).toList();
});

final cacheDSProvider = Provider<TradeCacheDataSource>((ref) {
  final hive = ref.watch(hiveServiceProvider);
  return TradeCacheDataSource(hive.tradeBox);
});

final remoteDSProvider = Provider((ref) => TradeRemoteDataSource(
      ref.read(wsClientProvider), // 🔄 websocket_provider에서 import
      ref.read(signalBusProvider),
      useTestData: AppConfig.useTestDataInDev,
    ));

final repoProvider = Provider((ref) => TradeRepositoryImpl(
      ref.read(remoteDSProvider),
      ref.read(cacheDSProvider),
    ));

final usecaseProvider = Provider((ref) => TradeUsecase(ref.read(repoProvider)));

/// 3) Filter state
final tradeFilterIndexProvider = StateProvider<int>((_) => 0);
final tradeFilterThresholdProvider = StateProvider<double>((ref) =>
    AppConfig.tradeFilters.firstWhere(
      (f) => f >= 20000000,
      orElse: () => AppConfig.tradeFilters.last,
    ));

/// 4) Filtered trades stream
final tradeListProvider = StreamProvider.autoDispose<List<Trade>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  // 현재 threshold 값과 markets를 읽어 스트림 구독
  final threshold = ref.watch(tradeFilterThresholdProvider);
  final markets = await ref.watch(marketsProvider.future);
  final repository = ref.read(repoProvider);

  // threshold 변경 시 Repository에도 업데이트
  ref.listen<double>(tradeFilterThresholdProvider, (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i(
          'Threshold changed: ${prev.toStringAsFixed(0)} → ${next.toStringAsFixed(0)}',
        );
      }
      repository.updateThreshold(next);
    }
  });

  // 실제 필터된 거래 스트림 방출
  yield* repository.watchFilteredTrades(threshold, markets);
});

/// 5) Aggregated trades stream
final aggregatedTradeProvider = StreamProvider.autoDispose<Trade>((ref) {
  // Prevent dispose on background
  ref.keepAlive();
  final repository = ref.read(repoProvider);
  return repository.watchAggregatedTrades();
});

/// 6) Helper to change threshold & index
final tradeThresholdController = Provider((ref) => TradeThresholdController(ref));

class TradeThresholdController {
  final Ref ref;
  TradeThresholdController(this.ref);

  void updateThreshold(double threshold, int index) {
    final options =
        AppConfig.tradeFilters.where((f) => f >= 20000000).toList();
    if (index < 0 || index >= options.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid threshold index: $index');
      return;
    }
    ref.read(tradeFilterThresholdProvider.notifier).state = threshold;
    ref.read(tradeFilterIndexProvider.notifier).state = index;
    AppConfig.updateFilters(options);
    if (AppConfig.enableTradeLog) {
      log.i(
        'Threshold updated: ${threshold.toStringAsFixed(0)} (index: $index)',
      );
    }
  }

  double get currentThreshold => ref.read(tradeFilterThresholdProvider);
  int get currentIndex => ref.read(tradeFilterIndexProvider);
  List<double> get availableThresholds =>
      AppConfig.tradeFilters.where((f) => f >= 20000000).toList();
}\n\n// ====== lib/core/di/websocket_provider.dart ======\n
// lib/core/di/websocket_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../config/app_config.dart';
import '../network/websocket/trade_ws_client.dart';
import '../network/websocket/base_ws_client.dart'; // WsStatus enum
import '../utils/logger.dart';
import '../bridge/signal_bus.dart';

/// 🆕 WebSocket 상세 통계 클래스 (시간/연결/앱생명주기 중심)
class WebSocketStats {
  final DateTime? connectTime;
  final int reconnectCount;
  final int totalSessions;
  final Duration cumulativeConnectTime;
  final int connectionAttempts;
  final DateTime? lastStateChangeTime;
  
  const WebSocketStats({
    this.connectTime,
    this.reconnectCount = 0,
    this.totalSessions = 0,
    this.cumulativeConnectTime = Duration.zero,
    this.connectionAttempts = 0,
    this.lastStateChangeTime,
  });

  /// 연결 지속 시간 계산
  Duration? get uptime {
    if (connectTime == null) return null;
    return DateTime.now().difference(connectTime!);
  }

  /// 평균 연결 지속 시간
  Duration get averageSessionDuration {
    if (totalSessions == 0) return Duration.zero;
    return Duration(
      milliseconds: cumulativeConnectTime.inMilliseconds ~/ totalSessions,
    );
  }

  /// 연결 성공률 (%)
  double get connectionSuccessRate {
    if (connectionAttempts == 0) return 0.0;
    return (totalSessions / connectionAttempts) * 100;
  }
}

/// 🔄 SignalBus Provider (순환 참조 방지)
final signalBusProvider = Provider<SignalBus>((ref) {
  final bus = SignalBus();
  ref.onDispose(() => bus.dispose());
  return bus;
});

/// 🆕 WebSocket 상태 관리
final wsStatusProvider = StateProvider<WsStatus>((ref) => WsStatus.disconnected);

/// 🆕 WebSocket 통계 관리 (개별 Provider들 - 시간/연결/앱생명주기)
final wsConnectTimeProvider = StateProvider<DateTime?>((ref) => null);
final wsReconnectCountProvider = StateProvider<int>((ref) => 0);
final wsTotalSessionsProvider = StateProvider<int>((ref) => 0);
final wsCumulativeConnectTimeProvider = StateProvider<Duration>((ref) => Duration.zero);
final wsConnectionAttemptsProvider = StateProvider<int>((ref) => 0);
final wsLastStateChangeTimeProvider = StateProvider<DateTime?>((ref) => null);

/// 🆕 통합 WebSocket 통계 Provider (개별 Provider들을 조합)
final wsStatsProvider = Provider<WebSocketStats>((ref) {
  final connectTime = ref.watch(wsConnectTimeProvider);
  final reconnectCount = ref.watch(wsReconnectCountProvider);
  final totalSessions = ref.watch(wsTotalSessionsProvider);
  final cumulativeConnectTime = ref.watch(wsCumulativeConnectTimeProvider);
  final connectionAttempts = ref.watch(wsConnectionAttemptsProvider);
  final lastStateChangeTime = ref.watch(wsLastStateChangeTimeProvider);

  return WebSocketStats(
    connectTime: connectTime,
    reconnectCount: reconnectCount,
    totalSessions: totalSessions,
    cumulativeConnectTime: cumulativeConnectTime,
    connectionAttempts: connectionAttempts,
    lastStateChangeTime: lastStateChangeTime,
  );
});

/// 🆕 WebSocket 클라이언트 (기본 - 기존 그대로)
final wsClientProvider = Provider<TradeWsClient>((ref) {
  return TradeWsClient(
    onStatusChange: (status) {
      final now = DateTime.now();
      ref.read(wsStatusProvider.notifier).state = status;
      ref.read(wsLastStateChangeTimeProvider.notifier).state = now;
      
      // 간단한 통계 업데이트 (시간/연결/앱생명주기)
      switch (status) {
        case WsStatus.connecting:
          // 연결 시도 카운트
          final attempts = ref.read(wsConnectionAttemptsProvider);
          ref.read(wsConnectionAttemptsProvider.notifier).state = attempts + 1;
          break;
          
        case WsStatus.connected:
          // 연결 성공
          ref.read(wsConnectTimeProvider.notifier).state = now;
          
          // 총 세션 수 증가
          final sessions = ref.read(wsTotalSessionsProvider);
          ref.read(wsTotalSessionsProvider.notifier).state = sessions + 1;
          break;
          
        case WsStatus.reconnecting:
          // 재연결 카운트
          final currentCount = ref.read(wsReconnectCountProvider);
          ref.read(wsReconnectCountProvider.notifier).state = currentCount + 1;
          break;
          
        case WsStatus.disconnected:
          // 연결 종료 시 누적 시간 업데이트
          final connectTime = ref.read(wsConnectTimeProvider);
          if (connectTime != null) {
            final sessionDuration = now.difference(connectTime);
            final cumulative = ref.read(wsCumulativeConnectTimeProvider);
            ref.read(wsCumulativeConnectTimeProvider.notifier).state = 
                cumulative + sessionDuration;
          }
          ref.read(wsConnectTimeProvider.notifier).state = null;
          break;
          
        default:
          break;
      }
      
      if (AppConfig.enableTradeLog) {
        log.i('WebSocket status changed: $status');
      }
    },
  );
});\n\n// ====== lib/core/di/signal_provider.dart ======\n
// lib/core/di/signal_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import '../utils/pattern_detector.dart';
import '../utils/pattern_config.dart';
import '../utils/advanced_metrics.dart';
import 'trade_provider.dart'; // 전체 import (app_providers.dart 패턴)
import '../../data/repositories/signal_repository_impl.dart';
import '../../domain/entities/signal.dart';
import '../../domain/repositories/signal_repository.dart';
import '../../domain/usecases/signal_usecase.dart';

// ==========================================================================
// 🚀 V4.1 온라인 지표 의존성 주입 구조
// ==========================================================================

/// AdvancedMetrics Provider (온라인 계산기 관리)
final advancedMetricsProvider = Provider<AdvancedMetrics>((ref) {
  final metrics = AdvancedMetrics(
    maxGap: const Duration(seconds: 10),     // 스트림 끊김 감지 시간
    staleThreshold: const Duration(seconds: 30), // 데이터 만료 시간
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() {
    metrics.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 AdvancedMetrics disposed - 온라인 지표 정리 완료');
    }
  });
  
  return metrics;
});

/// PatternConfig Provider (상태 관리 가능)
final patternConfigProvider = StateNotifierProvider<PatternConfigNotifier, PatternConfig>((ref) {
  return PatternConfigNotifier();
});

/// PatternDetector Provider (온라인 지표 의존성 주입)
final patternDetectorProvider = Provider<PatternDetector>((ref) {
  final config = ref.watch(patternConfigProvider);
  final metrics = ref.watch(advancedMetricsProvider);
  
  final detector = PatternDetector(
    config: config,
    metrics: metrics,
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() {
    detector.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 PatternDetector disposed - 쿨다운 및 지표 정리 완료');
    }
  });
  
  return detector;
});

/// Signal Repository Provider (V4.1 온라인 지표 의존성 주입)
final signalRepoProvider = Provider<SignalRepository>((ref) {
  final remoteDS = ref.read(remoteDSProvider);
  final patternDetector = ref.watch(patternDetectorProvider);
  final patternConfig = ref.watch(patternConfigProvider);
  
  final repository = SignalRepositoryImpl(
    remoteDS,
    patternDetector: patternDetector,
    patternConfig: patternConfig,
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() async {
    await repository.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 SignalRepository V4.1 disposed - 모든 리소스 정리 완료');
    }
  });
  
  return repository;
});

/// Signal UseCase Provider
final signalUsecaseProvider = Provider<SignalUseCase>((ref) {
  final repository = ref.read(signalRepoProvider);
  return SignalUseCase(repository);
});

// ==========================================================================
// 🎯 상태 관리 Providers (V4.1 확장)
// ==========================================================================

/// 현재 선택된 패턴 인덱스 (슬라이더 위치)
final signalPatternIndexProvider = StateProvider<int>((_) => 0);

/// 현재 선택된 패턴 타입
final signalPatternTypeProvider = StateProvider<PatternType>((ref) {
  final index = ref.watch(signalPatternIndexProvider);
  final patternName = AppConfig.getSignalPatternByIndex(index);
  
  // AppConfig 패턴명을 PatternType으로 변환
  switch (patternName) {
    case 'surge':
      return PatternType.surge;
    case 'flashFire':
      return PatternType.flashFire;
    case 'stackUp':
      return PatternType.stackUp;
    case 'stealthIn':
      return PatternType.stealthIn;
    case 'blackHole':
      return PatternType.blackHole;
    case 'reboundShot':
      return PatternType.reboundShot;
    default:
      return PatternType.surge; // 기본값
  }
});

/// 패턴별 임계값 관리 (V4.1 PatternConfig 기반)
final signalThresholdProvider = StateProvider.family<double, PatternType>((ref, pattern) {
  final config = ref.watch(patternConfigProvider);
  return config.getConfigValue(pattern, 'priceChangePercent');
});

/// 패턴별 활성화 상태 관리
final signalPatternEnabledProvider = StateProvider.family<bool, PatternType>((ref, pattern) => true);

/// 🆕 온라인 지표 건강성 모니터링
final onlineMetricsHealthProvider = StreamProvider.autoDispose<Map<String, dynamic>>((ref) async* {
  final metrics = ref.watch(advancedMetricsProvider);
  
  yield* Stream.periodic(const Duration(seconds: 5), (_) {
    return metrics.getSystemHealth();
  });
});

/// 🆕 시스템 성능 모니터링
final systemPerformanceProvider = StreamProvider.autoDispose<Map<String, dynamic>>((ref) async* {
  final repository = ref.watch(signalRepoProvider) as SignalRepositoryImpl;
  
  yield* repository.watchPerformanceMetrics();
});

// ==========================================================================
// 🔥 스트림 Providers (V4.1 온라인 지표 연동)
// ==========================================================================

/// 현재 패턴의 시그널 스트림 (온라인 지표 연동)
final signalListProvider = StreamProvider.autoDispose<List<Signal>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  // 현재 선택된 패턴과 마켓 정보 구독
  final patternType = ref.watch(signalPatternTypeProvider);
  final repository = ref.read(signalRepoProvider);

  // marketsProvider에서 데이터 로드 (Trade와 동일한 패턴)
  final markets = await ref.watch(marketsProvider.future);

  // 패턴 변경 시 로그
  if (AppConfig.enableTradeLog) {
    log.i('🎯 Signal pattern changed to: ${patternType.displayName} (V4.1-Online)');
  }

  // 🆕 온라인 지표 상태 모니터링
  ref.listen(onlineMetricsHealthProvider, (prev, next) {
    if (next.hasValue) {
      final health = next.value!;
      final staleMarkets = health['staleMarkets'] ?? 0;
      if (staleMarkets > 0 && AppConfig.enableTradeLog) {
        log.w('⚠️ 온라인 지표 경고: $staleMarkets개 마켓 데이터 만료');
      }
    }
  });

  // 임계값 변경 감지 및 Repository 업데이트
  ref.listen<double>(signalThresholdProvider(patternType), (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i('📊 Signal threshold changed: ${patternType.displayName} ${prev.toStringAsFixed(2)} → ${next.toStringAsFixed(2)}');
      }
      repository.updatePatternThreshold(patternType, next);
    }
  });

  // 패턴 활성화 상태 변경 감지
  ref.listen<bool>(signalPatternEnabledProvider(patternType), (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i('🔄 Signal pattern ${next ? "enabled" : "disabled"}: ${patternType.displayName}');
      }
      repository.setPatternEnabled(patternType, next);
    }
  });

  // 패턴별 시그널 스트림 방출
  yield* repository.watchSignalsByPattern(patternType, markets);
});

/// 모든 패턴의 시그널 통합 스트림 (온라인 지표 연동)
final allSignalsProvider = StreamProvider.autoDispose<List<Signal>>((ref) async* {
  // Prevent dispose on background
  ref.keepAlive();
  
  final repository = ref.read(signalRepoProvider);
  
  // marketsProvider에서 데이터 로드 (Trade와 동일한 패턴)
  final markets = await ref.watch(marketsProvider.future);
  
  if (AppConfig.enableTradeLog) {
    log.i('🚀 All signals stream initialized with ${markets.length} markets (V4.1-Online)');
  }
  
  yield* repository.watchAllSignals(markets);
});

// ==========================================================================
// 🛠️ PatternConfig StateNotifier (V4.1 온라인 지표 설정 관리)
// ==========================================================================

class PatternConfigNotifier extends StateNotifier<PatternConfig> {
  PatternConfigNotifier() : super(PatternConfig());

  /// 특정 패턴의 설정값 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    try {
      state.updatePatternConfig(pattern, key, value);
      // 상태 갱신을 위해 새 인스턴스 생성
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('⚙️ Pattern config updated: ${pattern.name}.$key = $value');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Pattern config update failed: $e');
      }
    }
  }

  /// 패턴 프리셋 적용
  void applyPreset(String presetName) {
    try {
      switch (presetName.toLowerCase()) {
        case 'conservative':
          state.applyConservativePreset();
          break;
        case 'aggressive':
          state.applyAggressivePreset();
          break;
        case 'balanced':
          state.applyBalancedPreset();
          break;
        default:
          throw ArgumentError('Unknown preset: $presetName');
      }
      
      // 상태 갱신
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('🎯 Pattern preset applied: $presetName');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Preset application failed: $e');
      }
    }
  }

  /// 설정 가져오기/내보내기
  void importConfig(Map<String, dynamic> config) {
    try {
      state.importConfig(config);
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('📥 Pattern config imported successfully');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Config import failed: $e');
      }
    }
  }

  Map<String, dynamic> exportConfig() {
    return state.exportConfig();
  }

  /// 기본값으로 리셋
  void resetToDefault([PatternType? pattern]) {
    state.resetToDefault(pattern);
    state = PatternConfig(customConfig: state.getAllPatternConfigs());
    
    if (AppConfig.enableTradeLog) {
      final message = pattern != null 
          ? 'Pattern ${pattern.name} reset to default'
          : 'All patterns reset to default';
      log.i('🔄 $message');
    }
  }
}

// ==========================================================================
// 🎮 Signal 패턴 컨트롤러 (V4.1 온라인 지표 확장)
// ==========================================================================

final signalPatternController = Provider((ref) => SignalPatternControllerV4(ref));

class SignalPatternControllerV4 {
  final Ref ref;
  SignalPatternControllerV4(this.ref);

  /// 패턴 인덱스 변경 (슬라이더 이동)
  void updatePatternIndex(int index) {
    final maxIndex = AppConfig.signalPatterns.length - 1;
    if (index < 0 || index > maxIndex) {
      if (AppConfig.enableTradeLog) {
        log.w('⚠️ Invalid pattern index: $index (max: $maxIndex)');
      }
      return;
    }

    ref.read(signalPatternIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      final patternName = AppConfig.getSignalPatternByIndex(index);
      log.i('🎯 Pattern index updated: $index (${AppConfig.getSignalPatternName(patternName)})');
    }
  }

  /// 현재 패턴의 임계값 변경 (V4.1 PatternConfig 연동)
  void updateThreshold(double threshold) {
    final currentPattern = ref.read(signalPatternTypeProvider);
    
    // PatternConfig에도 반영
    ref.read(patternConfigProvider.notifier)
        .updatePatternConfig(currentPattern, 'priceChangePercent', threshold);
    
    // Provider 상태 업데이트
    ref.read(signalThresholdProvider(currentPattern).notifier).state = threshold;
  }

  /// 🆕 V4.1 고급 설정 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    ref.read(patternConfigProvider.notifier).updatePatternConfig(pattern, key, value);
  }

  /// 🆕 프리셋 적용
  void applyPreset(String presetName) {
    ref.read(patternConfigProvider.notifier).applyPreset(presetName);
  }

  /// 패턴 활성화/비활성화
  void setPatternEnabled(PatternType pattern, bool enabled) {
    ref.read(signalPatternEnabledProvider(pattern).notifier).state = enabled;
  }

  /// 시그널 초기화
  void clearSignals([PatternType? pattern]) {
    final repository = ref.read(signalRepoProvider);
    repository.clearSignals(pattern);
    
    if (AppConfig.enableTradeLog) {
      final message = pattern != null 
          ? 'Signals cleared for pattern: ${pattern.displayName}'
          : 'All signals cleared';
      log.i('🧹 $message');
    }
  }

  /// 🆕 V4.1 온라인 지표 리셋
  void resetOnlineMetrics([String? market]) {
    final metrics = ref.read(advancedMetricsProvider);
    
    if (market != null) {
      metrics.resetMarket(market);
      if (AppConfig.enableTradeLog) {
        log.i('🔄 Online metrics reset for market: $market');
      }
    } else {
      metrics.resetAll();
      if (AppConfig.enableTradeLog) {
        log.i('🔄 All online metrics reset');
      }
    }
  }

  /// 🆕 V4.1 시스템 헬스 체크
  Future<Map<String, dynamic>> getSystemHealth() async {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return await repository.getSystemHealth();
  }

  /// 🆕 V4.1 패턴별 통계 (온라인 지표 포함)
  Future<Map<String, dynamic>> getPatternStats(PatternType pattern) async {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return await repository.getPatternStats(pattern);
  }

  /// 🆕 V4.1 온라인 지표 상태 조회
  Map<String, dynamic> getOnlineMetricsHealth() {
    final metricsHealth = ref.read(onlineMetricsHealthProvider);
    return metricsHealth.when(
      data: (health) => health,
      loading: () => {'status': 'loading'},
      error: (error, stack) => {'status': 'error', 'message': error.toString()},
    );
  }

  /// 🆕 V4.1 설정 내보내기/가져오기
  Map<String, dynamic> exportConfiguration() {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return repository.exportConfiguration();
  }

  void importConfiguration(Map<String, dynamic> config) {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    repository.importConfiguration(config);
    
    if (AppConfig.enableTradeLog) {
      log.i('📥 Configuration imported successfully');
    }
  }

  /// 현재 상태 조회
  int get currentIndex => ref.read(signalPatternIndexProvider);
  PatternType get currentPattern => ref.read(signalPatternTypeProvider);
  double get currentThreshold => ref.read(signalThresholdProvider(currentPattern));
  bool get isCurrentPatternEnabled => ref.read(signalPatternEnabledProvider(currentPattern));

  /// 사용 가능한 패턴 정보
  List<String> get availablePatterns => AppConfig.signalPatterns;
  List<String> get patternDisplayNames => 
      AppConfig.signalPatterns.map((p) => AppConfig.getSignalPatternName(p)).toList();
  List<String> get patternDescriptions => 
      AppConfig.signalPatterns.map((p) => AppConfig.getSignalPatternDescription(p)).toList();

  /// V4.1 패턴별 기본 임계값 조회 (PatternConfig 기반)
  double getDefaultThreshold(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getConfigValue(pattern, 'priceChangePercent');
  }

  /// V4.1 패턴별 쿨다운 시간 조회
  Duration getCooldownDuration(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getCooldownDuration(pattern);
  }

  /// V4.1 패턴 설정 전체 조회
  Map<String, double> getPatternConfig(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getPatternConfig(pattern);
  }

  /// 패턴별 시간 윈도우 조회 (기존 호환성)
  int getTimeWindow(PatternType pattern) {
    final patternName = _getPatternConfigName(pattern);
    return AppConfig.getSignalTimeWindow(patternName);
  }

  /// 패턴 통계 조회 (V4.1 온라인 지표 확장)
  Map<String, dynamic> getPatternStatsOverview() {
    final allSignals = ref.read(allSignalsProvider).value ?? [];
    final patternCounts = <PatternType, int>{};
    
    for (final signal in allSignals) {
      patternCounts[signal.patternType] = 
          (patternCounts[signal.patternType] ?? 0) + 1;
    }
    
    // 온라인 지표 건강성 추가
    final onlineHealth = getOnlineMetricsHealth();
    
    return {
      'totalSignals': allSignals.length,
      'patternCounts': patternCounts,
      'lastUpdate': allSignals.isNotEmpty ? allSignals.first.detectedAt : null,
      'version': '4.1-Online',
      'onlineMetrics': onlineHealth,
    };
  }

  /// 🆕 V4.1 성능 모니터링 스트림
  Stream<Map<String, dynamic>> watchPerformanceMetrics() {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return repository.watchPerformanceMetrics();
  }

  /// 🆕 V4.1 온라인 지표 모니터링 스트림
  Stream<Map<String, dynamic>> watchOnlineMetricsHealth() {
    return Stream.periodic(const Duration(seconds: 5), (_) {
      final metrics = ref.read(advancedMetricsProvider);
      return metrics.getSystemHealth();
    });
  }
}

/// Helper function: PatternType을 AppConfig 패턴명으로 변환
String _getPatternConfigName(PatternType pattern) {
  switch (pattern) {
    case PatternType.surge:
      return 'surge';
    case PatternType.flashFire:
      return 'flashFire';
    case PatternType.stackUp:
      return 'stackUp';
    case PatternType.stealthIn:
      return 'stealthIn';
    case PatternType.blackHole:
      return 'blackHole';
    case PatternType.reboundShot:
      return 'reboundShot';
  }
}

// ==========================================================================
// 🔍 개발자용 디버깅 Providers
// ==========================================================================

/// 🆕 디버깅용 Provider - 전체 시스템 상태
final debugSystemStatusProvider = FutureProvider.autoDispose<Map<String, dynamic>>((ref) async {
  final controller = ref.watch(signalPatternController);
  final systemHealth = await controller.getSystemHealth();
  final onlineHealth = controller.getOnlineMetricsHealth();
  
  return {
    'timestamp': DateTime.now().toIso8601String(),
    'version': 'V4.1-Online-Debug',
    'systemHealth': systemHealth,
    'onlineMetrics': onlineHealth,
    'currentPattern': controller.currentPattern.name,
    'activeProviders': {
      'advancedMetrics': 'active',
      'patternDetector': 'active', 
      'signalRepository': 'active',
      'patternConfig': 'active',
    },
  };
});

/// Repository dispose 관리 (V4.1)
final signalRepositoryDisposeProvider = Provider.autoDispose<SignalRepository>((ref) {
  final repository = ref.watch(signalRepoProvider);
  
  ref.onDispose(() async {
    await repository.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 Signal repository V4.1 disposed - 온라인 지표 포함 완전 정리');
    }
  });
  
  return repository;
});\n\n// ====== lib/core/di/sector_provider.dart ======\n
// lib/core/di/sector_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'volume_provider.dart' show volumeUsecaseProvider;
import 'trade_provider.dart' show marketsProvider;
import '../../domain/entities/volume.dart';
import '../../shared/widgets/sector_classification.dart';

// ═══════════════════════════════════════════════════════════════════════════════
// 🆕 SECTOR 전용 Provider들 (SectorClassificationProvider 연동)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🆕 섹터 분류 Provider (SectorClassificationProvider 연동)
final sectorClassificationProvider = ChangeNotifierProvider<SectorClassificationProvider>(
  (ref) => SectorClassificationProvider(),
);

/// 🆕 섹터 시간대 상태 (볼륨과 독립적으로 관리)
final sectorTimeFrameIndexProvider = StateProvider<int>((ref) => 0);

final sectorTimeFrameProvider = StateProvider<String>((ref) {
  final index = ref.watch(sectorTimeFrameIndexProvider);
  final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  if (index >= 0 && index < timeFrames.length) {
    return timeFrames[index];
  }
  return '1m';
});

/// 🆕 섹터별 거래대금 데이터 스트림 (SectorClassificationProvider 활용)
final sectorVolumeDataProvider = StreamProvider.autoDispose<List<Volume>>((ref) async* {
  ref.keepAlive();

  try {
    final timeFrame = ref.watch(sectorTimeFrameProvider);
    final usecase = ref.read(volumeUsecaseProvider);
    
    // markets AsyncValue 처리
    final marketsAsync = ref.watch(marketsProvider);
    final markets = marketsAsync.when(
      data: (data) => data,
      loading: () => <String>[],
      error: (_, __) => <String>[],
    );

    if (markets.isEmpty) {
      yield <Volume>[];
      return;
    }

    if (AppConfig.enableTradeLog) {
      log.i('Sector volume stream started: $timeFrame, ${markets.length} markets');
    }

    // 개별 코인 볼륨을 섹터별로 변환
    yield* usecase.getVolumeRanking(timeFrame, markets).map((result) {
      return result.when(
        ok: (coinVolumes) {
          // SectorClassificationProvider에서 현재 섹터 매핑 가져오기
          final sectorProvider = ref.read(sectorClassificationProvider);
          final sectorMapping = sectorProvider.currentSectors;
          
          final sectorVolumes = _aggregateVolumesBySector(coinVolumes, sectorMapping);
          
          if (AppConfig.enableTradeLog) {
            log.d('Sector volumes aggregated: ${sectorVolumes.length} sectors from ${coinVolumes.length} coins');
          }
          
          return sectorVolumes;
        },
        err: (error) {
          log.e('Sector Volume error: ${error.message}');
          return <Volume>[];
        },
      );
    });
    
  } catch (e, stackTrace) {
    log.e('Sector volume stream error: $e', e, stackTrace);
    yield <Volume>[];
  }
});

/// 🎯 핵심 로직: 개별 코인 볼륨을 섹터별로 합산
List<Volume> _aggregateVolumesBySector(List<Volume> coinVolumes, Map<String, List<String>> sectorMapping) {
  if (coinVolumes.isEmpty) return [];
  
  final Map<String, double> sectorVolumeMap = {};
  final sampleVolume = coinVolumes.first;
  
  // 각 코인을 해당 섹터에 합산
  for (final coinVolume in coinVolumes) {
    final ticker = coinVolume.market.replaceFirst('KRW-', '');
    final sectors = _findSectorsForCoin(ticker, sectorMapping);
    
    for (final sector in sectors) {
      sectorVolumeMap[sector] = (sectorVolumeMap[sector] ?? 0.0) + coinVolume.totalVolume;
    }
  }
  
  // 볼륨이 0인 섹터 제거
  sectorVolumeMap.removeWhere((key, value) => value <= 0);
  
  // Volume 객체로 변환
  final sectorVolumes = sectorVolumeMap.entries
      .map((entry) => Volume(
            market: 'SECTOR-${entry.key}', // 섹터 구분용 prefix
            totalVolume: entry.value,
            lastUpdatedMs: sampleVolume.lastUpdatedMs,
            timeFrame: sampleVolume.timeFrame,
            timeFrameStartMs: sampleVolume.timeFrameStartMs,
          ))
      .toList();
  
  // 볼륨 순 정렬 (높은 순)
  sectorVolumes.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
  return sectorVolumes;
}

/// 🎯 특정 코인이 속한 섹터들 찾기
List<String> _findSectorsForCoin(String ticker, Map<String, List<String>> sectorMapping) {
  final sectors = <String>[];
  sectorMapping.forEach((sectorName, coins) {
    if (coins.contains(ticker)) {
      sectors.add(sectorName);
    }
  });
  return sectors;
}

/// 🆕 섹터 컨트롤러
final sectorTimeFrameController = Provider((ref) => SectorTimeFrameController(ref));

class SectorTimeFrameController {
  final Ref ref;
  SectorTimeFrameController(this.ref);

  /// 시간대 변경
  void updateTimeFrame(String timeFrame, int index) {
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    if (index < 0 || index >= timeFrames.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid sector timeFrame index: $index');
      return;
    }
    
    ref.read(sectorTimeFrameProvider.notifier).state = timeFrame;
    ref.read(sectorTimeFrameIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      log.i('Sector TimeFrame updated: $timeFrame (index: $index)');
    }
  }

  /// 🆕 섹터 분류 토글 (SectorClassificationProvider 연동)
  void toggleSectorClassification() {
    ref.read(sectorClassificationProvider.notifier).toggleClassificationType();
    
    if (AppConfig.enableTradeLog) {
      final currentName = ref.read(sectorClassificationProvider).currentClassificationName;
      log.i('Sector classification toggled: $currentName');
    }
  }

  /// 현재 시간대 정보
  String get currentTimeFrame => ref.read(sectorTimeFrameProvider);
  int get currentIndex => ref.read(sectorTimeFrameIndexProvider);
  
  /// 현재 섹터 분류 정보 (SectorClassificationProvider 연동)
  bool get isDetailedClassification => ref.read(sectorClassificationProvider).isDetailedClassification;
  String get currentSectorClassificationName => ref.read(sectorClassificationProvider).currentClassificationName;
  int get totalSectors => ref.read(sectorClassificationProvider).currentSectors.length;
  
  /// 기본 정보
  List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  
  String getTimeFrameName(String timeFrame) {
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    return AppConfig.timeFrameNames[minutes] ?? timeFrame;
  }

  /// 🆕 섹터 관련 유틸리티 (SectorClassificationProvider 연동)
  Map<String, int> getSectorSizes() {
    return ref.read(sectorClassificationProvider).sectorSizes;
  }

  List<String> getCoinsInSector(String sectorName) {
    return ref.read(sectorClassificationProvider).getCoinsInSector(sectorName);
  }

  List<String> getSectorsForCoin(String ticker) {
    return ref.read(sectorClassificationProvider).getSectorsForCoin(ticker);
  }

  /// 수동 리셋 메서드들 (볼륨 UseCase 재사용)
  void resetCurrentTimeFrame() {
    final usecase = ref.read(volumeUsecaseProvider);
    final timeFrame = ref.read(sectorTimeFrameProvider);
    
    final result = usecase.resetTimeFrame(timeFrame);
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Sector volume reset: $timeFrame');
        }
      },
      err: (error) {
        log.e('Sector volume reset failed: ${error.message}');
      },
    );
  }

  void resetAllTimeFrames() {
    final usecase = ref.read(volumeUsecaseProvider);
    
    final result = usecase.resetAllTimeFrames();
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Sector volume reset: all timeframes');
        }
      },
      err: (error) {
        log.e('Sector volume reset all failed: ${error.message}');
      },
    );
  }

  /// 다음 리셋 시간 조회
  DateTime? getNextResetTime() {
    final usecase = ref.read(volumeUsecaseProvider);
    final timeFrame = ref.read(sectorTimeFrameProvider);
    
    final result = usecase.getNextResetTime(timeFrame);
    return result.when(
      ok: (resetTime) => resetTime,
      err: (error) {
        log.e('Get sector reset time failed: ${error.message}');
        return null;
      },
    );
  }
}\n\n// ====== lib/core/di/app_providers.dart ======\n
// lib/core/di/app_providers.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../bridge/signal_bus.dart';

/// ▶ App lifecycle
export '../utils/app_life_cycle_manager.dart'
    show appLifecycleManagerProvider;

/// ▶ Settings DI + state
export 'settings_provider.dart'
    show
        sharedPreferencesProvider,
        settingsLocalDSProvider,
        settingsRepositoryProvider,
        settingsUsecaseProvider,
        appSettingsProvider;

/// ▶ Domain entities
export '../../domain/entities/app_settings.dart'
    show
        DisplayMode,
        SliderPosition;

/// ▶ WebSocket DI & stats
export 'websocket_provider.dart'
    show
        wsStatusProvider,
        wsClientProvider,
        wsStatsProvider,
        WebSocketStats;

/// ▶ Trade DI & streams
export 'trade_provider.dart';

/// ▶ Trade 화면 로직
export '../../presentation/controllers/trade_controller.dart'
    show tradeControllerProvider;

/// ▶ Volume DI & streams
export 'volume_provider.dart'
    show
        volumeRemoteDSProvider,
        volumeRepositoryProvider,
        volumeUsecaseProvider,
        volumeTimeFrameIndexProvider,
        volumeTimeFrameProvider,
        volumeDataProvider,
        volumeTimeFrameController;

/// ▶ Volume 화면 로직
export '../../presentation/controllers/volume_controller.dart'
    show volumeControllerProvider;

/// ▶ Sector DI & streams
export 'sector_provider.dart'
    show
        sectorClassificationProvider,
        sectorTimeFrameIndexProvider,
        sectorTimeFrameProvider,
        sectorVolumeDataProvider,
        sectorTimeFrameController;

/// ▶ Sector 화면 로직
export '../../presentation/controllers/sector_controller.dart'
    show sectorControllerProvider;

/// ▶ Signal DI & streams (V4.1 Online)
export 'signal_provider.dart'
    show
        // 🔥 V4.1 의존성 주입
        advancedMetricsProvider,
        patternConfigProvider,
        patternDetectorProvider,
        signalRepoProvider,
        signalUsecaseProvider,
        
        // 🎯 상태 관리
        signalPatternIndexProvider,
        signalPatternTypeProvider,
        signalThresholdProvider,
        signalPatternEnabledProvider,
        
        // 🔥 스트림 (온라인 지표 연동)
        signalListProvider,
        allSignalsProvider,
        
        // 🆕 V4.1 모니터링
        onlineMetricsHealthProvider,
        systemPerformanceProvider,
        
        // 🎮 V4.1 컨트롤러
        signalPatternController,
        SignalPatternControllerV4,
        
        // 🛠️ StateNotifier
        PatternConfigNotifier,
        
        // 🔍 디버깅
        debugSystemStatusProvider;

/// ▶ Signal 화면 로직
export '../../presentation/controllers/signal_controller.dart'
    show signalControllerProvider;

/// ▶ Market Mood DI & streams
export 'market_mood_provider.dart'
    show
        coinGeckoApiClientProvider,
        marketMoodRemoteDSProvider,
        marketMoodLocalDSProvider,
        marketMoodRepositoryProvider,
        marketMoodUsecaseProvider,
        exchangeRateProvider,
        marketMoodProvider,
        marketMoodComputedDataProvider, // UI에서 로딩/에러 상태 처리를 위해 export
        volumeComparisonProvider,
        currentMarketMoodProvider,
        marketMoodSummaryProvider,
        marketMoodSystemProvider,
        marketMoodControllerProvider,
        MarketMoodComputedData;

/// ▶ Market Mood Domain Entities
export '../../domain/entities/market_mood.dart'
    show
        MarketMood,
        VolumeData,
        MarketMoodData,
        ComparisonResult,
        ComparisonData,
        MarketMoodSystemState,
        VolumeConstants;

/// ▶ Sector 분류 관리 (shared layer)
export '../../shared/widgets/sector_classification.dart'
    show SectorClassificationProvider;

/// ▶ 전역 SnackBar key
final scaffoldMessengerKeyProvider =
    Provider<GlobalKey<ScaffoldMessengerState>>((ref) {
  return GlobalKey<ScaffoldMessengerState>();
});

/// ▶ BottomTab 인덱스
final selectedTabProvider = StateProvider<int>((ref) => 0);

/// ▶ SignalBus 싱글턴
final signalBusProvider = Provider<SignalBus>((ref) {
  final bus = SignalBus();
  ref.onDispose(() => bus.dispose());
  return bus;
});\n\n// ====== lib/core/di/notification_provider.dart ======\n
// lib/core/di/notification_provider.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import '../utils/logger.dart';
import 'app_providers.dart'; // scaffoldMessengerKeyProvider

/// 🔔 알림 타입 enum
enum NotificationType {
  trade,       // 체결 알림
  priceAlert,  // 가격 알림  
  volume,      // 거래량 알림
  surge,       // 급등락 알림
  system,      // 시스템 알림
}

/// 🔔 알림 상태 enum  
enum NotificationStatus {
  unread,      // 읽지 않음
  read,        // 읽음
  archived,    // 보관됨
}

/// 🔔 알림 데이터 모델 (임시)
class NotificationData {
  final String id;
  final String title;
  final String message;
  final NotificationType type;
  final NotificationStatus status;
  final DateTime createdAt;
  final Map<String, dynamic>? extra;

  const NotificationData({
    required this.id,
    required this.title,
    required this.message,
    required this.type,
    this.status = NotificationStatus.unread,
    required this.createdAt,
    this.extra,
  });

  NotificationData copyWith({
    NotificationStatus? status,
    Map<String, dynamic>? extra,
  }) {
    return NotificationData(
      id: id,
      title: title,
      message: message,
      type: type,
      status: status ?? this.status,
      createdAt: createdAt,
      extra: extra ?? this.extra,
    );
  }
}

/// 🔔 알림 목록 Provider
final notificationListProvider = StateProvider<List<NotificationData>>((ref) => []);

/// 🔔 읽지 않은 알림 개수
final unreadNotificationCountProvider = Provider<int>((ref) {
  final notifications = ref.watch(notificationListProvider);
  return notifications.where((n) => n.status == NotificationStatus.unread).length;
});

/// 🔔 알림 필터 Provider
final notificationFilterProvider = StateProvider<NotificationType?>((ref) => null);

/// 🔔 필터된 알림 목록
final filteredNotificationProvider = Provider<List<NotificationData>>((ref) {
  final notifications = ref.watch(notificationListProvider);
  final filter = ref.watch(notificationFilterProvider);
  
  if (filter == null) return notifications;
  return notifications.where((n) => n.type == filter).toList();
});

/// 🔔 알림 관리 서비스
final notificationServiceProvider = Provider((ref) => NotificationService(ref));

/// 알림 서비스 클래스
class NotificationService {
  final Ref ref;
  StreamSubscription<RemoteMessage>? _onMessageSub;
  StreamSubscription<RemoteMessage>? _onMessageOpenedSub;
  
  NotificationService(this.ref);

  /// 🆕 Firebase 리스너 설정 (AppRouter에서 이동됨)
  void setupFirebaseListeners(GlobalKey<NavigatorState> navigatorKey) {
    final messenger = ref.read(scaffoldMessengerKeyProvider).currentState;
    
    // 앱이 실행 중일 때 알림 수신
    _onMessageSub = FirebaseMessaging.onMessage.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        // 알림 Provider에 저장
        addNotification(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
        
        // SnackBar로도 표시
        if (messenger != null) {
          messenger
            ..hideCurrentSnackBar()
            ..showSnackBar(SnackBar(content: Text('${n.title}: ${n.body}')));
        }
      }
    });
    
    // 앱이 종료된 상태에서 알림 클릭해서 앱 시작
    FirebaseMessaging.instance.getInitialMessage().then((msg) {
      if (msg != null) {
        final n = msg.notification;
        if (n != null) {
          addNotification(
            title: n.title ?? '알림',
            message: n.body ?? '',
            type: _getNotificationType(msg.data),
            extra: msg.data,
          );
        }
        
        // TODO: 나중에 특정 알림 모달 자동 열기 기능 추가 가능
        // NotificationModal.show(navigatorKey.currentContext!);
      }
    });
    
    // 앱이 백그라운드에 있을 때 알림 클릭
    _onMessageOpenedSub = FirebaseMessaging.onMessageOpenedApp.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        addNotification(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
        
        // TODO: 나중에 특정 알림 모달 자동 열기 기능 추가 가능
        // NotificationModal.show(navigatorKey.currentContext!);
      }
    });
    
    log.i('🔔 Firebase 알림 리스너 설정 완료');
  }

  /// Firebase 메시지 데이터로부터 알림 타입 추론
  NotificationType _getNotificationType(Map<String, dynamic>? data) {
    if (data == null) return NotificationType.system;
    
    final type = data['type']?.toString().toLowerCase();
    switch (type) {
      case 'trade':
      case 'execution':
        return NotificationType.trade;
      case 'price':
      case 'price_alert':
        return NotificationType.priceAlert;
      case 'volume':
        return NotificationType.volume;
      case 'surge':
      case 'pump':
      case 'dump':
        return NotificationType.surge;
      default:
        return NotificationType.system;
    }
  }
  
  /// Firebase 리스너 정리
  void dispose() {
    _onMessageSub?.cancel();
    _onMessageOpenedSub?.cancel();
    log.i('🧹 Firebase 알림 리스너 정리됨');
  }
  
  /// 알림 추가
  void addNotification({
    required String title,
    required String message,
    required NotificationType type,
    Map<String, dynamic>? extra,
  }) {
    final notification = NotificationData(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: title,
      message: message,
      type: type,
      createdAt: DateTime.now(),
      extra: extra,
    );
    
    final currentList = ref.read(notificationListProvider);
    ref.read(notificationListProvider.notifier).state = [
      notification,
      ...currentList,
    ];
    
    log.i('🔔 알림 추가: $title');
  }
  
  /// 알림 읽음 처리
  void markAsRead(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) {
      if (notification.id == notificationId) {
        return notification.copyWith(status: NotificationStatus.read);
      }
      return notification;
    }).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 알림 읽음: $notificationId');
  }
  
  /// 알림 제거
  void removeNotification(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.where((n) => n.id != notificationId).toList();
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('🗑️ 알림 제거: $notificationId');
  }
  
  /// 모든 알림 읽음 처리
  void markAllAsRead() {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) => 
      notification.copyWith(status: NotificationStatus.read)
    ).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 모든 알림 읽음 처리');
  }
  
  /// 모든 알림 제거
  void clearAllNotifications() {
    ref.read(notificationListProvider.notifier).state = [];
    log.i('🧹 모든 알림 제거');
  }
  
  /// 필터 설정
  void setFilter(NotificationType? type) {
    ref.read(notificationFilterProvider.notifier).state = type;
    log.i('🔍 알림 필터: ${type?.name ?? "전체"}');
  }
  
  /// 읽지 않은 알림 개수
  int getUnreadCount() {
    return ref.read(unreadNotificationCountProvider);
  }
}\n\n// ====== lib/core/di/volume_provider.dart ======\n
// lib/core/di/volume_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider;
import 'trade_provider.dart' show marketsProvider; // 🎯 마켓 리스트 재사용
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/volume_repository_impl.dart';
import '../../domain/repositories/volume_repository.dart';
import '../../domain/usecases/volume_usecase.dart'; // 🆕 UseCase import
import '../../domain/entities/volume.dart'; // 🆕 Volume 엔티티 import 추가!


// ═══════════════════════════════════════════════════════════════════════════════
// 🆕 VOLUME 전용 Provider들 (브로드캐스트 스트림 기반)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🎯 볼륨 전용 RemoteDataSource (TradeRemoteDataSource와 동일한 인스턴스)
final volumeRemoteDSProvider = Provider<TradeRemoteDataSource>((ref) {
 return TradeRemoteDataSource(
   ref.read(wsClientProvider),
   ref.read(signalBusProvider),
   useTestData: AppConfig.useTestDataInDev,
 );
});

/// 🆕 VolumeRepository
final volumeRepositoryProvider = Provider<VolumeRepository>((ref) {
 return VolumeRepositoryImpl(
   ref.read(volumeRemoteDSProvider),
 );
});

/// 🆕 VolumeUsecase
final volumeUsecaseProvider = Provider<VolumeUsecase>((ref) {
 return VolumeUsecase(
   ref.read(volumeRepositoryProvider),
 );
});

/// 🆕 볼륨 시간대 상태 (기본값: 1분)
final volumeTimeFrameIndexProvider = StateProvider<int>((_) => 0); // 1분이 기본 (0:1m, 1:5m, 2:15m)

final volumeTimeFrameProvider = StateProvider<String>((ref) {
 final index = ref.watch(volumeTimeFrameIndexProvider);
 final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
 if (index >= 0 && index < timeFrames.length) {
   return timeFrames[index];
 }
 return '1m'; // fallback (기본값 1분)
});

/// 🚀 볼륨 데이터 스트림 (100ms 배치 업데이트)
final volumeDataProvider = StreamProvider.autoDispose<List<Volume>>((ref) async* {
 // Prevent immediate dispose on loss of listeners
 ref.keepAlive();

 try {
   // 현재 시간대와 markets를 읽어서 스트림 구독
   final timeFrame = ref.watch(volumeTimeFrameProvider);
   final markets = await ref.watch(marketsProvider.future);
   final usecase = ref.read(volumeUsecaseProvider); // 🆕 UseCase 사용

   if (AppConfig.enableTradeLog) {
     log.i('Volume stream started: $timeFrame, ${markets.length} markets');
   }

   // 🚀 배치 처리된 볼륨 데이터 스트림 방출 (UseCase를 통해)
   yield* usecase.getVolumeRanking(timeFrame, markets).map((result) {
     return result.when(
       ok: (volumes) => volumes,
       err: (error) {
         log.e('Volume UseCase error: ${error.message}');
         return <Volume>[]; // 에러 시 빈 리스트
       },
     );
   });
   
 } catch (e, stackTrace) {
   log.e('Volume stream error: $e', e, stackTrace);
   
   // 에러 시 빈 리스트 방출
   yield <Volume>[];
 }
});

/// 🆕 볼륨 시간대 컨트롤러
final volumeTimeFrameController = Provider((ref) => VolumeTimeFrameController(ref));

class VolumeTimeFrameController {
 final Ref ref;
 VolumeTimeFrameController(this.ref);

 void updateTimeFrame(String timeFrame, int index) {
   final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
   if (index < 0 || index >= timeFrames.length) {
     if (AppConfig.enableTradeLog) log.w('Invalid timeFrame index: $index');
     return;
   }
   
   ref.read(volumeTimeFrameProvider.notifier).state = timeFrame;
   ref.read(volumeTimeFrameIndexProvider.notifier).state = index;
   
   if (AppConfig.enableTradeLog) {
     log.i('Volume TimeFrame updated: $timeFrame (index: $index)');
   }
 }

 /// 수동 리셋 메서드들 (UseCase를 통해)
 void resetCurrentTimeFrame() {
   final usecase = ref.read(volumeUsecaseProvider);
   final timeFrame = ref.read(volumeTimeFrameProvider);
   
   final result = usecase.resetTimeFrame(timeFrame);
   result.when(
     ok: (_) {
       if (AppConfig.enableTradeLog) {
         log.i('Volume reset: $timeFrame');
       }
     },
     err: (error) {
       log.e('Volume reset failed: ${error.message}');
     },
   );
 }

 void resetAllTimeFrames() {
   final usecase = ref.read(volumeUsecaseProvider);
   
   final result = usecase.resetAllTimeFrames();
   result.when(
     ok: (_) {
       if (AppConfig.enableTradeLog) {
         log.i('Volume reset: all timeframes');
       }
     },
     err: (error) {
       log.e('Volume reset all failed: ${error.message}');
     },
   );
 }

 /// 다음 리셋 시간 조회 (UseCase를 통해)
 DateTime? getNextResetTime() {
   final usecase = ref.read(volumeUsecaseProvider);
   final timeFrame = ref.read(volumeTimeFrameProvider);
   
   final result = usecase.getNextResetTime(timeFrame);
   return result.when(
     ok: (resetTime) => resetTime,
     err: (error) {
       log.e('Get reset time failed: ${error.message}');
       return null;
     },
   );
 }

 /// Getters
 String get currentTimeFrame => ref.read(volumeTimeFrameProvider);
 int get currentIndex => ref.read(volumeTimeFrameIndexProvider);
 List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
 
 /// 시간대 한국어 이름
 String getTimeFrameName(String timeFrame) {
   final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
   return AppConfig.timeFrameNames[minutes] ?? timeFrame;
 }
}\n\n// ====== lib/core/di/market_mood_provider copy.dart ======\n
\n\n// ====== lib/core/di/surge_provider.dart ======\n
// lib/core/di/surge_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider;
import 'trade_provider.dart' show marketsProvider; // 🎯 마켓 리스트 재사용
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/surge_repository_impl.dart';
import '../../domain/repositories/surge_repository.dart';
import '../../domain/usecases/surge_usecase.dart'; // 🆕 UseCase import
import '../../domain/entities/surge.dart'; // 🆕 Surge 엔티티 import 추가!

// ═══════════════════════════════════════════════════════════════════════════════
// 🚀 SURGE 전용 Provider들 (브로드캐스트 스트림 기반)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🎯 급등/급락 전용 RemoteDataSource (TradeRemoteDataSource와 동일한 인스턴스)
final surgeRemoteDSProvider = Provider<TradeRemoteDataSource>((ref) {
  return TradeRemoteDataSource(
    ref.read(wsClientProvider),
    ref.read(signalBusProvider),
    useTestData: AppConfig.useTestDataInDev,
  );
});

/// 🚀 SurgeRepository
final surgeRepositoryProvider = Provider<SurgeRepository>((ref) {
  return SurgeRepositoryImpl(
    ref.read(surgeRemoteDSProvider),
  );
});

/// 🚀 SurgeUsecase
final surgeUsecaseProvider = Provider<SurgeUsecase>((ref) {
  return SurgeUsecase(
    ref.read(surgeRepositoryProvider),
  );
});

/// 🚀 급등/급락 시간대 상태 (기본값: 1분)
final surgeTimeFrameIndexProvider = StateProvider<int>((_) => 0); // 1분이 기본 (0:1m, 1:5m, 2:15m)

final surgeTimeFrameProvider = StateProvider<String>((ref) {
  final index = ref.watch(surgeTimeFrameIndexProvider);
  final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  if (index >= 0 && index < timeFrames.length) {
    return timeFrames[index];
  }
  return '1m'; // fallback (기본값 1분)
});

/// 🚀 급등/급락 데이터 스트림 (실시간 즉시 업데이트)
final surgeDataProvider = StreamProvider.autoDispose<List<Surge>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  try {
    // 현재 시간대와 markets를 읽어서 스트림 구독
    final timeFrame = ref.watch(surgeTimeFrameProvider);
    final markets = await ref.watch(marketsProvider.future);
    final usecase = ref.read(surgeUsecaseProvider); // 🚀 UseCase 사용

    if (AppConfig.enableTradeLog) {
      log.i('Surge stream started: $timeFrame, ${markets.length} markets');
    }

    // 🚀 실시간 급등/급락 데이터 스트림 방출 (UseCase를 통해)
    yield* usecase.getSurgeRanking(timeFrame, markets).map((result) {
      return result.when(
        ok: (surges) => surges,
        err: (error) {
          log.e('Surge UseCase error: ${error.message}');
          return <Surge>[]; // 에러 시 빈 리스트
        },
      );
    });
    
  } catch (e, stackTrace) {
    log.e('Surge stream error: $e', e, stackTrace);
    
    // 에러 시 빈 리스트 방출
    yield <Surge>[];
  }
});

/// 🚀 급등/급락 시간대 컨트롤러
final surgeTimeFrameController = Provider((ref) => SurgeTimeFrameController(ref));

class SurgeTimeFrameController {
  final Ref ref;
  SurgeTimeFrameController(this.ref);

  void updateTimeFrame(String timeFrame, int index) {
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    if (index < 0 || index >= timeFrames.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid timeFrame index: $index');
      return;
    }
    
    ref.read(surgeTimeFrameProvider.notifier).state = timeFrame;
    ref.read(surgeTimeFrameIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      log.i('Surge TimeFrame updated: $timeFrame (index: $index)');
    }
  }

  /// 수동 리셋 메서드들 (UseCase를 통해)
  void resetCurrentTimeFrame() {
    final usecase = ref.read(surgeUsecaseProvider);
    final timeFrame = ref.read(surgeTimeFrameProvider);
    
    final result = usecase.resetTimeFrame(timeFrame);
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Surge reset: $timeFrame');
        }
      },
      err: (error) {
        log.e('Surge reset failed: ${error.message}');
      },
    );
  }

  void resetAllTimeFrames() {
    final usecase = ref.read(surgeUsecaseProvider);
    
    final result = usecase.resetAllTimeFrames();
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Surge reset: all timeframes');
        }
      },
      err: (error) {
        log.e('Surge reset all failed: ${error.message}');
      },
    );
  }

  /// 다음 리셋 시간 조회 (UseCase를 통해)
  DateTime? getNextResetTime() {
    final usecase = ref.read(surgeUsecaseProvider);
    final timeFrame = ref.read(surgeTimeFrameProvider);
    
    final result = usecase.getNextResetTime(timeFrame);
    return result.when(
      ok: (resetTime) => resetTime,
      err: (error) {
        log.e('Get reset time failed: ${error.message}');
        return null;
      },
    );
  }

  /// Getters
  String get currentTimeFrame => ref.read(surgeTimeFrameProvider);
  int get currentIndex => ref.read(surgeTimeFrameIndexProvider);
  List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  
  /// 시간대 한국어 이름
  String getTimeFrameName(String timeFrame) {
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    return AppConfig.timeFrameNames[minutes] ?? timeFrame;
  }
}\n\n// ====== lib/core/di/market_mood_provider.dart ======\n
// lib/core/di/market_mood_provider.dart
// 🚀 Performance Optimized Provider - 메모이제이션, 배치처리, 선택적 무효화, 주기적 갱신 적용

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:rxdart/rxdart.dart'; // 🚀 debounceTime, distinctUntilChanged
import 'dart:async';

import '../network/api_client_coingecko.dart';
import '../utils/logger.dart';
import 'trade_provider.dart' show hiveServiceProvider;
import '../../data/datasources/market_mood_remote_ds.dart';
import '../../data/datasources/market_mood_local_ds.dart';
import '../../data/repositories/market_mood_repository_impl.dart';
import '../../domain/entities/market_mood.dart';
import '../../domain/usecases/market_mood_usecase.dart';

/// 🌐 CoinGecko API 클라이언트 Provider
final coinGeckoApiClientProvider = Provider<CoinGeckoApiClient>((ref) {
  return CoinGeckoApiClient();
});

/// 🔥 Remote DataSource Provider
final marketMoodRemoteDSProvider = Provider<MarketMoodRemoteDataSource>((ref) {
  final client = ref.read(coinGeckoApiClientProvider);
  return MarketMoodRemoteDataSource(client);
});

/// 🔥 Local DataSource Provider
final marketMoodLocalDSProvider = Provider<MarketMoodLocalDataSource>((ref) {
  final hive = ref.watch(hiveServiceProvider);
  return MarketMoodLocalDataSource(hive);
});

/// 🔥 Repository Provider
final marketMoodRepositoryProvider = Provider<MarketMoodRepositoryImpl>((ref) {
  final remoteDS = ref.read(marketMoodRemoteDSProvider);
  final localDS = ref.read(marketMoodLocalDSProvider);
  return MarketMoodRepositoryImpl(remoteDS, localDS);
});

/// 🔥 UseCase Provider
final marketMoodUsecaseProvider = Provider<MarketMoodUsecase>((ref) {
  final repository = ref.read(marketMoodRepositoryProvider);
  return MarketMoodUsecase(repository);
});

/// 🚀 메모이제이션된 환율 Provider - 캐시 유지 (TTL 필요 시 autoDispose로 변경)
final exchangeRateProvider = FutureProvider.autoDispose<double>((ref) async {
  final usecase = ref.read(marketMoodUsecaseProvider);
  try {
    final rate = await usecase.getExchangeRate();
    log.d('환율 조회 성공: $rate (캐시됨)');
    return rate;
  } catch (e, st) {
    log.w('환율 조회 실패, 기본값 1400 사용: $e', e, st);
    return 1400.0;
  }
});

/// 🚀 최적화된 마켓 데이터 스트림 - distinct + debounceTime 적용
final marketMoodProvider = StreamProvider<MarketMoodData>((ref) {
  final repository = ref.read(marketMoodRepositoryProvider);

  ref.onDispose(repository.dispose);

  return repository
      .getMarketDataStream()
      .distinct((prev, next) => prev.totalVolumeUsd == next.totalVolumeUsd)
      .debounceTime(const Duration(milliseconds: 100));
});

/// 🚀 통합 계산 Provider - 주기적 갱신 및 포그라운드 복귀 시 자동 invalidate 적용
final marketMoodComputedDataProvider = FutureProvider.autoDispose<MarketMoodComputedData>((ref) async {
  // 1) autoDispose 비활성화 링크 (keepAlive)
  final link = ref.keepAlive();

  // 2) 15분마다 재계산
  final timer = Timer.periodic(const Duration(minutes: 15), (_) {
    ref.invalidateSelf();
  });

  // 3) 앱 복귀 시 재계산
  ref.onResume(() {
    ref.invalidateSelf();
  });

  // 4) 종료 시 정리
  ref.onDispose(() {
    timer.cancel();
    link.close();
  });

  // 기존 로직
  final moodAsync = ref.watch(marketMoodProvider);
  final exchangeAsync = ref.watch(exchangeRateProvider);
  final usecase = ref.read(marketMoodUsecaseProvider);

  return moodAsync.when(
    data: (marketData) async {
      final exchangeRate = exchangeAsync.asData?.value ?? 1400.0;
      try {
        final results = await Future.wait(
          [
            usecase.calculateCurrentMood(marketData.totalVolumeUsd),
            usecase.calculateVolumeComparison(marketData.totalVolumeUsd),
          ],
          eagerError: false,
        );
        final currentMood = results[0] as MarketMood;
        final volumeComparison = results[1] as ComparisonData;
        final moodSummary = usecase.generateMoodSummary(currentMood);

        return MarketMoodComputedData(
          marketData: marketData,
          currentMood: currentMood,
          volumeComparison: volumeComparison,
          moodSummary: moodSummary,
          exchangeRate: exchangeRate,
          computedAt: DateTime.now(),
        );
      } catch (e, st) {
        // [수정됨] 이름 있는 파라미터(named parameter) 대신 위치 기반 파라미터(positional parameter) 사용
        log.e('배치 계산 오류: $e', e, st);
        return MarketMoodComputedData.error();
      }
    },
    loading: () async => MarketMoodComputedData.loading(),
    error: (error, stack) async {
      // [수정됨] 이름 있는 파라미터(named parameter) 대신 위치 기반 파라미터(positional parameter) 사용
      log.e('마켓무드 계산 오류: $error', error, stack);
      return MarketMoodComputedData.error();
    },
  );
});

/// 🎯 개별 데이터 접근 Provider들 - 메모이제이션된 결과에서 추출
final currentMarketMoodProvider = Provider<MarketMood>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.currentMood,
    loading: () => MarketMood.sideways,
    error: (_, __) => MarketMood.sideways,
  );
});

final volumeComparisonProvider = Provider<ComparisonData>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.volumeComparison,
    loading: () => ComparisonData.loading(),
    error: (_, __) => ComparisonData.error(),
  );
});

final marketMoodSummaryProvider = Provider<String>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.moodSummary,
    loading: () => '로딩중...',
    error: (_, __) => '오류 발생',
  );
});

/// 🌐 최적화된 시스템 상태 Provider
final marketMoodSystemProvider = Provider<MarketMoodSystemState>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  final usecase = ref.read(marketMoodUsecaseProvider);

  return computedAsync.when(
    data: (computed) => usecase.createSystemState(
      marketData: computed.marketData,
      comparisonData: computed.volumeComparison,
      currentMood: computed.currentMood,
      exchangeRate: computed.exchangeRate,
      isLoading: false,
      hasError: false,
    ),
    loading: () => usecase.createSystemState(
      marketData: null,
      comparisonData: ComparisonData.loading(),
      currentMood: MarketMood.sideways,
      exchangeRate: 1400.0,
      isLoading: true,
      hasError: false,
    ),
    error: (_, __) => usecase.createSystemState(
      marketData: null,
      comparisonData: ComparisonData.error(),
      currentMood: MarketMood.sideways,
      exchangeRate: 1400.0,
      isLoading: false,
      hasError: true,
    ),
  );
});

/// 🎮 최적화된 마켓 무드 컨트롤러
final marketMoodControllerProvider = Provider((ref) => OptimizedMarketMoodController(ref));

class OptimizedMarketMoodController {
  final Ref ref;
  DateTime? _lastRefresh;
  static const _refreshCooldown = Duration(seconds: 30);

  OptimizedMarketMoodController(this.ref);

  /// 🚀 스마트 새로고침 - 쿨다운 적용
  void refresh() {
    final now = DateTime.now();
    if (_lastRefresh != null && now.difference(_lastRefresh!) < _refreshCooldown) {
      // [수정됨] + 연산자 대신 인접 문자열 연결 사용
      log.d('새로고침 쿨다운 중... '
          '${_refreshCooldown.inSeconds - now.difference(_lastRefresh!).inSeconds}초 후 가능');
      return;
    }

    _lastRefresh = now;
    ref.invalidate(marketMoodProvider);
    ref.invalidate(exchangeRateProvider);
    log.d('마켓무드 데이터 새로고침 완료');
  }

  /// 🚀 캐시된 현재 무드 조회
  MarketMood getCurrentMood() => ref.read(currentMarketMoodProvider);

  /// 🚀 캐시된 비교 데이터 조회
  ComparisonData getComparisonData() => ref.read(volumeComparisonProvider);

  /// 🚀 환율만 선택적 새로고침
  Future<void> refreshExchangeRate() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    await usecase.refreshExchangeRate();
    ref.invalidate(exchangeRateProvider);
    log.d('환율 새로고침 완료');
  }

  /// 🚀 시스템 헬스 체크 (캐시 활용)
  Future<Map<String, dynamic>> getSystemHealth() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    final state = ref.read(marketMoodSystemProvider);
    return {
      ...await usecase.getSystemHealth(),
      'cached_state': {
        'is_loading': state.isLoading,
        'has_error': state.hasError,
        'last_update': state.marketData?.updatedAt.toIso8601String(),
      }
    };
  }

  /// 🚀 성능 통계 로깅
  Future<void> logSystemStatus() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    final computedAsync = ref.read(marketMoodComputedDataProvider);
    await usecase.logSystemStatus();
    computedAsync.whenData((computed) {
      log.i('성능 통계 - 계산 시간: ${DateTime.now().difference(computed.computedAt).inMilliseconds}ms');
    });
  }

  /// 🚀 메모리 정리 (필요 시 호출)
  void clearCache() {
    ref.invalidate(marketMoodComputedDataProvider);
    ref.invalidate(exchangeRateProvider);
    ref.invalidate(marketMoodProvider);
    log.d('캐시 정리 완료');
  }
}

/// 🚀 통합 계산 결과 데이터 클래스
class MarketMoodComputedData {
  final MarketMoodData? marketData;
  final MarketMood currentMood;
  final ComparisonData volumeComparison;
  final String moodSummary;
  final double exchangeRate;
  final DateTime computedAt;

  const MarketMoodComputedData({
    this.marketData,
    required this.currentMood,
    required this.volumeComparison,
    required this.moodSummary,
    required this.exchangeRate,
    required this.computedAt,
  });

  factory MarketMoodComputedData.loading() => MarketMoodComputedData(
        currentMood: MarketMood.sideways,
        volumeComparison: ComparisonData.loading(),
        moodSummary: '로딩중...',
        exchangeRate: 1400.0,
        computedAt: DateTime.now(),
      );

  factory MarketMoodComputedData.error() => MarketMoodComputedData(
        currentMood: MarketMood.sideways,
        volumeComparison: ComparisonData.error(),
        moodSummary: '오류 발생',
        exchangeRate: 1400.0,
        computedAt: DateTime.now(),
      );

  /// 🚀 데이터 신선도 체크 (15분 이상 오래되면 갱신 필요)
  bool get isStale => DateTime.now().difference(computedAt) > const Duration(minutes: 15);

  /// 🚀 성능 메트릭
  Duration get age => DateTime.now().difference(computedAt);
}\n\n// ====== lib/core/di/settings_provider.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // SystemChrome용
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import '../../data/datasources/settings_local_ds.dart';
import '../../data/repositories/settings_repository_impl.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/repositories/settings_repository.dart';
import '../../domain/usecases/settings_usecase.dart';
import '../utils/logger.dart';

/// 1) SharedPreferences 인스턴스 (main.dart에서 override)
final sharedPreferencesProvider = Provider<SharedPreferences>((ref) {
  throw UnimplementedError(
    'main.dart에서 SharedPreferences.getInstance() 후 overrides로 주입하세요.'
  );
});

/// 2) Local DataSource
final settingsLocalDSProvider = Provider<SettingsLocalDataSource>((ref) {
  final prefs = ref.watch(sharedPreferencesProvider);
  return SettingsLocalDataSource(prefs);
});

/// 3) Repository
final settingsRepositoryProvider = Provider<SettingsRepository>((ref) {
  final ds = ref.watch(settingsLocalDSProvider);
  return SettingsRepositoryImpl(ds);
});

/// 4) UseCase
final settingsUsecaseProvider = Provider<SettingsUsecase>((ref) {
  final repo = ref.watch(settingsRepositoryProvider);
  return SettingsUsecase(repo);
});

/// 5) 통합 설정 Provider
final appSettingsProvider = StateNotifierProvider<AppSettingsNotifier, AppSettings>((ref) {
  final usecase = ref.watch(settingsUsecaseProvider);
  return AppSettingsNotifier(usecase);
});

/// 통합 설정 관리 클래스
class AppSettingsNotifier extends StateNotifier<AppSettings> {
  final SettingsUsecase _usecase;

  AppSettingsNotifier(this._usecase) : super(const AppSettings()) {
    _loadSettings();
  }

  /// 초기 설정 로드
  Future<void> _loadSettings() async {
    try {
      final settings = await _usecase.getSettings();
      state = settings;
      _applyKeepScreen(settings.keepScreenOn);
      _applyOrientationLock(settings.isPortraitLocked);
      log.i('⚙️ 설정 로드 완료: ${settings.toString()}');
    } catch (e, st) {
      log.e('설정 로드 실패', e, st);
    }
  }

  /// 테마 모드 변경
  Future<void> setThemeMode(ThemeMode mode) async {
    try {
      await _usecase.updateThemeMode(mode);
      state = state.copyWith(themeMode: mode);
      log.i('🎨 테마 모드 변경: ${mode.name}');
    } catch (e, st) {
      log.e('테마 모드 변경 실패', e, st);
    }
  }

  /// 화면 항상 켜기 설정
  Future<void> setKeepScreenOn(bool keep) async {
    try {
      await _usecase.updateKeepScreenOn(keep);
      state = state.copyWith(keepScreenOn: keep);
      _applyKeepScreen(keep);
      log.i('📱 화면 항상 켜기: $keep');
    } catch (e, st) {
      log.e('화면 켜기 설정 실패', e, st);
    }
  }

  /// 슬라이더 위치 변경
  Future<void> setSliderPosition(SliderPosition position) async {
    try {
      await _usecase.updateSliderPosition(position);
      state = state.copyWith(sliderPosition: position);
      log.i('🎚️ 슬라이더 위치: ${position.name}');
    } catch (e, st) {
      log.e('슬라이더 위치 변경 실패', e, st);
    }
  }

  /// 코인명 표시 방식 변경
  Future<void> setDisplayMode(DisplayMode mode) async {
    try {
      await _usecase.updateDisplayMode(mode);
      state = state.copyWith(displayMode: mode);
      log.i('💰 코인명 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('코인명 표시 방식 변경 실패', e, st);
    }
  }

  /// 금액 표시 방식 변경
  Future<void> setAmountDisplayMode(AmountDisplayMode mode) async {
    try {
      await _usecase.updateAmountDisplayMode(mode);
      state = state.copyWith(amountDisplayMode: mode);
      log.i('💵 금액 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('금액 표시 방식 변경 실패', e, st);
    }
  }

  /// 반짝임 효과 설정
  Future<void> setBlinkEnabled(bool enabled) async {
    try {
      await _usecase.updateBlinkEnabled(enabled);
      state = state.copyWith(blinkEnabled: enabled);
      log.i('✨ 반짝임 효과: $enabled');
    } catch (e, st) {
      log.e('반짝임 효과 변경 실패', e, st);
    }
  }

  /// 폰트 패밀리 변경
  Future<void> setFontFamily(FontFamily font) async {
    try {
      await _usecase.updateFontFamily(font);
      state = state.copyWith(fontFamily: font);
      log.i('🔤 폰트 설정: ${font.fontName}');
    } catch (e, st) {
      log.e('폰트 설정 실패', e, st);
    }
  }

  /// 햅틱 피드백 설정
  Future<void> setHapticEnabled(bool enabled) async {
    try {
      await _usecase.updateHapticEnabled(enabled);
      state = state.copyWith(isHapticEnabled: enabled);
      log.i('📳 햅틱 피드백: $enabled');
    } catch (e, st) {
      log.e('햅틱 피드백 설정 실패', e, st);
    }
  }

  /// 화면 회전 잠금 설정
  Future<void> setPortraitLocked(bool locked) async {
    try {
      await _usecase.updatePortraitLocked(locked);
      state = state.copyWith(isPortraitLocked: locked);
      _applyOrientationLock(locked);
      log.i('🔒 화면 회전 잠금: $locked');
    } catch (e, st) {
      log.e('화면 회전 잠금 설정 실패', e, st);
    }
  }

  /// 캐시 비우기
  Future<void> clearCache() async {
    try {
      await _usecase.clearCache();
      log.i('🗂️ 캐시 비우기 완료');
      await refresh();
    } catch (e, st) {
      log.e('캐시 비우기 실패', e, st);
    }
  }

  /// 모든 설정 초기화
  Future<void> resetAllSettings() async {
    try {
      await _usecase.resetSettings();
      state = const AppSettings();
      _applyKeepScreen(false);
      _applyOrientationLock(false);
      log.i('🔄 모든 설정 초기화 완료');
    } catch (e, st) {
      log.e('설정 초기화 실패', e, st);
    }
  }

  /// 화면 켜기 실제 적용
  void _applyKeepScreen(bool keep) {
    if (keep) {
      WakelockPlus.enable();
    } else {
      WakelockPlus.disable();
    }
  }

  /// 화면 회전 잠금 실제 적용
  void _applyOrientationLock(bool locked) {
    if (locked) {
      // 세로 모드만 허용
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
    } else {
      // 모든 방향 허용
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeRight,
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
    }
  }

  /// 설정 새로고침
  Future<void> refresh() async {
    await _loadSettings();
  }
}\n\n// ====== lib/core/di/momentary_provider.dart ======\n
\n\n// ====== lib/core/config/app_config.dart ======\n
// lib/core/config/app_config.dart

import 'dart:collection';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:logger/logger.dart';
import '../utils/logger.dart';

/// Application-wide configuration and constants,
/// optimized per Upbit REST & WebSocket specifications.
class AppConfig {
  AppConfig._();

  /// Call once at startup to initialize dynamic config (env variables)
  static Future<void> init({String? envPath}) async {
    // Load .env (optional custom path) + validate
    try {
      if (envPath != null && envPath.isNotEmpty) {
        await dotenv.load(fileName: envPath);
      } else {
        await dotenv.load();
      }
      log.i('[AppConfig] .env loaded');
      _loadEnv();
    } catch (e, st) {
      log.e('[AppConfig] ⚠️ Failed to load required env vars', e, st);
      throw Exception('[AppConfig] ⚠️ Failed to load required env vars: $e');
    }

    log.i('[AppConfig] initialized (debug=$isDebugMode)');
  }

  static void _loadEnv() {
    const requiredKeys = ['UPBIT_API_KEY', 'UPBIT_API_SECRET'];
    for (final key in requiredKeys) {
      final value = dotenv.env[key];
      if (value == null || value.isEmpty) {
        throw Exception('[AppConfig] Missing required env var: $key');
      }
    }

    _upbitRestBase = dotenv.env['UPBIT_REST_URL']?.isNotEmpty == true
        ? dotenv.env['UPBIT_REST_URL']!
        : _upbitRestBase;
    _upbitWsUrl = dotenv.env['UPBIT_WS_URL']?.isNotEmpty == true
        ? dotenv.env['UPBIT_WS_URL']!
        : _upbitWsUrl;

    _apiKey = dotenv.env['UPBIT_API_KEY']!;
    _apiSecret = dotenv.env['UPBIT_API_SECRET']!;
  }

  // ──────────────── 🆕 통일된 Bool 해석 유틸리티 ────────────────
  /// 환경변수에서 boolean 값을 안전하고 일관되게 파싱
  /// 지원하는 true 값: 'true', '1', 'yes', 'on'
  /// 지원하는 false 값: 'false', '0', 'no', 'off', null, 빈 문자열
  static bool _getBool(String key, {bool fallback = false}) {
    final value = dotenv.env[key]?.toLowerCase().trim();
    if (value == null || value.isEmpty) return fallback;
    
    // true 값들
    if (value == 'true' || value == '1' || value == 'yes' || value == 'on') {
      return true;
    }
    
    // false 값들
    if (value == 'false' || value == '0' || value == 'no' || value == 'off') {
      return false;
    }
    
    // 알 수 없는 값이면 fallback 사용
    return fallback;
  }

  // ─────────────────── API Credentials ───────────────────
  static String _apiKey = '';
  static String _apiSecret = '';
  static String get apiKey => _apiKey;
  static String get apiSecret => _apiSecret;

  // ──────────────── Environment Flags ────────────────
  /// `true` when not in Dart VM product mode.
  static const bool isDebugMode = !bool.fromEnvironment('dart.vm.product');

  // ──────────────── Logging Configuration ────────────────
  /// 로그 레벨 설정 (개발 중 조절 가능)
  static Level get logLevel {
    if (!isDebugMode) return Level.warning;
    final envLevel = dotenv.env['LOG_LEVEL']?.toLowerCase();
    switch (envLevel) {
      case 'verbose':
        return Level.verbose;
      case 'debug':
        return Level.debug;
      case 'info':
        return Level.info;
      case 'warning':
        return Level.warning;
      case 'error':
        return Level.error;
      default:
        return Level.debug;
    }
  }

  /// 🔧 특정 모듈 로그 on/off (통일된 방식 적용)
  static bool get enableSignalBusLog =>
      _getBool('ENABLE_SIGNAL_BUS_LOG', fallback: true);
  static bool get enableWebSocketLog =>
      _getBool('ENABLE_WEBSOCKET_LOG', fallback: true);
  static bool get enableTradeLog =>
      _getBool('ENABLE_TRADE_LOG', fallback: true);
  static bool get enableAdaptiveBackoffLog =>
      _getBool('ENABLE_ADAPTIVE_BACKOFF_LOG', fallback: true);

  // ──────────────── REST Configuration (업비트 2025 스펙) ────────────────
  static String _upbitRestBase = 'https://api.upbit.com/v1';
  static String get upbitRestBase => _upbitRestBase;
  
  /// 🆕 업비트 백서 2025 기준 레이트리밋 (그룹별)
  /// 공개 API: 초당 30회 / 사적 API: 초당 8회
  static const Map<String, int> rateLimitByGroup = {
    'market': 30,      // 공개 API: /market/all, /ticker 등
    'candles': 30,     // 공개 API: /candles 등  
    'trades': 30,      // 공개 API: /trades 등
    'orderbook': 30,   // 공개 API: /orderbook 등
    'orders': 8,       // 사적 API: 주문 관련
    'accounts': 8,     // 사적 API: 계정 관련
    'withdraws': 8,    // 사적 API: 출금 관련
    'deposits': 8,     // 사적 API: 입금 관련
    'default': 8,      // 기본값: 사적 API 기준
  };
  
  /// 🆕 그룹별 레이트리밋 조회
  static int getRateLimitForGroup(String group) {
    return rateLimitByGroup[group] ?? rateLimitByGroup['default']!;
  }
  
  /// 🆕 경로 기반 그룹 자동 판별
  static String getGroupFromPath(String path) {
    final normalizedPath = path.toLowerCase();
    
    // 공개 API 그룹들
    if (normalizedPath.contains('/market/')) return 'market';
    if (normalizedPath.contains('/ticker')) return 'market';
    if (normalizedPath.contains('/candles/')) return 'candles';
    if (normalizedPath.contains('/trades')) return 'trades';  
    if (normalizedPath.contains('/orderbook')) return 'orderbook';
    
    // 사적 API 그룹들
    if (normalizedPath.contains('/orders')) return 'orders';
    if (normalizedPath.contains('/accounts')) return 'accounts';
    if (normalizedPath.contains('/withdraws')) return 'withdraws';
    if (normalizedPath.contains('/deposits')) return 'deposits';
    
    // 기본값 (사적 API)
    return 'default';
  }
  
  /// 레거시 호환용 (기존 코드 호환성)
  @Deprecated('Use rateLimitByGroup instead')
  static const int restRateLimitCount = 8; // 사적 API 기준으로 보수적 설정
  static const Duration restRateLimitPeriod = Duration(seconds: 1);

  // ──────────────── WebSocket Configuration ────────────────
  static String _upbitWsUrl = 'wss://api.upbit.com/websocket/v1';
  static String get upbitWsUrl => _upbitWsUrl;
  static const int wsMaxSubscriptionCount = 200;

  // Upbit 권장 타이밍으로 변경 (30s Ping / 60s Pong):
  static const Duration wsPingInterval = Duration(seconds: 30);
  static const Duration wsPongTimeout = Duration(seconds: 60);

  static const int wsMaxRetryCount = 5;
  static const Duration wsInitialBackoff = Duration(seconds: 1);
  static const Duration wsMaxBackoff = Duration(seconds: 30);

  // ──────────────── Aggregation ────────────────
  static const int mergeWindowMs = 1000;
  static const Duration globalResetInterval = Duration(seconds: 30);

  // ──────────────── Dev/Test Flags ────────────────
  static bool useTestDataInDev = false;

  // ──────────────── Trade Filters ────────────────
  static final List<double> _filters = [
    2e6, 5e6, 1e7, 2e7, 5e7,
    1e8, 2e8, 3e8, 4e8, 5e8,
    1e9,
  ];
  static UnmodifiableListView<double> get tradeFilters =>
      UnmodifiableListView(_filters);

  /// Human-readable labels always in sync with `_filters`
  static Map<double, String> get filterNames => Map.unmodifiable({
        for (final f in _filters) f: _formatFilterLabel(f),
      });

  /// Update the trade filters at runtime (ensures positive & sorted)
  static void updateFilters(List<double> newFilters) {
    _filters
      ..clear()
      ..addAll(newFilters.where((f) => f > 0))
      ..sort();
    log.i('[AppConfig] filters updated → $_filters');
  }

  static String _formatFilterLabel(double f) {
    if (f >= 1e8 && f % 1e8 == 0) return '${(f / 1e8).toInt()}억';
    if (f >= 1e7 && f % 1e7 == 0) return '${(f / 1e7).toInt()}천만';
    if (f >= 1e6 && f % 1e6 == 0) return '${(f / 1e6).toInt()}백만';
    return f.toStringAsFixed(0);
  }

  // ──────────────── Candle Timeframes ────────────────
  static const List<int> timeFrames = [
    1, 5, 15, 30, 60, 120, 240, 480, 720, 1440
  ];
  static final Map<int, String> timeFrameNames = Map.unmodifiable({
    1: '1분',
    5: '5분',
    15: '15분',
    30: '30분',
    60: '1시간',
    120: '2시간',
    240: '4시간',
    480: '8시간',
    720: '12시간',
    1440: '1일',
  });

  // ──────────────── Surge Detection ────────────────
  static const double surgeThresholdPercent = 1.1;
  static const Duration surgeWindowDuration = Duration(minutes: 1);

  // ──────────────── Signal Detection Configuration ────────────────
  
  /// Signal 패턴 목록 (슬라이더 순서와 동일)
  static const List<String> signalPatterns = [
    'surge', 'flashFire', 'stackUp', 'stealthIn', 'blackHole', 'reboundShot'
  ];

  /// Signal 패턴 표시명
  static const Map<String, String> signalPatternNames = {
    'surge': '급등',
    'flashFire': '불티🔥',
    'stackUp': '스택업💰',
    'stealthIn': '침투자👣',
    'blackHole': '블랙홀🕳️',
    'reboundShot': '쇼트터치⚡',
  };

  /// Signal 패턴 설명
  static const Map<String, String> signalPatternDescriptions = {
    'surge': '1분 전 대비 1.1% 이상 상승',
    'flashFire': '3분 거래대금 급증 감지',
    'stackUp': '연속 매집 패턴 감지',
    'stealthIn': '은밀한 유입 감지',
    'blackHole': '이상 체결 패턴 감지',
    'reboundShot': '반등 타이밍 감지',
  };

  /// 패턴별 기본 임계값
  static const Map<String, double> signalThresholds = {
    'surge': 1.1,           // 1.1% 상승 (기존 surgeThresholdPercent와 동일)
    'flashFire': 2.0,       // 2배 급증
    'stackUp': 3.0,         // 3연속
    'stealthIn': 5000000.0, // 500만원
    'blackHole': 0.1,       // 0.1% 변동
    'reboundShot': 1.5,     // 1.5% 급락 후 반등
  };

  /// 패턴별 시간 윈도우 (분)
  static const Map<String, int> signalTimeWindows = {
    'surge': 1,       // 1분
    'flashFire': 3,   // 3분
    'stackUp': 3,     // 3분 (1분씩 3번)
    'stealthIn': 5,   // 5분
    'blackHole': 3,   // 3분
    'reboundShot': 2, // 2분 (급락 1분 + 반등 1분)
  };

  /// Signal 성능 최적화 상수
  static const int maxSignalsPerPattern = 100;
  static const int signalHistorySize = 200;
  static const int signalCacheSize = 1000;
  static const Duration signalHistoryRetention = Duration(minutes: 10);
  static const Duration signalBatchInterval = Duration(milliseconds: 100); // Trade와 동일

  /// Signal 분석용 최소값들
  static const int minTradeCountForAnalysis = 10;
  static const int avgIntervalThreshold = 30; // 초
  static const double blackHoleMinAmount = 50000000.0; // 5천만원

  /// Signal 패턴 인덱스로 패턴명 조회
  static String getSignalPatternByIndex(int index) {
    if (index < 0 || index >= signalPatterns.length) {
      return signalPatterns.first; // 기본값
    }
    return signalPatterns[index];
  }

  /// Signal 패턴명으로 인덱스 조회
  static int getSignalPatternIndex(String pattern) {
    final index = signalPatterns.indexOf(pattern);
    return index >= 0 ? index : 0; // 없으면 첫 번째 패턴
  }

  /// Signal 패턴별 임계값 조회
  static double getSignalThreshold(String pattern) {
    return signalThresholds[pattern] ?? signalThresholds['surge']!;
  }

  /// Signal 패턴별 시간 윈도우 조회
  static int getSignalTimeWindow(String pattern) {
    return signalTimeWindows[pattern] ?? signalTimeWindows['surge']!;
  }

  /// Signal 패턴 표시명 조회
  static String getSignalPatternName(String pattern) {
    return signalPatternNames[pattern] ?? pattern;
  }

  /// Signal 패턴 설명 조회
  static String getSignalPatternDescription(String pattern) {
    return signalPatternDescriptions[pattern] ?? '';
  }
}\n\n// ====== lib/core/config/trade_config.dart ======\n
\n\n// ====== lib/core/bridge/signal_bus.dart ======\n
import 'dart:async';

import '../utils/logger.dart';           // log.d, log.i, log.w, log.e
import '../event/app_event.dart';        // Json typedef

/// Types of signals carried by the bus.
enum SignalEventType { trade, orderBook, notification }

/// Supported exchange platforms.
enum ExchangePlatform { upbit, binance, bybit, bithumb }

/// Global singleton event bus.
/// Dispatches all AppEvent payloads by type & platform.
///
/// ⚠️ Remember to call `SignalBus().dispose()` on app shutdown or via
/// Riverpod's `ref.onDispose` to clean up streams.
class SignalBus {
  SignalBus._();
  static final SignalBus _instance = SignalBus._();
  factory SignalBus() => _instance;

  final StreamController<Json> _globalController = StreamController<Json>.broadcast();
  final Map<SignalEventType, StreamController<Json>> _typeControllers = {};
  final Map<String, StreamController<Json>> _platformControllers = {};
  final StreamController<String> _errorController = StreamController<String>.broadcast();

  /// All events as raw JSON maps.
  Stream<Json> get events => _globalController.stream;

  /// Events of a specific type.
  Stream<Json> eventsOfType(SignalEventType type) =>
      _typeControllers.putIfAbsent(type, () {
        final ctrl = StreamController<Json>.broadcast();
        log.d('SignalBus: Created type controller for $type');
        return ctrl;
      }).stream;

  /// 🆕 타입 안전한 이벤트 스트림 (제네릭)
  Stream<T> eventsOf<T>(SignalEventType type, T Function(Json) converter) =>
      eventsOfType(type).map(converter);

  /// Events of a specific type and platform, cached for efficiency.
  Stream<Json> eventsOfPlatform(SignalEventType type, ExchangePlatform platform) {
    final key = '${type.name}_${platform.name}';
    return _platformControllers.putIfAbsent(key, () {
      final ctrl = StreamController<Json>.broadcast();
      eventsOfType(type)
          .where((m) => (m['platform'] as String? ?? '') == platform.name)
          .listen(
            ctrl.add,
            onError: ctrl.addError,
            onDone: () {
              ctrl.close();
              _platformControllers.remove(key);
              log.d('SignalBus: Closed platform controller for $key');
            },
          );
      log.d('SignalBus: Created platform controller for $key');
      return ctrl;
    }).stream;
  }

  /// 🆕 타입 안전한 플랫폼별 이벤트 스트림
  Stream<T> eventsOfPlatformTyped<T>(
    SignalEventType type,
    ExchangePlatform platform,
    T Function(Json) converter,
  ) => eventsOfPlatform(type, platform).map(converter);

  /// Errors from bus internals.
  Stream<String> get errors => _errorController.stream;

  // ───────────────────────────────────────────────────────────────────────
  // Emitters for raw payloads
  // ───────────────────────────────────────────────────────────────────────

  void fireTrade(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.trade, data, platform);

  void fireOrderBook(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.orderBook, data, platform);

  void fireNotification(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.notification, data, platform);

  // ───────────────────────────────────────────────────────────────────────
  // Emitters for AppEvent
  // ───────────────────────────────────────────────────────────────────────

  void fireTradeEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.trade, event.toJson(), platform);

  void fireOrderBookEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.orderBook, event.toJson(), platform);

  void fireNotificationEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.notification, event.toJson(), platform);

  // ───────────────────────────────────────────────────────────────────────
  // Internal dispatch logic
  // ───────────────────────────────────────────────────────────────────────

  void _fire(SignalEventType type, Json data, ExchangePlatform platform) {
    try {
      final enriched = <String, dynamic>{...data, 'platform': platform.name};

      // Broadcast to global subscribers
      if (!_globalController.isClosed) {
        _globalController.add(enriched);
      } else {
        log.w('SignalBus: Global controller closed, skipping event $type');
      }

      // Type-specific subscribers
      final typeCtrl = _typeControllers[type];
      if (typeCtrl != null && !typeCtrl.isClosed) {
        typeCtrl.add(enriched);
      } else if (typeCtrl != null) {
        log.w('SignalBus: Type controller for $type closed, removing');
        _typeControllers.remove(type);
      }

      // Debug preview (limited to 100 chars)
      final msg = enriched.toString();
      if (msg.length <= 100) {
        log.d('SignalBus: $type @${platform.name} → $msg');
      } else {
        log.d('SignalBus: $type @${platform.name} → ${msg.substring(0, 100)}…');
      }
    } catch (e, st) {
      final errMsg = 'SignalBus error: $e';
      log.e(errMsg, e, st);
      if (!_errorController.isClosed) {
        _errorController.add(errMsg);
      } else {
        log.w('SignalBus: Error controller closed, error not dispatched: $errMsg');
      }
    }
  }

  /// Log current memory status for debugging.
  void logMemoryStatus() {
    log.d('SignalBus Memory Status:');
    log.d('  - Type controllers: ${_typeControllers.length}');
    log.d('  - Platform controllers: ${_platformControllers.length}');
    log.d('  - Global controller active: ${_globalController.hasListener}');
    log.d('  - Error controller active: ${_errorController.hasListener}');
  }

  /// Close all controllers to free resources and log cleanup.
  void dispose() {
    // Close type-specific controllers
    for (final entry in _typeControllers.entries) {
      final ctrl = entry.value;
      if (!ctrl.isClosed) {
        ctrl.close();
        log.d('SignalBus: Closed type controller for ${entry.key}');
      }
    }
    _typeControllers.clear();

    // Close platform-specific controllers
    for (final entry in _platformControllers.entries) {
      final ctrl = entry.value;
      if (!ctrl.isClosed) {
        ctrl.close();
        log.d('SignalBus: Closed platform controller for ${entry.key}');
      }
    }
    _platformControllers.clear();

    // Close global and error controllers
    if (!_globalController.isClosed) {
      _globalController.close();
      log.d('SignalBus: Closed global controller');
    }
    if (!_errorController.isClosed) {
      _errorController.close();
      log.d('SignalBus: Closed error controller');
    }

    log.i('SignalBus: fully disposed');
  }
}\n\n// ====== lib/core/network/websocket/ticker_ws_client.dart ======\n
// lib/core/network/websocket/ticker_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “현재가” 스트림: List<Map<String, dynamic>>
class TickerWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  TickerWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket': 'ticker-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'ticker',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/candle_ws_client.dart ======\n
// lib/core/network/websocket/candle_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “캔들” 스트림: List<Map<String, dynamic>>
/// [timeFrame]: e.g. "1m", "5m", "15m", ...
class CandleWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  CandleWsClient({
    required String timeFrame,
    void Function(WsStatus)? onStatusChange,
  }) : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket':
                    'candle-$timeFrame-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'candles_$timeFrame',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/trade_ws_client.dart ======\n
// lib/core/network/websocket/trade_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “체결” 스트림: List<Map<String, dynamic>>
class TradeWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  TradeWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket': 'trade-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'trade',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/base_ws_client.dart ======\n
// lib/core/network/websocket/base_ws_client.dart

import 'dart:async';
import 'dart:convert';

import 'package:web_socket_channel/web_socket_channel.dart';

import '../../config/app_config.dart';
import '../../error/app_exception.dart';
import '../adaptive_backoff.dart';               // AdaptiveBackoff 연동
import '../ws_rate_limiter_interceptor.dart';
import '../../utils/logger.dart';                // ← logger import

typedef DecodeFn<T> = T Function(dynamic json);
typedef EncodeFn = String Function(List<String> symbols);

/// WebSocket connection status notifications.
enum WsStatus {
  connecting,
  connected,
  failed,
  disconnected,
  error,
  reconnecting,
  pongTimeout,
  maxRetryExceeded,
}

/// Common WebSocket client: connect, subscribe, reconnect, emit
class BaseWsClient<T> {
  /// Helper to decode a JSON list (or single object) into a List<Map<String, dynamic>>.
  static List<Map<String, dynamic>> decodeJsonList(dynamic raw) {
    final jsonObj = raw is String ? jsonDecode(raw) : raw;
    final list = jsonObj is List ? jsonObj : [jsonObj];
    return list
        .cast<Map<String, dynamic>>()
        .map((e) => Map<String, dynamic>.from(e))
        .toList();
  }

  final String url;
  final DecodeFn<T> decode;
  final EncodeFn encodeSubscribe;
  final void Function(WsStatus)? onStatusChange;
  final WsRateLimiter _rateLimiter;
  final AdaptiveBackoffCalculator _backoffCalculator =
      AdaptiveBackoffCalculator();
  final Set<StreamSubscription> _activeSubscriptions = {};
  Timer? _memoryCleanupTimer;

  WebSocketChannel? _channel;
  final _controller = StreamController<T>.broadcast();
  List<String> _symbols = [];
  Timer? _pingTimer;
  Timer? _pongTimer;
  bool _disposed = false;
  bool _reconnecting = false;
  int _retryCount = 0;

  BaseWsClient({
    required this.url,
    required this.decode,
    required this.encodeSubscribe,
    this.onStatusChange,
    WsRateLimiter? rateLimiter,
  }) : _rateLimiter = rateLimiter ?? WsRateLimiter() {
    _startMemoryCleanup();
  }

  /// Start periodic cleanup of inactive subscriptions.
  void _startMemoryCleanup() {
    _memoryCleanupTimer =
        Timer.periodic(const Duration(seconds: 30), (_) {
      _cleanupInactiveSubscriptions();
    });
  }

  /// Clean up paused subscriptions to prevent memory leaks.
  void _cleanupInactiveSubscriptions() {
    final toRemove =
        _activeSubscriptions.where((sub) => sub.isPaused).toList();
    for (final sub in toRemove) {
      sub.cancel();
      _activeSubscriptions.remove(sub);
    }
    if (toRemove.isNotEmpty) {
      log.d('WSClient: Cleaned up ${toRemove.length} inactive subscriptions');
    }
  }

  /// 🔥 재연결 시 기존 구독들 안전하게 정리 (메모리 누수 방지)
  void _cleanupActiveSubscriptions() {
    if (_activeSubscriptions.isNotEmpty) {
      log.d('🧹 기존 구독 ${_activeSubscriptions.length}개 정리 중...');
      
      for (final subscription in _activeSubscriptions) {
        try {
          subscription.cancel();
        } catch (e) {
          log.w('⚠️ 구독 취소 중 에러: $e');
        }
      }
      
      _activeSubscriptions.clear();
      log.d('✅ 구독 정리 완료');
    }
  }

  /// Exposed stream of decoded messages.
  Stream<T> get stream => _controller.stream;

  /// Connect or reconnect with a new set of symbols.
  Future<void> connect(List<String> symbols) async {
    _notify(WsStatus.connecting);
    if (_disposed) return;
    _symbols = List.from(symbols);
    
    // 🔥 재연결 시 기존 구독들 정리 (메모리 누수 방지)
    _cleanupActiveSubscriptions();
    
    await _channel?.sink.close();

    try {
      if (_symbols.length > AppConfig.wsMaxSubscriptionCount) {
        throw const WebSocketException('Subscribe limit exceeded');
      }
      _channel = WebSocketChannel.connect(Uri.parse(url));
      _setupPing();
      _send(encodeSubscribe(_symbols));

      final subscription = _channel!.stream.listen(
        _handleData,
        onDone: _handleDone,
        onError: _handleError,
        cancelOnError: true,
      );
      _activeSubscriptions.add(subscription);

      _retryCount = 0;
      _backoffCalculator.recordSuccess();
      _notify(WsStatus.connected);
      log.i('WS connected to $url (subscriptions: ${_symbols.length})');
    } catch (e, st) {
      log.w('WS connect failed: $e', e, st);
      _backoffCalculator.recordFailure();
      _notify(WsStatus.failed);
      _scheduleReconnect();
    }
  }

  void _handleData(dynamic raw) {
    _pongTimer?.cancel();
    try {
      final text = raw is List<int> ? utf8.decode(raw) : raw.toString();
      final jsonObj = jsonDecode(text);
      final data = decode(jsonObj);
      _controller.add(data);
    } catch (e, st) {
      log.e('WS processing error', e, st);
    }
  }

  void _handleDone() {
    log.i('WS closed by server');
    _notify(WsStatus.disconnected);
    _scheduleReconnect();
  }

  void _handleError(dynamic e) {
    log.e('WS error', e);
    _backoffCalculator.recordFailure();
    _notify(WsStatus.error);
    _scheduleReconnect();
  }

  void _send(String msg) => _rateLimiter.enqueue(() {
        try {
          _channel?.sink.add(msg);
          log.d('WS ▶ $msg');
        } catch (e, st) {
          log.e('WS send error', e, st);
        }
      });

  void _setupPing() {
    _pingTimer?.cancel();
    _pongTimer?.cancel();
    _pingTimer =
        Timer.periodic(AppConfig.wsPingInterval, (_) {
      _send(jsonEncode({'type': 'ping'}));
      _pongTimer = Timer(AppConfig.wsPongTimeout, () {
        log.w('Pong timeout, reconnecting');
        _notify(WsStatus.pongTimeout);
        _scheduleReconnect();
      });
    });
    log.d('WS ping/pong timers set');
  }

  /// Schedule reconnection with adaptive backoff.
  void _scheduleReconnect() {
    if (_disposed || _reconnecting) return;
    _reconnecting = true;
    _pingTimer?.cancel();
    _pongTimer?.cancel();

    _backoffCalculator
        .calculateBackoff(
          _retryCount,
          AppConfig.wsInitialBackoff,
          AppConfig.wsMaxBackoff,
        )
        .then((delay) {
      if (_disposed) return;
      Future.delayed(delay, () {
        if (_disposed) return;
        if (_retryCount < AppConfig.wsMaxRetryCount) {
          _retryCount++;
          log.i(
            'Reconnect attempt #$_retryCount after ${delay.inMilliseconds}ms',
          );
          _notify(WsStatus.reconnecting);
          connect(_symbols).whenComplete(() => _reconnecting = false);
        } else {
          log.w('Max WS retries exceeded');
          _notify(WsStatus.maxRetryExceeded);
          _retryCount = 0;
          _reconnecting = false;
        }
      });
    });
  }

  void _notify(WsStatus status) => onStatusChange?.call(status);

  /// Dispose resources: timers, subscriptions, channel, controller, and backoff state.
  Future<void> dispose() async {
    _disposed = true;
    _pingTimer?.cancel();
    _pongTimer?.cancel();
    _memoryCleanupTimer?.cancel();

    // 🔥 dispose 시에도 안전하게 정리
    _cleanupActiveSubscriptions();

    _rateLimiter.dispose();
    await _channel?.sink.close();
    await _controller.close();
    _backoffCalculator.recordSuccess(); // reset
    log.i('WSClient disposed');
  }
}\n\n// ====== lib/core/network/websocket/orderbook_ws_client.dart ======\n
// lib/core/network/websocket/orderbook_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “호가” 스트림: List<Map<String, dynamic>>
class OrderbookWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  OrderbookWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket':
                    'orderbook-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'orderbook',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/api_client_coingecko.dart ======\n
// lib/core/network/api_client_coingecko.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import '../../data/models/market_mood_dto.dart';
import '../error/app_exception.dart';
import '../utils/logger.dart';

/// 🌐 CoinGecko API 클라이언트
class CoinGeckoApiClient {
  static const String _baseUrl = 'https://api.coingecko.com/api/v3';
  static const String _pathGlobal = '/global';
  static const String _exchangeRateUrl = 'https://api.exchangerate-api.com/v4/latest/USD';
  static const String _keyRates = 'rates';
  static const String _keyKrw = 'KRW';

  static const Duration _timeout = Duration(seconds: 10);
  
  final Dio _dio;
  
  CoinGeckoApiClient({Dio? dio}) : _dio = dio ?? _createDio();
  
  static Dio _createDio() {
    final dio = Dio(BaseOptions(
      baseUrl: _baseUrl,
      connectTimeout: _timeout,
      receiveTimeout: _timeout,
      sendTimeout: _timeout,
      headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
    ));
    
    if (kDebugMode) {
      dio.interceptors.add(LogInterceptor(
        requestBody: false,
        responseBody: false,
        logPrint: (object) => log.d('[CoinGecko API] $object'),
      ));
    }
    
    return dio;
  }
  
  /// 🎯 전체 시장 데이터 조회
  Future<CoinGeckoGlobalResponseDto> getGlobalMarketData() async {
    try {
      final response = await _dio.get(_pathGlobal);
      if (response.statusCode == 200 && response.data != null) {
        return CoinGeckoGlobalResponseDto.fromJson(response.data);
      } else {
        throw NetworkException(
          'Invalid response from CoinGecko API: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      log.e('[CoinGecko] DioException: ${e.message}', e);
      throw NetworkException.fromDio(e);
    } catch (e, stackTrace) {
      log.e('[CoinGecko] Unexpected error: $e', e, stackTrace);
      throw AppException('Failed to fetch market data: $e');
    }
  }

  /// 💱 USD → KRW 환율 조회
  Future<double> getUsdToKrwRate() async {
    try {
      final response = await _dio.get(_exchangeRateUrl);
      if (response.statusCode == 200 && response.data != null) {
        final data = response.data as Map<String, dynamic>;
        final rates = data[_keyRates] as Map<String, dynamic>;
        final krwRate = (rates[_keyKrw] ?? 1400.0).toDouble();
        return krwRate;
      } else {
        throw NetworkException('Invalid response from Exchange Rate API: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    } on DioException {
      log.w('[ExchangeRate] DioException, using fallback rate 1400.0');
      return 1400.0;
    } catch (e) {
      log.w('[ExchangeRate] Unexpected error: $e, using fallback rate 1400.0');
      return 1400.0;
    }
  }
}\n\n// ====== lib/core/network/auth_interceptor.dart ======\n
// lib/core/network/auth_interceptor.dart

import 'dart:convert';
import 'package:crypto/crypto.dart';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// Upbit REST API 호출 시 JWT 방식의 인증 헤더를 붙여줍니다.
/// - payload에 access_key, nonce, (query_hash, query_hash_alg)을 포함해야 합니다.
/// - 알고리즘: HS256
class AuthInterceptor extends Interceptor {
  final String apiKey;
  final String apiSecret;

  AuthInterceptor({required this.apiKey, required this.apiSecret});

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    try {
      final nonce = DateTime.now().millisecondsSinceEpoch.toString();
      final payload = <String, dynamic>{
        'access_key': apiKey,
        'nonce': nonce,
      };

      if (options.queryParameters.isNotEmpty || _hasRequestBody(options)) {
        final raw = options.queryParameters.isNotEmpty
            ? Uri(queryParameters: options.queryParameters).query
            : jsonEncode(options.data);
        payload['query_hash'] = sha512.convert(utf8.encode(raw)).toString();
        payload['query_hash_alg'] = 'SHA512';
      }

      // JWT Header and Payload
      const headerMap = {'alg': 'HS256', 'typ': 'JWT'};
      final headerJson = jsonEncode(headerMap);
      final payloadJson = jsonEncode(payload);
      final headerSeg = _base64UrlEncode(headerJson);
      final payloadSeg = _base64UrlEncode(payloadJson);

      // Signature
      final sigBytes = Hmac(sha256, utf8.encode(apiSecret))
          .convert(utf8.encode('$headerSeg.$payloadSeg'))
          .bytes;
      final sigSeg = base64Url.encode(sigBytes).replaceAll('=', '');

      options.headers['Authorization'] =
          'Bearer $headerSeg.$payloadSeg.$sigSeg';
    } catch (e, st) {
      log.e('AuthInterceptor error', e, st);
      return handler.reject(
        DioException(requestOptions: options, error: e),
      );
    }

    handler.next(options);
  }

  bool _hasRequestBody(RequestOptions options) {
    final data = options.data;
    if (data == null) return false;
    if (data is String) return data.isNotEmpty;
    if (data is Iterable || data is Map) return data.isNotEmpty;
    if (data is FormData) return data.fields.isNotEmpty || data.files.isNotEmpty;
    return true;
  }

  String _base64UrlEncode(String input) =>
      base64Url.encode(utf8.encode(input)).replaceAll('=', '');
}
\n\n// ====== lib/core/network/adaptive_backoff.dart ======\n
// lib/core/network/adaptive_backoff.dart

import 'dart:math' as math;
import 'package:connectivity_plus/connectivity_plus.dart';
import '../utils/logger.dart';

class AdaptiveBackoffCalculator {
  final Connectivity _connectivity = Connectivity();
  int _consecutiveFailures = 0;
  DateTime? _lastFailureTime;
  
  // 네트워크별 기본 지터 계수 (connectivity_plus 연동)
  static const Map<ConnectivityResult, double> _networkMultipliers = {
    ConnectivityResult.wifi: 0.8,      // WiFi는 빠른 재연결
    ConnectivityResult.mobile: 1.2,    // 모바일은 보수적
    ConnectivityResult.ethernet: 0.6,  // 유선은 가장 빠름
    ConnectivityResult.none: 2.0,      // 연결 없음은 매우 보수적
  };

  Future<Duration> calculateBackoff(int attempt, Duration baseDelay, Duration maxDelay) async {
    final connectivityResult = await _connectivity.checkConnectivity();
    final networkMultiplier = _networkMultipliers[connectivityResult] ?? 1.0; // 기본값
    
    final failurePenalty = _calculateFailurePenalty();
    
    final exponentialMs = baseDelay.inMilliseconds * (1 << attempt);
    final cappedMs = math.min(exponentialMs, maxDelay.inMilliseconds);
    
    // 지터 범위 20%로 빠른 재연결 보장
    final jitterRange = cappedMs * 0.2;
    final random = math.Random();
    final adaptiveJitter = random.nextDouble() * jitterRange * networkMultiplier * failurePenalty;
    
    final finalMs = math.max(0, cappedMs + adaptiveJitter.round());
    
    log.d('AdaptiveBackoff: attempt=$attempt, network=$connectivityResult, '
          'base=${cappedMs}ms, jitter=${adaptiveJitter.round()}ms, final=${finalMs}ms');
    
    return Duration(milliseconds: finalMs);
  }

  double _calculateFailurePenalty() {
    if (_lastFailureTime == null) return 1.0;
    
    final timeSinceLastFailure = DateTime.now().difference(_lastFailureTime!);
    if (timeSinceLastFailure > const Duration(minutes: 5)) {
      _consecutiveFailures = 0;
      return 1.0;
    }
    
    // 페널티 상한 1.5배로 조정 (그록의 수정사항 유지)
    return math.min(1.5, 1.0 + (_consecutiveFailures * 0.2));
  }

  void recordFailure() {
    _consecutiveFailures++;
    _lastFailureTime = DateTime.now();
  }

  void recordSuccess() {
    _consecutiveFailures = 0;
    _lastFailureTime = null;
  }
}\n\n// ====== lib/core/network/retry_interceptor.dart ======\n
import 'dart:async';
import 'dart:math';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// 429 혹은 5xx 에러에 대해 지수 백오프 + 지터 방식으로 재시도합니다.
class RetryInterceptor extends Interceptor {
  final Dio dio;
  final int maxRetries;
  final Duration initialBackoff;
  final Duration maxBackoff;
  final double jitterFactor;

  RetryInterceptor({
    required this.dio,
    this.maxRetries = 3,
    this.initialBackoff = const Duration(milliseconds: 500),
    this.maxBackoff = const Duration(seconds: 5),
    this.jitterFactor = 0.2,
  });

  @override
  Future<void> onError(DioException err, ErrorInterceptorHandler handler) async {
    final options = err.requestOptions;
    final retryCount = (options.extra['retry_count'] as int?) ?? 0;
    final status = err.response?.statusCode;

    if (_shouldRetry(err) && retryCount < maxRetries) {
      final next = retryCount + 1;
      options.extra['retry_count'] = next;

      // 429 응답일 경우 서버가 제공하는 헤더 우선 사용
      Duration delay;
      if (status == 429) {
        final retryAfter = err.response?.headers.value('Retry-After');
        if (retryAfter != null) {
          final secs = int.tryParse(retryAfter) ?? 0;
          delay = Duration(seconds: secs);
          log.i('Retry #$next after Retry-After header: ${delay.inSeconds}s');
        } else {
          final remaining = err.response?.headers.value('Remaining-Req');
          if (remaining != null) {
            log.d('Remaining-Req header: $remaining');
          }
          delay = _computeBackoff(next);
        }
      } else {
        // 5xx 에러는 기본 백오프 사용
        delay = _computeBackoff(next);
      }

      log.i('Retry #$next for [${options.method} ${options.path}] in ${delay.inMilliseconds}ms');
      await Future.delayed(delay);

      try {
        final response = await dio.fetch(options);
        return handler.resolve(response);
      } on DioException catch (e) {
        return handler.next(e);
      }
    }

    handler.next(err);
  }

  bool _shouldRetry(DioException err) {
    final status = err.response?.statusCode;
    return err.type == DioExceptionType.badResponse &&
        (status == 429 || (status != null && status >= 500 && status < 600));
  }

  Duration _computeBackoff(int attempt) {
    final expMs = initialBackoff.inMilliseconds * (1 << (attempt - 1));
    final cap = min(expMs, maxBackoff.inMilliseconds);
    final jitter = ((Random().nextDouble() * 2 - 1) * jitterFactor * cap).round();
    final finalMs = max(0, cap + jitter);
    return Duration(milliseconds: finalMs);
  }
}
\n\n// ====== lib/core/network/ws_rate_limiter_interceptor.dart ======\n
// lib/core/network/ws_rate_limiter_interceptor.dart

import 'dart:async';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import '../utils/logger.dart';

/// Upbit WebSocket 구독 메시지 발행 간 최소 간격 보장 유틸
class WsRateLimiter {
  final Duration minInterval;
  final Queue<VoidCallback> _queue = Queue<VoidCallback>();
  bool _isFlushing = false;
  DateTime _lastSent = DateTime.fromMillisecondsSinceEpoch(0);

  WsRateLimiter({this.minInterval = const Duration(milliseconds: 500)});

  /// 메시지를 큐에 추가하고 즉시 전송 시도
  void enqueue(VoidCallback send) {
    _queue.add(send);
    _flushNext();
  }

  void _flushNext() {
    if (_isFlushing || _queue.isEmpty) return;
    _isFlushing = true;

    final now = DateTime.now();
    final elapsed = now.difference(_lastSent);
    final delay = elapsed >= minInterval ? Duration.zero : minInterval - elapsed;

    Timer(delay, () {
      final send = _queue.removeFirst();
      try {
        send();
        _lastSent = DateTime.now();
        log.d('WsRateLimiter sent, next after \${minInterval.inMilliseconds}ms');
      } catch (e, st) {
        log.e('WsRateLimiter send error', e, st);
      } finally {
        _isFlushing = false;
        if (_queue.isNotEmpty) _flushNext();
      }
    });
  }

  /// 큐를 비우고 사용 중지
  void dispose() {
    _queue.clear();
  }
}
\n\n// ====== lib/core/network/api_client.dart ======\n
// lib/core/network/api_client.dart

import 'dart:async';
import 'dart:collection';
import 'package:dio/dio.dart';
import '../config/app_config.dart';
import '../error/app_exception.dart';
import '../extensions/result.dart';
import '../utils/logger.dart';
import 'auth_interceptor.dart';
import 'retry_interceptor.dart';
import 'logging_interceptor.dart';

typedef Json = Map<String, dynamic>;

/// 🆕 업비트 백서 2025 기준 동적 레이트리밋 관리자
/// Remaining-Req 헤더를 파싱하여 그룹별 실시간 슬롯 계산
class _UpbitDynamicRateLimiter {
  final Map<String, _GroupRateLimiter> _groupLimiters = {};
  final Duration _defaultPeriod = const Duration(seconds: 1);
  
  /// 응답 헤더에서 레이트리밋 정보 업데이트
  /// 형식: "Remaining-Req: group=market; min=900; sec=29"
  void updateFromHeaders(Map<String, List<String>> headers) {
    try {
      final remainingReq = headers['remaining-req']?.first ?? 
                          headers['Remaining-Req']?.first;
      if (remainingReq == null) return;
      
      // 헤더 파싱: group=market; min=900; sec=29
      final parsedInfo = _parseRemainingReqHeader(remainingReq);
      if (parsedInfo != null) {
        _updateGroupLimiter(
          parsedInfo.group, 
          parsedInfo.remaining, 
          Duration(seconds: parsedInfo.windowSec)
        );
        
        if (AppConfig.enableTradeLog) {
          log.i('Rate limit updated: ${parsedInfo.group}=${parsedInfo.remaining} req in ${parsedInfo.windowSec}s');
        }
      }
      
      // Req-Group 헤더도 확인 (그룹 정보만)
      final reqGroup = headers['req-group']?.first ?? 
                      headers['Req-Group']?.first;
      if (reqGroup != null && _groupLimiters[reqGroup] == null) {
        _initializeGroupLimiter(reqGroup);
      }
      
    } catch (e, st) {
      log.w('Failed to parse rate limit headers: $e', e, st);
    }
  }
  
  /// Remaining-Req 헤더 파싱
  _RemainingReqInfo? _parseRemainingReqHeader(String header) {
    try {
      final parts = header.split(';').map((p) => p.trim()).toList();
      String? group;
      int? remaining;
      int? windowSec;
      
      for (final part in parts) {
        final kv = part.split('=');
        if (kv.length != 2) continue;
        
        final key = kv[0].trim().toLowerCase();
        final value = kv[1].trim();
        
        switch (key) {
          case 'group':
            group = value;
            break;
          case 'min':
          case 'remaining':
            remaining = int.tryParse(value);
            break;
          case 'sec':
          case 'window':
            windowSec = int.tryParse(value);
            break;
        }
      }
      
      if (group != null && remaining != null && windowSec != null) {
        return _RemainingReqInfo(group, remaining, windowSec);
      }
    } catch (e) {
      log.w('Failed to parse Remaining-Req header: $header, error: $e');
    }
    return null;
  }
  
  /// 그룹별 레이트리밋 초기화
  void _initializeGroupLimiter(String group) {
    final maxRequests = AppConfig.getRateLimitForGroup(group);
    _groupLimiters[group] = _GroupRateLimiter(
      group: group,
      maxRequests: maxRequests,
      period: _defaultPeriod,
    );
    
    if (AppConfig.enableTradeLog) {
      log.d('Initialized rate limiter for group: $group ($maxRequests rps)');
    }
  }
  
  /// 그룹별 레이트리밋 업데이트 (서버 응답 기반)
  void _updateGroupLimiter(String group, int remaining, Duration window) {
    var limiter = _groupLimiters[group];
    if (limiter == null) {
      _initializeGroupLimiter(group);
      limiter = _groupLimiters[group]!;
    }
    
    // 서버에서 받은 정보로 동적 업데이트
    limiter.updateFromServer(remaining, window);
  }
  
  /// 특정 그룹의 throttle 실행
  Future<void> throttle(String group, String path) async {
    // 그룹 리밋이 없으면 초기화
    if (!_groupLimiters.containsKey(group)) {
      _initializeGroupLimiter(group);
    }
    
    final limiter = _groupLimiters[group]!;
    await limiter.throttle(path);
  }
  
  /// 디버그 정보 제공
  Map<String, dynamic> getDebugInfo() {
    return {
      'activeGroups': _groupLimiters.keys.toList(),
      'groupStats': {
        for (final entry in _groupLimiters.entries)
          entry.key: entry.value.getStats(),
      },
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// 리소스 정리
  void dispose() {
    for (final limiter in _groupLimiters.values) {
      limiter.dispose();
    }
    _groupLimiters.clear();
  }
}

/// 헤더 파싱 결과 정보
class _RemainingReqInfo {
  final String group;
  final int remaining;
  final int windowSec;
  
  _RemainingReqInfo(this.group, this.remaining, this.windowSec);
}

/// 개별 그룹의 레이트리밋 관리자
class _GroupRateLimiter {
  final String group;
  int _maxRequests;
  final Duration _period;
  final Queue<DateTime> _timestamps = Queue<DateTime>();
  
  // 서버 기반 동적 정보
  int? _serverRemaining;
  DateTime? _serverUpdateTime;
  Duration? _serverWindow;
  
  _GroupRateLimiter({
    required this.group,
    required int maxRequests,
    required Duration period,
  }) : _maxRequests = maxRequests, _period = period;
  
  /// 서버 응답 기반 업데이트
  void updateFromServer(int remaining, Duration window) {
    _serverRemaining = remaining;
    _serverUpdateTime = DateTime.now();
    _serverWindow = window;
    
    // 서버 정보가 더 제한적이면 클라이언트 제한도 조정
    if (remaining < _maxRequests) {
      final adjustedMax = (remaining * 0.9).floor(); // 10% 여유
      if (adjustedMax > 0 && adjustedMax < _maxRequests) {
        log.i('Adjusting rate limit for $group: $_maxRequests → $adjustedMax (server: $remaining)');
        _maxRequests = adjustedMax;
      }
    }
  }
  
  /// throttle 실행
  Future<void> throttle(String path) async {
    final now = DateTime.now();
    
    // 서버 정보 기반 추가 체크
    if (_shouldWaitForServerLimit(now)) {
      final waitTime = _calculateServerWaitTime(now);
      if (waitTime > Duration.zero) {
        if (AppConfig.enableTradeLog) {
          log.d('Waiting ${waitTime.inMilliseconds}ms for server rate limit (group: $group)');
        }
        await Future.delayed(waitTime);
      }
    }
    
    // 클라이언트 사이드 레이트리밋
    _cleanOldTimestamps(now);
    
    if (_timestamps.length >= _maxRequests) {
      final oldestTime = _timestamps.first;
      final waitTime = _period - now.difference(oldestTime);
      if (waitTime > Duration.zero) {
        if (AppConfig.enableTradeLog) {
          log.d('Waiting ${waitTime.inMilliseconds}ms for client rate limit (group: $group)');
        }
        await Future.delayed(waitTime);
        _cleanOldTimestamps(DateTime.now());
      }
    }
    
    _timestamps.addLast(DateTime.now());
  }
  
  /// 서버 제한 대기 필요 여부
  bool _shouldWaitForServerLimit(DateTime now) {
    if (_serverRemaining == null || _serverUpdateTime == null || _serverWindow == null) {
      return false;
    }
    
    // 서버 정보가 5분 이상 오래됐으면 무시
    if (now.difference(_serverUpdateTime!).inMinutes > 5) {
      return false;
    }
    
    return _serverRemaining! <= 5; // 서버 잔여 요청이 5개 이하
  }
  
  /// 서버 기반 대기 시간 계산
  Duration _calculateServerWaitTime(DateTime now) {
    if (_serverUpdateTime == null || _serverWindow == null) {
      return Duration.zero;
    }
    
    final elapsed = now.difference(_serverUpdateTime!);
    final remaining = _serverWindow! - elapsed;
    
    return remaining > Duration.zero ? remaining : Duration.zero;
  }
  
  /// 오래된 타임스탬프 정리
  void _cleanOldTimestamps(DateTime now) {
    while (_timestamps.isNotEmpty && 
           now.difference(_timestamps.first) > _period) {
      _timestamps.removeFirst();
    }
  }
  
  /// 통계 정보
  Map<String, dynamic> getStats() {
    return {
      'group': group,
      'maxRequests': _maxRequests,
      'period': _period.inSeconds,
      'currentRequests': _timestamps.length,
      'serverRemaining': _serverRemaining,
      'serverLastUpdate': _serverUpdateTime?.toIso8601String(),
      'availableSlots': _maxRequests - _timestamps.length,
    };
  }
  
  void dispose() {
    _timestamps.clear();
  }
}

/// In-memory cache entry with timestamp.
class _MemCacheEntry<T> {
  final T data;
  final DateTime ts;
  _MemCacheEntry(this.data) : ts = DateTime.now();

  bool fresh(Duration dur) => DateTime.now().difference(ts) < dur;
}

/// Simple LRU cache based on insertion order, with a maxEntries limit.
class _MemCache {
  final int maxEntries;
  final Map<String, _MemCacheEntry<dynamic>> _box;

  _MemCache({this.maxEntries = 100}) : _box = <String, _MemCacheEntry<dynamic>>{};

  T? get<T>(String key, Duration dur) {
    final entry = _box[key];
    if (entry == null || !entry.fresh(dur)) return null;
    return entry.data as T;
  }

  void put<T>(String key, T data) {
    if (_box.length >= maxEntries) {
      final oldestKey = _box.keys.first;
      _box.remove(oldestKey);
    }
    _box[key] = _MemCacheEntry<T>(data);
  }

  void invalidate(String key) => _box.remove(key);

  void clear() => _box.clear();
}

/// Converts a query map into a stable, sorted query string.
/// Silently skips values that cannot be represented.
String _stableQueryString(Json? query) {
  if (query == null || query.isEmpty) return '';
  try {
    final entries = query.entries
      .where((e) => e.value != null)
      .toList()
      ..sort((a, b) => a.key.compareTo(b.key));
    final params = <String, String>{};
    for (final e in entries) {
      final v = e.value;
      if (v is List) {
        params[e.key] = v.join(',');
      } else {
        params[e.key] = v.toString();
      }
    }
    return Uri(queryParameters: params).query;
  } catch (e, st) {
    log.e('StableQueryString failed', e, st);
    return '';
  }
}

/// 🆕 응답 헤더에서 레이트리밋 정보를 파싱하는 인터셉터
class _RateLimitResponseInterceptor extends Interceptor {
  final _UpbitDynamicRateLimiter rateLimiter;
  
  _RateLimitResponseInterceptor(this.rateLimiter);
  
  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    // 업비트 응답 헤더에서 레이트리밋 정보 업데이트
    rateLimiter.updateFromHeaders(response.headers.map);
    handler.next(response);
  }
}

/// 🔥 완전히 재구현된 ApiClient - 업비트 백서 100% 준수
/// - 그룹별 동적 레이트리밋 (공개 30rps / 사적 8rps)
/// - Remaining-Req 헤더 실시간 파싱
/// - 서버 응답 기반 동적 슬롯 조정
class ApiClient {
  final Dio _dio;
  final _MemCache _cache;
  final _UpbitDynamicRateLimiter _rateLimiter;

  /// [apiKey], [apiSecret] 는 Upbit Open API 자격증명
  ApiClient({
    Dio? dio,
    required String apiKey,
    required String apiSecret,
    int cacheSize = 100,
  })  : _dio = dio ?? Dio(),
        _cache = _MemCache(maxEntries: cacheSize),
        _rateLimiter = _UpbitDynamicRateLimiter() {
    _dio.interceptors.addAll([
      AuthInterceptor(apiKey: apiKey, apiSecret: apiSecret),
      RetryInterceptor(dio: _dio),
      LoggingInterceptor(),
      _RateLimitResponseInterceptor(_rateLimiter), // 🆕 동적 레이트리밋 인터셉터
    ]);
  }

  /// [method]: GET, POST 등
  /// [path]: 전체 URL 또는 baseUrl 이후 경로
  /// [query]: URL 쿼리 파라미터
  /// [body]: JSON 바디
  /// [cacheDur]: null이 아닐 때 캐시 사용 (기간 지정)
  /// [rateLimitGroup]: 수동 그룹 지정 (선택적)
  Future<Result<R, NetworkException>> request<R>({
    required String method,
    required String path,
    Json? query,
    Json? body,
    Duration? cacheDur,
    String? rateLimitGroup,
  }) async {
    // 🔥 업비트 백서 기준 그룹별 동적 레이트리밋 적용
    final group = rateLimitGroup ?? AppConfig.getGroupFromPath(path);
    await _rateLimiter.throttle(group, path);

    String? cacheKey;
    if (cacheDur != null) {
      final qstr = _stableQueryString(query);
      cacheKey = '$method|$path|$qstr';
      final cached = _cache.get<R>(cacheKey, cacheDur);
      if (cached != null) {
        return Ok(cached);
      }
    }

    try {
      final response = await _dio.request<R>(
        path,
        queryParameters: query,
        data: body,
        options: Options(method: method),
      );

      final data = response.data;
      if (cacheKey != null && data != null) {
        _cache.put<R>(cacheKey, data as R);
      }

      return Ok(data as R);
    } on DioException catch (dioErr) {
      return Err(NetworkException.fromDio(dioErr));
    } catch (e, st) {
      log.e('ApiClient unexpected error', e, st);
      final ex = e is Exception ? e : Exception(e.toString());
      return Err(NetworkException(e.toString(), originalException: ex));
    }
  }
  
  /// 🆕 레이트리밋 디버그 정보 조회
  Map<String, dynamic> getRateLimitDebugInfo() {
    return _rateLimiter.getDebugInfo();
  }
  
  /// 🆕 리소스 정리
  void dispose() {
    _rateLimiter.dispose();
    _cache.clear();
  }
}\n\n// ====== lib/core/network/logging_interceptor.dart ======\n
// lib/core/network/logging_interceptor.dart

import 'dart:convert';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// 모든 REST 요청과 응답, 오류를 로깅합니다.
/// 🔒 보안: access_key, signature 등 민감 정보 자동 마스킹
class LoggingInterceptor extends Interceptor {
  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(options.uri);
    log.i('--> ${options.method} $secureUri');
    
    // 🔒 헤더 보안 마스킹 (Authorization 헤더)
    if (options.headers.containsKey('Authorization')) {
      log.d('Headers: Authorization: Bearer ***[MASKED]***');
    }
    
    if (options.data != null && options.data is! String) {
      try {
        final sanitizedData = _sanitizeRequestData(options.data);
        log.d('Request Data:\n${const JsonEncoder.withIndent('  ').convert(sanitizedData)}');
      } catch (e, st) {
        log.d('Request Data serialization failed', e, st);
      }
    }
    handler.next(options);
  }

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(response.requestOptions.uri);
    log.i('<-- ${response.statusCode} $secureUri');
    
    final text = response.data is String
        ? response.data as String
        : response.data.toString();
    if (text.isNotEmpty) {
      log.d(text.length > 500 ? '${text.substring(0, 500)}...' : text);
    }
    handler.next(response);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(err.requestOptions.uri);
    log.e('<-- Error ${err.response?.statusCode} $secureUri', err, err.stackTrace);
    handler.next(err);
  }

  /// 🔒 URI에서 민감 정보 마스킹
  String _sanitizeUri(Uri uri) {
    final uriString = uri.toString();
    return uriString
        .replaceAll(RegExp(r'access_key=[^&?#]+'), 'access_key=***')
        .replaceAll(RegExp(r'signature=[^&?#]+'), 'signature=***')
        .replaceAll(RegExp(r'nonce=[^&?#]+'), 'nonce=***')
        .replaceAll(RegExp(r'api_key=[^&?#]+'), 'api_key=***')
        .replaceAll(RegExp(r'secret=[^&?#]+'), 'secret=***');
  }

  /// 🔒 요청 데이터에서 민감 정보 마스킹
  dynamic _sanitizeRequestData(dynamic data) {
    if (data is Map<String, dynamic>) {
      final sanitized = <String, dynamic>{};
      for (final entry in data.entries) {
        final key = entry.key.toLowerCase();
        if (_isSensitiveKey(key)) {
          sanitized[entry.key] = '***[MASKED]***';
        } else {
          sanitized[entry.key] = _sanitizeRequestData(entry.value);
        }
      }
      return sanitized;
    } else if (data is List) {
      return data.map((item) => _sanitizeRequestData(item)).toList();
    }
    return data;
  }

  /// 🔒 민감한 키 판별
  bool _isSensitiveKey(String key) {
    const sensitiveKeys = {
      'access_key', 'accesskey', 'api_key', 'apikey',
      'secret', 'signature', 'nonce', 'password', 
      'token', 'auth', 'authorization'
    };
    return sensitiveKeys.contains(key);
  }
}\n\n// ====== lib/core/navigation/app_router.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../config/app_config.dart';
import '../../shared/widgets/notification_service.dart';
import '../../presentation/pages/main_page.dart'; // 🆕 MainPage 사용

/// 🗑️ 개별 라우트 enum 제거 (이제 MainPage에서 관리)
// enum AppRoute는 더 이상 필요 없음

class AppRouter {
  final WidgetRef ref;
  final GlobalKey<NavigatorState> navigatorKey;
  late final GoRouter router;

  AppRouter(this.ref, this.navigatorKey) {
    router = GoRouter(
      navigatorKey: navigatorKey,
      initialLocation: '/', // 메인 페이지로 시작
      debugLogDiagnostics: AppConfig.isDebugMode,
      routes: [
        // 🆕 단일 메인 라우트 (PageView 기반)
        GoRoute(
          path: '/',
          name: 'main',
          builder: (context, state) => const MainPage(),
        ),
        
        // 🔧 필요시 추가 라우트들 (설정, 상세 페이지 등)
        // GoRoute(
        //   path: '/detail/:id',
        //   name: 'detail',
        //   builder: (context, state) => DetailPage(id: state.params['id']!),
        // ),
      ],
    );
  }

  /// 🔧 Firebase 리스너 설정 (NotificationService에 위임)
  void setupFCMListeners() {
    final notificationService = ref.read(notificationServiceProvider);
    notificationService.setupFirebaseListeners(navigatorKey);
  }

  /// 🔧 리소스 정리 (NotificationService에 위임)
  void dispose() {
    final notificationService = ref.read(notificationServiceProvider);
    notificationService.dispose();
  }
}\n\n// ====== lib/core/utils/pattern_config.dart ======\n
import '../../domain/entities/signal.dart';

/// 🎯 PatternConfig - 패턴별 설정값 관리
/// 
/// 개선사항:
/// - 4,5번 패턴 완화된 설정값 적용
/// - 패턴별 개별 쿨다운 시간 관리
/// - 설정값 유효성 검사
/// - 런타임 설정 변경 지원
class PatternConfig {
  
  /// 📊 패턴별 기본 설정값 (4,5번 패턴 완화됨)
  static const Map<PatternType, Map<String, double>> _defaultConfig = {
    PatternType.surge: {
      'priceChangePercent': 0.4,       // 가격 변동률 0.4%
      'zScoreThreshold': 1.7,          // Z-score 임계값
      'minTradeAmount': 2500000,       // 최소 거래대금 (250만)
      'lvThreshold': 500,              // Liquidity Vortex
    },
    
    PatternType.flashFire: {
      'zScoreThreshold': 2.2,          // Z-score 임계값
      'minTradeAmount': 10000000,      // 최소 거래대금 (1000만)
      'buyRatioMin': 0.7,              // 매수 비율
      'volumeMultiplier': 2.0,         // 거래량 배수
      'mbrThreshold': 0.12,            // Micro Burst Radar
      'mrThreshold': 0.15,             // Machine Rush
    },
    
    PatternType.stackUp: {
      'consecutiveMin': 2,             // 최소 연속 횟수
      'minVolume': 5000000,            // 최소 거래량 (500만)
      'zScoreThreshold': 1.0,          // Z-score 임계값
      'volumeMultiplier': 1.5,         // 거래량 배수
      'rSquaredMin': 0.35,             // R² 최소값
    },
    
    // 🆕 StealthIn 패턴 - 완화된 설정 (감지율 향상)
    PatternType.stealthIn: {
      'minTradeAmount': 5000000,       // 2000만 → 500만 (대폭 완화)
      'intervalVarianceMax': 900,      // 거래 간격 분산 최대값
      'buyRatioMin': 0.6,              // 0.7 → 0.6 (완화)
      'avgTradeSizeRatio': 0.4,        // 평균 거래 크기 비율
      'minTradeCount': 20,             // 최소 거래 횟수
      'cvThreshold': 0.05,             // 변동계수 임계값 (5%)
    },
    
    // 🆕 BlackHole 패턴 - 완화된 설정 (감지율 향상)
    PatternType.blackHole: {
      'minTradeAmount': 10000000,      // 5000만 → 1000만 (대폭 완화)
      'cvThreshold': 0.02,             // 0.01 → 0.02 (완화)
      'buyRatioMin': 0.35,             // 0.4 → 0.35 (완화)
      'buyRatioMax': 0.65,             // 0.6 → 0.65 (완화)
      'priceZScoreMax': 1.0,           // 가격 Z-score 최대값
      'stdDevRatio': 0.02,             // 표준편차 비율 (2%)
    },
    
    PatternType.reboundShot: {
      'minVolume': 1000000,            // 최소 거래량 (100만)
      'priceRangeMin': 0.005,          // 최소 가격 범위 (0.5%)
      'jumpThreshold': 0,              // Jump Gate 임계값
    },
  };

  /// 🔒 패턴별 쿨다운 시간 (성능 최적화)
  static const Map<PatternType, Duration> _cooldownPeriods = {
    PatternType.surge: Duration(seconds: 2),        // 빠른 패턴
    PatternType.flashFire: Duration(seconds: 3),    // 중간 패턴
    PatternType.stackUp: Duration(seconds: 4),      // 중간 패턴
    PatternType.stealthIn: Duration(seconds: 8),    // 느린 패턴 (매집 특성상)
    PatternType.blackHole: Duration(seconds: 10),   // 가장 느린 패턴 (갇힘 특성상)
    PatternType.reboundShot: Duration(seconds: 3),  // 중간 패턴
  };

  /// 현재 설정값 (런타임 변경 가능)
  final Map<PatternType, Map<String, double>> _currentConfig;
  
  /// 생성자
  PatternConfig({Map<PatternType, Map<String, double>>? customConfig}) 
    : _currentConfig = customConfig != null 
        ? Map.from(customConfig)
        : _deepCopyConfig(_defaultConfig);

  /// 패턴별 설정값 조회
  Map<String, double> getPatternConfig(PatternType pattern) {
    return Map.from(_currentConfig[pattern] ?? <String, double>{});
  }

  /// 특정 설정값 조회
  double getConfigValue(PatternType pattern, String key) {
    return _currentConfig[pattern]?[key] ?? 0.0;
  }

  /// 패턴별 쿨다운 시간 조회
  Duration getCooldownDuration(PatternType pattern) {
    return _cooldownPeriods[pattern] ?? const Duration(seconds: 5);
  }

  /// 🛠️ 런타임 설정 변경
  
  /// 특정 패턴의 설정값 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    if (_isValidConfigValue(pattern, key, value)) {
      _currentConfig[pattern] ??= <String, double>{};
      _currentConfig[pattern]![key] = value;
    } else {
      throw ArgumentError('Invalid config value: $key = $value for pattern ${pattern.name}');
    }
  }

  /// 패턴의 전체 설정 업데이트
  void updateFullPatternConfig(PatternType pattern, Map<String, double> config) {
    // 유효성 검사
    for (final entry in config.entries) {
      if (!_isValidConfigValue(pattern, entry.key, entry.value)) {
        throw ArgumentError('Invalid config value: ${entry.key} = ${entry.value} for pattern ${pattern.name}');
      }
    }
    
    _currentConfig[pattern] = Map.from(config);
  }

  /// 설정값을 기본값으로 리셋
  void resetToDefault(PatternType? pattern) {
    if (pattern != null) {
      _currentConfig[pattern] = Map.from(_defaultConfig[pattern] ?? <String, double>{});
    } else {
      _currentConfig.clear();
      _currentConfig.addAll(_deepCopyConfig(_defaultConfig));
    }
  }

  /// 🔍 설정값 유효성 검사
  bool _isValidConfigValue(PatternType pattern, String key, double value) {
    // 음수 값 방지
    if (value < 0) return false;
    
    // 패턴별 특수 검사
    switch (pattern) {
      case PatternType.surge:
        if (key == 'priceChangePercent' && (value < 0.1 || value > 10.0)) return false;
        if (key == 'zScoreThreshold' && (value < 0.5 || value > 5.0)) return false;
        break;
        
      case PatternType.flashFire:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'volumeMultiplier' && (value < 1.0 || value > 10.0)) return false;
        break;
        
      case PatternType.stackUp:
        if (key == 'consecutiveMin' && (value < 1 || value > 10)) return false;
        if (key == 'rSquaredMin' && (value < 0.0 || value > 1.0)) return false;
        break;
        
      case PatternType.stealthIn:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'cvThreshold' && (value < 0.001 || value > 0.5)) return false;
        break;
        
      case PatternType.blackHole:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'buyRatioMax' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'cvThreshold' && (value < 0.001 || value > 0.5)) return false;
        break;
        
      case PatternType.reboundShot:
        if (key == 'priceRangeMin' && (value < 0.001 || value > 0.5)) return false;
        break;
    }
    
    return true;
  }

  /// 설정 깊은 복사
  static Map<PatternType, Map<String, double>> _deepCopyConfig(
    Map<PatternType, Map<String, double>> source
  ) {
    final result = <PatternType, Map<String, double>>{};
    for (final entry in source.entries) {
      result[entry.key] = Map.from(entry.value);
    }
    return result;
  }

  /// 📊 설정값 정보 조회
  
  /// 모든 패턴의 설정값 조회
  Map<PatternType, Map<String, double>> getAllPatternConfigs() {
    return _deepCopyConfig(_currentConfig);
  }

  /// 기본값과 현재값 비교
  Map<String, dynamic> getConfigComparison(PatternType pattern) {
    final current = _currentConfig[pattern] ?? <String, double>{};
    final defaultValues = _defaultConfig[pattern] ?? <String, double>{};
    
    final comparison = <String, Map<String, double>>{};
    final allKeys = <String>{...current.keys, ...defaultValues.keys};
    
    for (final key in allKeys) {
      comparison[key] = {
        'current': current[key] ?? 0.0,
        'default': defaultValues[key] ?? 0.0,
        'isModified': (current[key] ?? 0.0) != (defaultValues[key] ?? 0.0) ? 1.0 : 0.0,
      };
    }
    
    return {
      'pattern': pattern.name,
      'cooldownSeconds': getCooldownDuration(pattern).inSeconds,
      'configs': comparison,
      'totalModified': comparison.values
          .where((v) => v['isModified'] == 1.0)
          .length,
    };
  }

  /// 설정 요약 정보
  Map<String, dynamic> getConfigSummary() {
    final summary = <String, dynamic>{
      'version': '4.0',
      'totalPatterns': PatternType.values.length,
      'enhancedPatterns': ['stealthIn', 'blackHole'], // 완화된 패턴들
    };
    
    // 패턴별 쿨다운 시간
    final cooldowns = <String, String>{};
    for (final pattern in PatternType.values) {
      cooldowns[pattern.name] = '${getCooldownDuration(pattern).inSeconds}s';
    }
    summary['cooldownPeriods'] = cooldowns;
    
    // 변경된 설정값 개수
    int totalModified = 0;
    for (final pattern in PatternType.values) {
      final current = _currentConfig[pattern] ?? <String, double>{};
      final defaultValues = _defaultConfig[pattern] ?? <String, double>{};
      
      for (final key in current.keys) {
        if (current[key] != defaultValues[key]) {
          totalModified++;
        }
      }
    }
    summary['totalModifiedConfigs'] = totalModified;
    
    // 완화된 설정값들 (4,5번 패턴)
    summary['relaxedSettings'] = {
      'stealthIn': {
        'minTradeAmount': '2000만 → 500만 (75% 완화)',
        'buyRatioMin': '0.7 → 0.6 (14% 완화)',
        'cvThreshold': '추가됨 (5%)',
      },
      'blackHole': {
        'minTradeAmount': '5000만 → 1000만 (80% 완화)',
        'cvThreshold': '1% → 2% (100% 완화)',
        'buyRatioRange': '40-60% → 35-65% (25% 확대)',
      },
    };
    
    return summary;
  }

  /// 🎯 프리셋 설정

  /// 보수적 설정 (False Positive 최소화)
  void applyConservativePreset() {
    // Surge 패턴 강화
    updatePatternConfig(PatternType.surge, 'priceChangePercent', 0.6);
    updatePatternConfig(PatternType.surge, 'zScoreThreshold', 2.0);
    
    // FlashFire 패턴 강화
    updatePatternConfig(PatternType.flashFire, 'zScoreThreshold', 2.5);
    updatePatternConfig(PatternType.flashFire, 'buyRatioMin', 0.75);
    
    // StackUp 패턴 강화
    updatePatternConfig(PatternType.stackUp, 'consecutiveMin', 3);
    updatePatternConfig(PatternType.stackUp, 'rSquaredMin', 0.5);
    
    // StealthIn 패턴 강화 (하지만 여전히 기존보다는 완화)
    updatePatternConfig(PatternType.stealthIn, 'minTradeAmount', 8000000); // 800만
    updatePatternConfig(PatternType.stealthIn, 'buyRatioMin', 0.65);
    
    // BlackHole 패턴 강화 (하지만 여전히 기존보다는 완화)
    updatePatternConfig(PatternType.blackHole, 'minTradeAmount', 15000000); // 1500만
    updatePatternConfig(PatternType.blackHole, 'cvThreshold', 0.015);
  }

  /// 공격적 설정 (감지율 최대화)
  void applyAggressivePreset() {
    // Surge 패턴 완화
    updatePatternConfig(PatternType.surge, 'priceChangePercent', 0.3);
    updatePatternConfig(PatternType.surge, 'zScoreThreshold', 1.5);
    
    // FlashFire 패턴 완화
    updatePatternConfig(PatternType.flashFire, 'zScoreThreshold', 2.0);
    updatePatternConfig(PatternType.flashFire, 'buyRatioMin', 0.65);
    
    // StackUp 패턴 완화
    updatePatternConfig(PatternType.stackUp, 'consecutiveMin', 2);
    updatePatternConfig(PatternType.stackUp, 'rSquaredMin', 0.25);
    
    // StealthIn 패턴 최대 완화
    updatePatternConfig(PatternType.stealthIn, 'minTradeAmount', 3000000); // 300만
    updatePatternConfig(PatternType.stealthIn, 'buyRatioMin', 0.55);
    
    // BlackHole 패턴 최대 완화
    updatePatternConfig(PatternType.blackHole, 'minTradeAmount', 5000000); // 500만
    updatePatternConfig(PatternType.blackHole, 'cvThreshold', 0.03);
    updatePatternConfig(PatternType.blackHole, 'buyRatioMin', 0.3);
    updatePatternConfig(PatternType.blackHole, 'buyRatioMax', 0.7);
  }

  /// 균형 설정 (기본값)
  void applyBalancedPreset() {
    resetToDefault(null); // 모든 패턴을 기본값으로 리셋
  }

  /// 🧪 백테스팅용 설정 내보내기/가져오기
  
  /// 설정을 JSON 형태로 내보내기
  Map<String, dynamic> exportConfig() {
    final export = <String, dynamic>{
      'version': '4.0',
      'timestamp': DateTime.now().toIso8601String(),
      'patterns': <String, dynamic>{},
    };
    
    for (final pattern in PatternType.values) {
      export['patterns'][pattern.name] = {
        'config': getPatternConfig(pattern),
        'cooldownSeconds': getCooldownDuration(pattern).inSeconds,
      };
    }
    
    return export;
  }

  /// JSON에서 설정 가져오기
  void importConfig(Map<String, dynamic> configData) {
    if (configData['version'] != '4.0') {
      throw ArgumentError('Unsupported config version: ${configData['version']}');
    }
    
    final patterns = configData['patterns'] as Map<String, dynamic>?;
    if (patterns == null) return;
    
    for (final pattern in PatternType.values) {
      final patternData = patterns[pattern.name] as Map<String, dynamic>?;
      if (patternData == null) continue;
      
      final config = patternData['config'] as Map<String, dynamic>?;
      if (config == null) continue;
      
      // double 타입으로 변환하여 설정 적용
      final doubleConfig = <String, double>{};
      for (final entry in config.entries) {
        if (entry.value is num) {
          doubleConfig[entry.key] = (entry.value as num).toDouble();
        }
      }
      
      if (doubleConfig.isNotEmpty) {
        updateFullPatternConfig(pattern, doubleConfig);
      }
    }
  }

  /// 🎯 A/B 테스트용 설정 변형
  
  /// 특정 패턴만 조정한 변형 생성
  PatternConfig createVariant({
    PatternType? targetPattern,
    String? targetKey,
    double? multiplier,
  }) {
    if (targetPattern == null || targetKey == null || multiplier == null) {
      return PatternConfig(customConfig: getAllPatternConfigs());
    }
    
    final variantConfig = getAllPatternConfigs();
    final currentValue = getConfigValue(targetPattern, targetKey);
    
    if (currentValue > 0) {
      variantConfig[targetPattern] ??= <String, double>{};
      variantConfig[targetPattern]![targetKey] = currentValue * multiplier;
    }
    
    return PatternConfig(customConfig: variantConfig);
  }
}\n\n// ====== lib/core/utils/pattern_strategies.dart ======\n
\n\n// ====== lib/core/utils/date_time.dart ======\n
import 'package:intl/intl.dart';

/// DateTime extension utilities for formatting and comparison.
extension DateTimeX on DateTime {
  /// `2024-05-17 22:05:01` → `22:05:01`
  String hhmmss() => DateFormat('HH:mm:ss').format(this);

  /// `2024-05-17` 형식의 날짜 문자열 반환
  String yyyyMMdd() => DateFormat('yyyy-MM-dd').format(this);

  /// `22:05` 형식의 시간 문자열 반환
  String hhmm() => DateFormat('HH:mm').format(this);

  /// `2024-05-17 22:05` 형식의 날짜+시간 문자열 반환
  String yyyyMMddhhmm() => DateFormat('yyyy-MM-dd HH:mm').format(this);

  /// 현재 시간과의 차이를 사람이 읽기 쉬운 형태로 표시
  /// 예: '방금 전', '3분 전', '2시간 전', '어제', '3일 전', '2주 전', '5개월 전', '1년 전'
  String timeAgo() {
    final now = DateTime.now();
    final diff = now.difference(this);

    if (diff.inSeconds < 60) return '방금 전';
    if (diff.inMinutes < 60) return '${diff.inMinutes}분 전';
    if (diff.inHours < 24) return '${diff.inHours}시간 전';
    if (diff.inDays < 2) return '어제';
    if (diff.inDays < 7) return '${diff.inDays}일 전';
    if (diff.inDays < 30) return '${(diff.inDays / 7).floor()}주 전';
    if (diff.inDays < 365) return '${(diff.inDays / 30).floor()}개월 전';
    return '${(diff.inDays / 365).floor()}년 전';
  }

  /// UTC 밀리초(ms)를 로컬 DateTime으로 변환
  static DateTime fromEpochMs(int ms) =>
      DateTime.fromMillisecondsSinceEpoch(ms, isUtc: true).toLocal();

  /// ISO 8601 문자열을 로컬 DateTime으로 파싱
  static DateTime parseIso8601(String iso) =>
      DateTime.parse(iso).toLocal();

  /// 동일한 날짜인지 확인
  bool isSameDay(DateTime other) =>
      year == other.year && month == other.month && day == other.day;

  /// 오늘인지 확인
  bool get isToday => isSameDay(DateTime.now());

  /// 어제인지 확인
  bool get isYesterday =>
      isSameDay(DateTime.now().subtract(const Duration(days: 1)));
}
\n\n// ====== lib/core/utils/logger.dart ======\n
import 'package:logger/logger.dart';
import '../config/app_config.dart';

/// 글로벌 Logger 인스턴스
/// - 개발 모드: AppConfig.logLevel에 따라 동적 조절
/// - 프로덕션모드: warning 이상 자동
final Logger log = Logger(
  printer: PrettyPrinter(
    methodCount: 0,      // 스택 트레이스 라인 수
    errorMethodCount: 5, // 오류 시 표시할 스택 트레이스 라인 수
    lineLength: 120,     // 로그 한 줄 최대 길이
    colors: true,        // 컬러 출력 (터미널)
    printTime: true,     // 타임스탬프 포함
  ),
  level: AppConfig.logLevel, // 🔥 환경변수로 동적 조절 가능
);\n\n// ====== lib/core/utils/pattern_detector copy.dart ======\n
\n\n// ====== lib/core/utils/pattern_detector.dart ======\n
import 'dart:math';
import 'package:flutter/foundation.dart';
import '../../domain/entities/signal.dart';
import '../../domain/entities/trade.dart';
import 'advanced_metrics.dart';
import 'pattern_config.dart';
import 'market_data_context.dart';

/// 🚀 PatternDetector V4.1 - 온라인 지표 연동
/// 
/// 주요 개선사항:
/// 1. ✅ OnlineAdvancedMetrics 사용으로 O(1) 지표 계산
/// 2. ✅ 스트림 끊김 감지 및 자동 복구
/// 3. ✅ 실제 온라인 RSI/MACD 기반 다이버전스 계산
/// 4. ✅ 시한폭탄 문제 완전 해결
/// 5. ✅ 기존 인터페이스 호환성 유지
class PatternDetector {
  final PatternConfig _config;
  final AdvancedMetrics _metrics;
  
  // 🔒 쿨다운 시스템 (인스턴스 변수로 변경)
  final Map<String, DateTime> _lastSignalTime = {};
  
  PatternDetector({
    PatternConfig? config,
    AdvancedMetrics? metrics,
  }) : _config = config ?? PatternConfig(),
        _metrics = metrics ?? AdvancedMetrics();

  /// 🎯 메인 감지 함수 - 온라인 지표 연동
  Signal? detectPattern({
    required PatternType patternType,
    required Trade trade,
    required DateTime timestamp,
    required MarketDataContext context,
  }) {
    // 🔥 먼저 온라인 지표 업데이트 (O(1))
    _metrics.updatePrice(
      market: trade.market,
      price: trade.price,
      timestamp: timestamp,
    );
    
    // 🔒 쿨다운 체크
    if (_isInCooldown(trade.market, patternType, timestamp)) {
      return null;
    }
    
    Signal? signal;
    
    // 패턴별 감지 로직
    switch (patternType) {
      case PatternType.surge:
        signal = _detectSurge(trade, timestamp, context);
        break;
      case PatternType.flashFire:
        signal = _detectFlashFire(trade, timestamp, context);
        break;
      case PatternType.stackUp:
        signal = _detectStackUp(trade, timestamp, context);
        break;
      case PatternType.stealthIn:
        signal = _detectStealthIn(trade, timestamp, context);
        break;
      case PatternType.blackHole:
        signal = _detectBlackHole(trade, timestamp, context);
        break;
      case PatternType.reboundShot:
        signal = _detectReboundShot(trade, timestamp, context);
        break;
    }
    
    if (signal != null) {
      // 🔒 쿨다운 등록
      _updateCooldown(trade.market, patternType, timestamp);
      
      // 🆕 실제 온라인 RSI/MACD 기반 신뢰도 조정
      signal = _adjustSignalConfidence(signal, context);
    }
    
    return signal;
  }

  /// 🔒 쿨다운 체크 (패턴별 개별 쿨다운)
  bool _isInCooldown(String market, PatternType pattern, DateTime timestamp) {
    final cooldownKey = '$market-${pattern.name}';
    final lastTime = _lastSignalTime[cooldownKey];
    if (lastTime == null) return false;
    
    final cooldownDuration = _config.getCooldownDuration(pattern);
    return timestamp.difference(lastTime) < cooldownDuration;
  }
  
  /// 🔒 쿨다운 등록
  void _updateCooldown(String market, PatternType pattern, DateTime timestamp) {
    final cooldownKey = '$market-${pattern.name}';
    _lastSignalTime[cooldownKey] = timestamp;
  }

  /// 🎯 1. Surge 패턴 감지 (온라인 지표 포함)
  Signal? _detectSurge(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 60));
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (priceWindow.length < 2 || volumeWindow.isEmpty) return null;

    final config = _config.getPatternConfig(PatternType.surge);
    final currentPrice = trade.price;
    final prevPrice = priceWindow.values[1];
    final changePercent = prevPrice == 0 ? 0.0 : ((currentPrice - prevPrice) / prevPrice) * 100;
    
    // 기본 조건들
    final zScore = priceWindow.zScore(currentPrice);
    final conditions = [
      changePercent.abs() >= config['priceChangePercent']!,
      zScore.abs() >= config['zScoreThreshold']!,
      volumeWindow.sum >= config['minTradeAmount']!,
    ];
    
    // 🔥 온라인 지표 사용 (O(1) 복잡도)
    final rsi = _metrics.calculateRSI(market: trade.market);
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 고급 지표
    final lv = _metrics.calculateLiquidityVortex(priceWindow, volumeWindow);
    final flashPulse = _metrics.calculateFlashPulse(trade.total, volumeWindow);
    
    final advancedConditions = [
      lv >= config['lvThreshold']!,
      flashPulse > 0,
      // 🆕 온라인 RSI/MACD 조건 추가
      _isValidRSIForDirection(rsi, changePercent),
      macd.histogram.abs() > 0.1, // MACD 모멘텀 체크
    ];
    
    if (!conditions.every((c) => c) || !advancedConditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: currentPrice,
      changePercent: changePercent,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.surge,
      patternDetails: {
        'changePercent': changePercent,
        'zScore': zScore,
        'liquidityVortex': lv,
        'flashPulse': flashPulse,
        'rsi': rsi,
        'macd': macd.macd,
        'macdSignal': macd.signal,
        'macdHistogram': macd.histogram,
        'confidence': 0.8,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 2. FlashFire 패턴 감지 (온라인 지표 포함)
  Signal? _detectFlashFire(Trade trade, DateTime timestamp, MarketDataContext context) {
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    final buyRatioWindow = context.buyRatioWindow;
    
    if (volumeWindow.length < 10 || buyRatioWindow == null) return null;
    
    final config = _config.getPatternConfig(PatternType.flashFire);
    final volumeZScore = volumeWindow.zScore(trade.total);
    final buyRatio = buyRatioWindow.mean;
    
    // 🔥 온라인 RSI 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    
    // 기본 조건들
    final conditions = [
      volumeZScore >= config['zScoreThreshold']!,
      volumeWindow.sum >= config['minTradeAmount']!,
      buyRatio >= config['buyRatioMin']!,
      // 🆕 RSI 오버바잉/오버셀링 방지
      rsi > 20 && rsi < 80,
    ];
    
    // 고급 지표
    final microBurst = _metrics.calculateMicroBurstRadar(trade.total, volumeWindow);
    final machineRush = _metrics.calculateMachineRush(trade.total, volumeWindow.sum);
    
    final advancedConditions = [
      microBurst >= config['mbrThreshold']!,
      machineRush >= config['mrThreshold']!,
    ];
    
    if (!conditions.every((c) => c) || !advancedConditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.flashFire,
      patternDetails: {
        'volumeZScore': volumeZScore,
        'buyRatio': buyRatio,
        'microBurstRadar': microBurst,
        'machineRush': machineRush,
        'rsi': rsi,
        'confidence': 0.85,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 3. StackUp 패턴 감지 (온라인 지표 포함)
  Signal? _detectStackUp(Trade trade, DateTime timestamp, MarketDataContext context) {
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (volumeWindow.length < 4) return null;
    
    final config = _config.getPatternConfig(PatternType.stackUp);
    final consecutiveCount = volumeWindow.consecutiveIncreases;
    final volumeZScore = volumeWindow.zScore(trade.total);
    
    // 🔥 온라인 MACD 체크
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 기본 조건들
    final conditions = [
      consecutiveCount >= config['consecutiveMin']!,
      volumeWindow.sum >= config['minVolume']!,
      volumeZScore >= config['zScoreThreshold']!,
      // 🆕 MACD 상승 모멘텀 체크
      macd.histogram > 0, // MACD 히스토그램 상승
    ];
    
    // 추세 분석
    final slope = volumeWindow.slope;
    final rSquared = volumeWindow.rSquared;
    final trendOk = slope > 0 && rSquared > config['rSquaredMin']!;
    
    if (!conditions.every((c) => c) || !trendOk) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.stackUp,
      patternDetails: {
        'consecutiveCount': consecutiveCount,
        'slope': slope,
        'rSquared': rSquared,
        'volumeZScore': volumeZScore,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.75,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 4. StealthIn 패턴 감지 (완화된 설정 + 온라인 지표)
  Signal? _detectStealthIn(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 300)); // 장기 윈도우 사용
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 300));
    final buyRatioWindow = context.buyRatioWindow;
    final intervalWindow = context.intervalWindow;
    
    if (volumeWindow.length < 15 || buyRatioWindow == null || intervalWindow == null) {
      return null;
    }
    
    final config = _config.getPatternConfig(PatternType.stealthIn);
    final totalAmount = volumeWindow.sum;
    final buyRatio = buyRatioWindow.mean;
    final priceStability = 1.0 - priceWindow.cv; // 변동계수의 역수
    
    // 🔥 온라인 RSI - 중립 구간 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    
    // 🆕 완화된 조건들 + RSI 체크
    final conditions = [
      // "조용히 매집" - 가격 안정성
      priceStability >= 0.95, // CV가 5% 이하
      priceWindow.zScore(trade.price).abs() <= 1.0,
      
      // "꾸준한 매수" - 완화된 임계값들  
      buyRatio >= config['buyRatioMin']!, // 0.6 (기존 0.7에서 완화)
      totalAmount >= config['minTradeAmount']!, // 500만 (기존 2000만에서 완화)
      volumeWindow.length >= config['minTradeCount']!,
      
      // "거래 간격 일정"
      intervalWindow.variance <= config['intervalVarianceMax']!,
      
      // 🆕 RSI 중립 구간 (조용한 매집시 극단값 회피)
      rsi >= 30 && rsi <= 70,
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: totalAmount,
      detectedAt: timestamp,
      patternType: PatternType.stealthIn,
      patternDetails: {
        'totalAmount': totalAmount,
        'buyRatio': buyRatio,
        'priceStability': priceStability,
        'tradeCount': volumeWindow.length,
        'rsi': rsi,
        'confidence': 0.7,
        'enhancement': 'V4.1 - Online + Relaxed Thresholds',
      },
    );
  }

  /// 🎯 5. BlackHole 패턴 감지 (완화된 설정 + 온라인 지표)
  Signal? _detectBlackHole(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 300)); // 장기 윈도우 사용
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 300));
    final buyRatioWindow = context.buyRatioWindow;
    
    if (priceWindow.length < 10 || volumeWindow.length < 10 || buyRatioWindow == null) {
      return null;
    }
    
    final config = _config.getPatternConfig(PatternType.blackHole);
    final totalVolume = volumeWindow.sum;
    final cv = priceWindow.cv;
    final buyRatio = buyRatioWindow.mean;
    
    // 🔥 온라인 MACD - 횡보 구간 체크
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 🆕 완화된 조건들 + MACD 체크
    final conditions = [
      // "엄청난 거래량" - 완화된 임계값
      totalVolume >= config['minTradeAmount']!, // 1000만 (기존 5000만에서 완화)
      
      // "가격 갇힘" - 완화된 변동성 기준
      cv <= config['cvThreshold']!, // 2% (기존 1%에서 완화)
      priceWindow.zScore(trade.price).abs() <= config['priceZScoreMax']!,
      
      // "매수/매도 균형" - 완화된 범위
      buyRatio >= config['buyRatioMin']! && buyRatio <= config['buyRatioMax']!, // 35-65% (기존 40-60%에서 완화)
      
      // 🆕 MACD 횡보 구간 (갇힘 패턴 특성)
      macd.histogram.abs() < 50, // 작은 MACD 히스토그램
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: totalVolume,
      detectedAt: timestamp,
      patternType: PatternType.blackHole,
      patternDetails: {
        'cv': cv,
        'buyRatio': buyRatio,
        'totalVolume': totalVolume,
        'stabilityIndex': 1.0 - cv,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.8,
        'enhancement': 'V4.1 - Online + Relaxed Thresholds',
      },
    );
  }

  /// 🎯 6. ReboundShot 패턴 감지 (온라인 지표 포함)
  Signal? _detectReboundShot(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 60));
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (priceWindow.length < 5) return null;
    
    final config = _config.getPatternConfig(PatternType.reboundShot);
    final prices = priceWindow.values;
    final low = prices.reduce(min);
    final high = prices.reduce(max);
    final recentVolume = volumeWindow.sum;
    
    // 🔥 온라인 RSI - 과매도에서 반등 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // Jump Gate 계산
    final jumpScore = _metrics.calculateJumpGate(trade.price, low, high, trade.total);
    final priceRange = (high - low) / low;
    
    final conditions = [
      // "의미있는 반등 범위"
      priceRange >= config['priceRangeMin']!,
      
      // "점프하는 움직임"
      jumpScore > 0,
      
      // "강력한 매수세"
      recentVolume >= config['minVolume']!,
      
      // 🆕 RSI 과매도에서 반등 or MACD 골든크로스
      (rsi < 35 && trade.price > low * 1.01) || // 과매도 반등
      (macd.histogram > 0 && macd.macd > macd.signal), // MACD 상승
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: ((trade.price - low) / low) * 100,
      volume: trade.volume,
      tradeAmount: recentVolume,
      detectedAt: timestamp,
      patternType: PatternType.reboundShot,
      patternDetails: {
        'jumpScore': jumpScore,
        'priceRange': priceRange,
        'lowPrice': low,
        'highPrice': high,
        'rsi': rsi,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.9,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🆕 실제 온라인 RSI/MACD 기반 신뢰도 조정
  Signal _adjustSignalConfidence(Signal signal, MarketDataContext context) {
    try {
      final priceWindow = context.getPriceWindow(const Duration(seconds: 300));
      if (priceWindow.length < 5) return signal; // 다이버전스 계산 불가
      
      // 🔥 실제 온라인 RSI/MACD 사용한 다이버전스 감지
      final divergence = _metrics.detectDivergence(
        market: signal.market,
        prices: priceWindow.values,
        indicator: [], // 사용 안함 (온라인 RSI 사용)
      );
      
      // 신뢰도 조정
      double confidenceMultiplier = 1.0;
      
      if (signal.changePercent > 0 && divergence.isBearish) {
        // 상승 신호인데 Bearish 다이버전스 → 신뢰도 하락
        confidenceMultiplier = max(0.3, 1.0 - (divergence.strength * 0.5));
      } else if (signal.changePercent < 0 && divergence.isBullish) {
        // 하락 신호인데 Bullish 다이버전스 → 신뢰도 하락
        confidenceMultiplier = max(0.3, 1.0 - (divergence.strength * 0.5));
      } else if ((signal.changePercent > 0 && divergence.isBullish) ||
                 (signal.changePercent < 0 && divergence.isBearish)) {
        // 신호와 다이버전스 방향 일치 → 신뢰도 상승
        confidenceMultiplier = min(1.5, 1.0 + (divergence.strength * 0.3));
      }
      
      // 조정된 신뢰도로 신호 업데이트
      final adjustedDetails = Map<String, dynamic>.from(signal.patternDetails);
      adjustedDetails['originalConfidence'] = adjustedDetails['confidence'];
      adjustedDetails['confidenceMultiplier'] = confidenceMultiplier;
      adjustedDetails['finalConfidence'] = 
          (adjustedDetails['confidence'] as double) * confidenceMultiplier;
      adjustedDetails['divergence'] = {
        'isBullish': divergence.isBullish,
        'isBearish': divergence.isBearish,
        'strength': divergence.strength,
        'source': 'online-rsi', // 온라인 RSI 기반임을 명시
      };
      
      return Signal(
        market: signal.market,
        name: signal.name,
        currentPrice: signal.currentPrice,
        changePercent: signal.changePercent,
        volume: signal.volume,
        tradeAmount: signal.tradeAmount,
        detectedAt: signal.detectedAt,
        patternType: signal.patternType,
        patternDetails: adjustedDetails,
      );
      
    } catch (e) {
      if (kDebugMode) {
        print('Confidence adjustment failed: $e');
      }
      return signal; // 실패시 원본 반환
    }
  }

  /// 🛠️ 헬퍼 함수들

  /// 🆕 온라인 지표 접근자 (Repository에서 사용)
  AdvancedMetrics get metrics => _metrics;

  /// RSI 방향성 검증
  bool _isValidRSIForDirection(double rsi, double changePercent) {
    if (changePercent > 0) {
      // 상승시 RSI 80 이하 (과매수 회피)
      return rsi <= 80;
    } else if (changePercent < 0) {
      // 하락시 RSI 20 이상 (과매도 회피)
      return rsi >= 20;
    }
    return true; // 변화 없으면 통과
  }

  /// 쿨다운 상태 조회
  Map<String, dynamic> getCooldownStatus() {
    final now = DateTime.now();
    final status = <String, dynamic>{};
    
    for (final entry in _lastSignalTime.entries) {
      final parts = entry.key.split('-');
      final market = parts[0];
      final patternName = parts[1];
      
      final pattern = PatternType.values.firstWhere(
        (p) => p.name == patternName,
        orElse: () => PatternType.surge,
      );
      
      final cooldownDuration = _config.getCooldownDuration(pattern);
      final remainingMs = cooldownDuration.inMilliseconds - 
                         now.difference(entry.value).inMilliseconds;
      
      status[entry.key] = {
        'market': market,
        'pattern': patternName,
        'isInCooldown': remainingMs > 0,
        'remainingMs': max(0, remainingMs),
        'cooldownDurationSeconds': cooldownDuration.inSeconds,
      };
    }
    
    return status;
  }

  /// 특정 패턴의 쿨다운 해제 (디버깅용)
  void clearCooldown(String market, PatternType pattern) {
    final cooldownKey = '$market-${pattern.name}';
    _lastSignalTime.remove(cooldownKey);
  }

  /// 모든 쿨다운 해제 (디버깅용)
  void clearAllCooldowns() {
    _lastSignalTime.clear();
  }

  /// 🆕 시스템 헬스 체크 (온라인 지표 포함)
  Map<String, dynamic> getSystemHealth() {
    final metricsHealth = _metrics.getSystemHealth();
    
    return {
      'version': 'V4.1-Online',
      'patternDetector': {
        'activeCooldowns': _lastSignalTime.length,
        'cooldownEntries': getCooldownStatus(),
      },
      'onlineMetrics': metricsHealth,
      'improvements': [
        'Online RSI/MACD Integration',
        'Stream Gap Auto-Recovery',
        'O(1) Indicator Calculation',
        'Real Divergence Detection',
        'Stale Data Prevention',
      ],
    };
  }

  /// 리소스 정리
  void dispose() {
    _lastSignalTime.clear();
    _metrics.dispose();
  }
}\n\n// ====== lib/core/utils/advanced_metrics.dart ======\n
import 'dart:math';
import 'dart:developer' as developer;
import 'rolling_window.dart';

// ==========================================================================
// 🔥 스트림 동기화된 온라인 계산기들
// ==========================================================================

/// 스트림 생명주기와 동기화된 OnlineRSI
class StreamAwareOnlineRSI {
  final int period;
  final Duration maxGap; // 허용 가능한 최대 데이터 간격
  
  final List<double> _prices = [];
  double _avgGain = 0.0;
  double _avgLoss = 0.0;
  bool _isInitialized = false;
  DateTime? _lastUpdate;
  
  StreamAwareOnlineRSI({
    required this.period, 
    this.maxGap = const Duration(seconds: 10),
  });
  
  void update(double price, DateTime timestamp) {
    // 🔥 스트림 끊김 감지 및 자동 리셋
    if (_lastUpdate != null && 
        timestamp.difference(_lastUpdate!).abs() > maxGap) {
      reset();
      if (_prices.isNotEmpty) {
        developer.log('RSI Reset: Stream gap detected (${timestamp.difference(_lastUpdate!).inSeconds}s)', name: 'StreamAwareOnlineRSI');
      }
    }
    
    _lastUpdate = timestamp;
    _prices.add(price);
    
    if (_prices.length < 2) return;
    
    final change = _prices.last - _prices[_prices.length - 2];
    final gain = change > 0 ? change : 0.0;
    final loss = change < 0 ? change.abs() : 0.0;
    
    if (!_isInitialized && _prices.length >= period + 1) {
      // 초기 평균 계산
      double gainSum = 0.0;
      double lossSum = 0.0;
      
      for (int i = 1; i <= period; i++) {
        final ch = _prices[i] - _prices[i - 1];
        if (ch > 0) {
          gainSum += ch;
        } else {
          lossSum += ch.abs();
        }
      }
      
      _avgGain = gainSum / period;
      _avgLoss = lossSum / period;
      _isInitialized = true;
    } else if (_isInitialized) {
      // 지수이동평균 업데이트
      _avgGain = ((_avgGain * (period - 1)) + gain) / period;
      _avgLoss = ((_avgLoss * (period - 1)) + loss) / period;
    }
    
    // 메모리 관리: 최대 period * 2 개의 가격만 유지
    if (_prices.length > period * 2) {
      _prices.removeAt(0);
    }
  }
  
  double get current {
    if (!_isInitialized || _avgLoss == 0) return 50.0;
    
    final rs = _avgGain / _avgLoss;
    return 100.0 - (100.0 / (1.0 + rs));
  }
  
  bool get isReady => _isInitialized;
  bool get isStale => _lastUpdate != null && 
      DateTime.now().difference(_lastUpdate!).abs() > maxGap;
  
  void reset() {
    _prices.clear();
    _avgGain = 0.0;
    _avgLoss = 0.0;
    _isInitialized = false;
    _lastUpdate = null;
  }
  
  /// 건강 상태 체크
  Map<String, dynamic> getHealthStatus() {
    return {
      'isReady': isReady,
      'isStale': isStale,
      'dataPoints': _prices.length,
      'lastUpdate': _lastUpdate?.toIso8601String(),
      'timeSinceLastUpdate': _lastUpdate != null 
          ? DateTime.now().difference(_lastUpdate!).inSeconds 
          : null,
    };
  }
}

/// 스트림 동기화된 OnlineMACD
class StreamAwareOnlineMACD {
  final int fastPeriod;
  final int slowPeriod;
  final int signalPeriod;
  final Duration maxGap;
  
  double _fastEMA = 0.0;
  double _slowEMA = 0.0;
  double _signalEMA = 0.0;
  
  final List<double> _macdHistory = [];
  bool _isInitialized = false;
  int _count = 0;
  DateTime? _lastUpdate;
  
  StreamAwareOnlineMACD({
    this.fastPeriod = 12,
    this.slowPeriod = 26,
    this.signalPeriod = 9,
    this.maxGap = const Duration(seconds: 10),
  });
  
  void update(double price, DateTime timestamp) {
    // 🔥 스트림 끊김 감지 및 자동 리셋
    if (_lastUpdate != null && 
        timestamp.difference(_lastUpdate!).abs() > maxGap) {
      reset();
      developer.log('MACD Reset: Stream gap detected (${timestamp.difference(_lastUpdate!).inSeconds}s)', name: 'StreamAwareOnlineMACD');
    }
    
    _lastUpdate = timestamp;
    _count++;
    
    final fastAlpha = 2.0 / (fastPeriod + 1);
    final slowAlpha = 2.0 / (slowPeriod + 1);
    final signalAlpha = 2.0 / (signalPeriod + 1);
    
    if (_count == 1) {
      _fastEMA = price;
      _slowEMA = price;
    } else {
      _fastEMA = (price * fastAlpha) + (_fastEMA * (1 - fastAlpha));
      _slowEMA = (price * slowAlpha) + (_slowEMA * (1 - slowAlpha));
    }
    
    if (_count >= slowPeriod) {
      final macd = _fastEMA - _slowEMA;
      _macdHistory.add(macd);
      
      if (_macdHistory.length == 1) {
        _signalEMA = macd;
      } else {
        _signalEMA = (macd * signalAlpha) + (_signalEMA * (1 - signalAlpha));
      }
      
      _isInitialized = _macdHistory.length >= signalPeriod;
      
      // 메모리 관리
      if (_macdHistory.length > signalPeriod * 2) {
        _macdHistory.removeAt(0);
      }
    }
  }
  
  double get macd => _count >= slowPeriod ? _fastEMA - _slowEMA : 0.0;
  double get signal => _signalEMA;
  double get histogram => macd - signal;
  bool get isReady => _isInitialized;
  bool get isStale => _lastUpdate != null && 
      DateTime.now().difference(_lastUpdate!).abs() > maxGap;
  
  MACDResult get current => MACDResult(
    macd: macd, 
    signal: signal, 
    histogram: histogram
  );
  
  void reset() {
    _fastEMA = 0.0;
    _slowEMA = 0.0;
    _signalEMA = 0.0;
    _macdHistory.clear();
    _isInitialized = false;
    _count = 0;
    _lastUpdate = null;
  }
  
  /// 건강 상태 체크
  Map<String, dynamic> getHealthStatus() {
    return {
      'isReady': isReady,
      'isStale': isStale,
      'dataPoints': _count,
      'macdHistoryLength': _macdHistory.length,
      'lastUpdate': _lastUpdate?.toIso8601String(),
      'timeSinceLastUpdate': _lastUpdate != null 
          ? DateTime.now().difference(_lastUpdate!).inSeconds 
          : null,
    };
  }
}

// ==========================================================================
// 🔥 완전히 온라인화된 AdvancedMetrics (메인 클래스)
// ==========================================================================

/// 완전히 온라인화된 AdvancedMetrics
/// 
/// 기존 문제점들 해결:
/// 1. ❌ 캐시 키가 부정확 → ✅ 캐시 제거, 온라인 계산
/// 2. ❌ calculateMACD O(n²) → ✅ O(1) 온라인 업데이트
/// 3. ❌ 매번 전체 재계산 → ✅ 새 데이터만 업데이트
/// 4. ❌ 스트림 끊김시 오염 → ✅ 자동 감지 및 리셋
class AdvancedMetrics {
  
  // 🎯 마켓별 온라인 계산기들
  final Map<String, StreamAwareOnlineRSI> _rsiCalculators = {};
  final Map<String, StreamAwareOnlineMACD> _macdCalculators = {};
  final Map<String, DateTime> _lastUpdates = {};
  
  // 🔒 스트림 건강성 관리
  final Duration maxGap;
  final Duration staleThreshold;
  
  AdvancedMetrics({
    this.maxGap = const Duration(seconds: 10),
    this.staleThreshold = const Duration(seconds: 30),
  });

  // ==========================================================================
  // 🔥 메인 업데이트 메서드 (새 데이터만 받아서 O(1) 업데이트)
  // ==========================================================================
  
  /// 새로운 가격 데이터로 모든 지표 업데이트
  void updatePrice({
    required String market,
    required double price,
    required DateTime timestamp,
  }) {
    _lastUpdates[market] = timestamp;
    
    // RSI 업데이트 (O(1))
    _getRSICalculator(market).update(price, timestamp);
    
    // MACD 업데이트 (O(1))
    _getMACDCalculator(market).update(price, timestamp);
  }
  
  /// RSI 계산기 조회/생성
  StreamAwareOnlineRSI _getRSICalculator(String market) {
    return _rsiCalculators.putIfAbsent(
      market, 
      () => StreamAwareOnlineRSI(period: 14, maxGap: maxGap)
    );
  }
  
  /// MACD 계산기 조회/생성
  StreamAwareOnlineMACD _getMACDCalculator(String market) {
    return _macdCalculators.putIfAbsent(
      market,
      () => StreamAwareOnlineMACD(maxGap: maxGap)
    );
  }

  // ==========================================================================
  // 📊 온라인 지표 조회 (O(1) 복잡도 - 즉시 반환)
  // ==========================================================================
  
  /// RSI 조회 (즉시 반환)
  double calculateRSI({
    required String market,
    List<double>? prices, // 하위 호환성용 (사용 안함)
    int period = 14,
  }) {
    final calculator = _rsiCalculators[market];
    if (calculator == null || !calculator.isReady || calculator.isStale) {
      return 50.0; // 기본값
    }
    return calculator.current;
  }
  
  /// MACD 조회 (즉시 반환)
  MACDResult calculateMACD({
    required String market,
    List<double>? prices, // 하위 호환성용 (사용 안함)
    int fastPeriod = 12,
    int slowPeriod = 26,
    int signalPeriod = 9,
  }) {
    final calculator = _macdCalculators[market];
    if (calculator == null || !calculator.isReady || calculator.isStale) {
      return const MACDResult(macd: 0.0, signal: 0.0, histogram: 0.0);
    }
    return calculator.current;
  }
  
  /// 🆕 다이버전스 감지 (온라인 RSI 기반)
  DivergenceResult detectDivergence({
    required String market,
    required List<double> prices,
    required List<double> indicator, // 사용 안함 (온라인 RSI 사용)
    int lookback = 5,
  }) {
    final rsiCalculator = _rsiCalculators[market];
    
    if (rsiCalculator == null || 
        !rsiCalculator.isReady || 
        prices.length < lookback) {
      return const DivergenceResult(
        isBullish: false,
        isBearish: false,
        strength: 0.0,
      );
    }
    
    // 🔥 실제 온라인 RSI 사용
    final currentRSI = rsiCalculator.current;
    final recentPrices = prices.take(lookback).toList();
    
    return _calculateDivergence(recentPrices, currentRSI);
  }
  
  /// 다이버전스 계산 (단순화된 버전)
  DivergenceResult _calculateDivergence(List<double> prices, double currentRSI) {
    if (prices.length < 2) {
      return const DivergenceResult(
        isBullish: false,
        isBearish: false, 
        strength: 0.0,
      );
    }
    
    final priceSlope = _calculateSlope(prices);
    
    bool isBullish = false;
    bool isBearish = false;
    double strength = 0.0;
    
    // 다이버전스 감지
    if (priceSlope < -0.1 && currentRSI > 50) {
      // 가격 하락 + RSI 높음 → Bullish Divergence 가능성
      isBullish = true;
      strength = min(1.0, (currentRSI - 50) / 50);
    } else if (priceSlope > 0.1 && currentRSI < 50) {
      // 가격 상승 + RSI 낮음 → Bearish Divergence 가능성
      isBearish = true;
      strength = min(1.0, (50 - currentRSI) / 50);
    }
    
    return DivergenceResult(
      isBullish: isBullish,
      isBearish: isBearish,
      strength: strength,
    );
  }

  // ==========================================================================
  // 🎯 커스텀 지표들 (기존 방식 유지)
  // ==========================================================================
  
  /// Liquidity Vortex 계산
  double calculateLiquidityVortex(
    RollingWindow<double> priceWindow,
    RollingWindow<double> volumeWindow,
  ) {
    if (priceWindow.length < 3 || volumeWindow.length < 3) return 0.0;
    
    final priceAccel = _calculateSecondDerivative(priceWindow.values);
    final volumeAccel = _calculateSecondDerivative(volumeWindow.values);
    final cps = priceWindow.length / priceWindow.span.inSeconds;
    
    return (priceAccel * volumeAccel * cps).abs();
  }
  
  /// Flash Pulse 계산
  double calculateFlashPulse(double currentVolume, RollingWindow<double> volumeWindow) {
    if (volumeWindow.length < 10) return 0.0;
    
    final recentVolumes = volumeWindow.values.take(10).toList();
    final ema = _calculateEMA(recentVolumes, 10);
    
    return currentVolume / max(ema, 1.0) - 1.0;
  }
  
  /// Micro Burst Radar 계산
  double calculateMicroBurstRadar(double currentVolume, RollingWindow<double> volumeWindow) {
    if (volumeWindow.length < 3) return 0.0;
    
    final recentVolumes = volumeWindow.values.take(3).toList();
    final mean = recentVolumes.reduce((a, b) => a + b) / recentVolumes.length;
    final variance = recentVolumes
        .map((v) => pow(v - mean, 2))
        .reduce((a, b) => a + b) / recentVolumes.length;
    final stdDev = sqrt(variance);
    
    if (stdDev == 0) return 0.0;
    
    return (currentVolume - mean) / stdDev;
  }
  
  /// Machine Rush 계산
  double calculateMachineRush(double currentVolume, double totalVolume) {
    if (totalVolume == 0) return 0.0;
    return currentVolume / totalVolume;
  }
  
  /// Jump Gate 계산
  double calculateJumpGate(double currentPrice, double low, double high, double volume) {
    if (high <= low) return 0.0;
    
    final pricePosition = (currentPrice - low) / (high - low);
    final volumeWeight = log(volume + 1) / 10.0;
    
    return pricePosition * volumeWeight;
  }

  /// ATR 계산 (기존 방식 유지)
  double calculateATR({
    required List<double> highs,
    required List<double> lows,
    required List<double> closes,
    int period = 14,
  }) {
    if (highs.length < period || lows.length < period || closes.length < period) {
      return 0.0;
    }
    
    final trueRanges = <double>[];
    
    for (int i = 1; i < closes.length; i++) {
      final high = highs[i];
      final low = lows[i];
      final prevClose = closes[i - 1];
      
      final tr1 = high - low;
      final tr2 = (high - prevClose).abs();
      final tr3 = (low - prevClose).abs();
      
      trueRanges.add(max(tr1, max(tr2, tr3)));
    }
    
    if (trueRanges.length < period) return 0.0;
    
    // 첫 번째 ATR은 단순 평균
    double atr = trueRanges.take(period).reduce((a, b) => a + b) / period;
    
    // 이후는 지수이동평균
    for (int i = period; i < trueRanges.length; i++) {
      atr = ((atr * (period - 1)) + trueRanges[i]) / period;
    }
    
    return atr;
  }

  // ==========================================================================
  // 🛠️ 헬퍼 함수들
  // ==========================================================================
  
  /// EMA 계산
  double _calculateEMA(List<double> values, int period) {
    if (values.isEmpty) return 0.0;
    if (values.length == 1) return values.first;
    
    final alpha = 2.0 / (period + 1);
    double ema = values.first;
    
    for (int i = 1; i < values.length; i++) {
      ema = (values[i] * alpha) + (ema * (1 - alpha));
    }
    
    return ema;
  }
  
  /// 2차 미분 계산
  double _calculateSecondDerivative(List<double> values) {
    if (values.length < 3) return 0.0;
    
    final recent = values.take(3).toList();
    return recent[0] - (2 * recent[1]) + recent[2];
  }
  
  /// 선형 회귀 기울기 계산
  double _calculateSlope(List<double> values) {
    if (values.length < 2) return 0.0;
    
    final n = values.length;
    double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
    
    for (int i = 0; i < n; i++) {
      sumX += i;
      sumY += values[i];
      sumXY += i * values[i];
      sumX2 += i * i;
    }
    
    final denominator = n * sumX2 - sumX * sumX;
    if (denominator == 0) return 0.0;
    
    return (n * sumXY - sumX * sumY) / denominator;
  }

  /// 동적 임계값 계산 (ATR 기반)
  double calculateDynamicThreshold({
    required double baseThreshold,
    required double atr,
    required double priceAverage,
    double multiplier = 1.0,
  }) {
    if (priceAverage == 0) return baseThreshold;
    
    final atrPercent = (atr / priceAverage) * 100;
    final volatilityFactor = max(0.5, min(2.0, atrPercent / baseThreshold));
    
    return baseThreshold * volatilityFactor * multiplier;
  }

  // ==========================================================================
  // 🔍 시스템 헬스 및 관리
  // ==========================================================================
  
  /// 전체 시스템 헬스 체크
  Map<String, dynamic> getSystemHealth() {
    final now = DateTime.now();
    final healthStatus = <String, dynamic>{
      'totalMarkets': _rsiCalculators.length,
      'staleMarkets': 0,
      'healthyMarkets': 0,
      'markets': <String, dynamic>{},
    };
    
    for (final market in _rsiCalculators.keys) {
      final rsiHealth = _rsiCalculators[market]?.getHealthStatus();
      final macdHealth = _macdCalculators[market]?.getHealthStatus();
      final lastUpdate = _lastUpdates[market];
      
      final isStale = lastUpdate != null && 
          now.difference(lastUpdate).abs() > staleThreshold;
      
      if (isStale) {
        healthStatus['staleMarkets']++;
      } else {
        healthStatus['healthyMarkets']++;
      }
      
      healthStatus['markets'][market] = {
        'rsi': rsiHealth,
        'macd': macdHealth,
        'isStale': isStale,
        'lastUpdate': lastUpdate?.toIso8601String(),
      };
    }
    
    return healthStatus;
  }
  
  /// 오래된 계산기들 정리
  void cleanup() {
    final now = DateTime.now();
    final marketsToRemove = <String>[];
    
    for (final entry in _lastUpdates.entries) {
      if (now.difference(entry.value).abs() > const Duration(hours: 1)) {
        marketsToRemove.add(entry.key);
      }
    }
    
    for (final market in marketsToRemove) {
      _rsiCalculators.remove(market);
      _macdCalculators.remove(market);
      _lastUpdates.remove(market);
    }
    
    if (marketsToRemove.isNotEmpty) {
      developer.log('AdvancedMetrics: Cleaned up ${marketsToRemove.length} stale market calculators', name: 'AdvancedMetrics');
    }
  }
  
  /// 특정 마켓 리셋
  void resetMarket(String market) {
    _rsiCalculators[market]?.reset();
    _macdCalculators[market]?.reset();
    _lastUpdates.remove(market);
  }
  
  /// 전체 리셋
  void resetAll() {
    for (final calculator in _rsiCalculators.values) {
      calculator.reset();
    }
    for (final calculator in _macdCalculators.values) {
      calculator.reset();
    }
    _lastUpdates.clear();
  }
  
  /// 캐시 정리 (하위 호환성용 - 실제로는 빈 구현)
  void clearCache() {
    // 온라인 계산에서는 캐시가 없으므로 빈 구현
  }
  
  /// 만료된 캐시 정리 (하위 호환성용 - 실제로는 cleanup 호출)
  void cleanupExpiredCache() {
    cleanup();
  }
  
  /// 캐시 통계 (하위 호환성용)
  Map<String, dynamic> getCacheStats() {
    return {
      'mode': 'online',
      'totalMarkets': _rsiCalculators.length,
      'healthyMarkets': getSystemHealth()['healthyMarkets'],
      'staleMarkets': getSystemHealth()['staleMarkets'],
    };
  }
  
  /// 리소스 정리
  void dispose() {
    _rsiCalculators.clear();
    _macdCalculators.clear();
    _lastUpdates.clear();
  }
}

// ==========================================================================
// 📊 결과 클래스들
// ==========================================================================

/// MACD 계산 결과
class MACDResult {
  final double macd;
  final double signal;
  final double histogram;
  
  const MACDResult({
    required this.macd,
    required this.signal,
    required this.histogram,
  });
  
  @override
  String toString() => 'MACD(macd: $macd, signal: $signal, histogram: $histogram)';
}

/// 다이버전스 감지 결과
class DivergenceResult {
  final bool isBullish;
  final bool isBearish;
  final double strength;
  
  const DivergenceResult({
    required this.isBullish,
    required this.isBearish,
    required this.strength,
  });
  
  bool get hasAnyDivergence => isBullish || isBearish;
  
  @override
  String toString() => 'Divergence(bullish: $isBullish, bearish: $isBearish, strength: $strength)';
}

// ==========================================================================
// 🔢 온라인 지표 계산기들 (하위 호환성용 - 실제로는 위의 StreamAware 버전 사용)
// ==========================================================================

/// 온라인 RSI 계산기 (하위 호환성)
typedef OnlineRSI = StreamAwareOnlineRSI;

/// 온라인 MACD 계산기 (하위 호환성)
typedef OnlineMACD = StreamAwareOnlineMACD;\n\n// ====== lib/core/utils/rolling_window.dart ======\n
import 'dart:collection';
import 'dart:math' as math;

/// 타임스탬프 기반 데이터 엔트리
class _Item<T extends num> {
  final T value;
  final DateTime timestamp;
  
  _Item(this.value, this.timestamp);
}

/// 🚀 O(1) 시간 복잡도로 완전 최적화된 슬라이딩 윈도우
/// 모든 통계 지표를 O(1)로 계산 (rSquared 포함)
class RollingWindow<T extends num> {
  final Duration span;
  final Queue<_Item<T>> _queue = Queue<_Item<T>>();
  
  // ==========================================================================
  // 📊 O(1) 계산을 위한 누적 변수들 (Complete Set)
  // ==========================================================================
  
  // 기본 통계용
  double _sum = 0.0;          // Σy
  double _sumSq = 0.0;        // Σy² (분산용)
  
  // 연속 증가 추적용
  int _incStreak = 0;
  T? _lastValue;
  
  // 선형 회귀 + rSquared O(1) 계산을 위한 완전한 5변수 세트
  double _sx = 0.0;           // Σx (시간)
  double _sy = 0.0;           // Σy (값) - _sum과 동일하지만 명확성을 위해 유지
  double _sxx = 0.0;          // Σx²
  double _sxy = 0.0;          // Σxy
  double _syy = 0.0;          // Σy² - _sumSq와 동일하지만 회귀용으로 명시적 관리
  
  RollingWindow({required this.span});

  // ==========================================================================
  // 📥 데이터 추가 (모든 누적값 실시간 업데이트)
  // ==========================================================================
  
  /// 새 데이터 추가 (모든 누적값 즉시 업데이트)
  void add(T value, {DateTime? timestamp}) {
    final now = timestamp ?? DateTime.now();
    _evictOld(now); // 오래된 데이터 먼저 제거
    
    // 새 데이터 추가
    _queue.addLast(_Item(value, now));
    
    // 🔥 핵심: 모든 누적값을 O(1)으로 실시간 업데이트
    final x = now.millisecondsSinceEpoch.toDouble();
    final y = value.toDouble();
    
    _sum += y;
    _sumSq += y * y;
    
    // 선형 회귀 + rSquared용 완전한 5변수 업데이트
    _sx += x;
    _sy += y;      // _sum과 동일하지만 명확성을 위해
    _sxx += x * x;
    _sxy += x * y;
    _syy += y * y; // _sumSq와 동일하지만 명확성을 위해
    
    // 연속 증가 추적 (개선된 로직)
    if (length > 1 && _lastValue != null && value > _lastValue!) {
      _incStreak++;
    } else {
      _incStreak = (length == 1) ? 1 : 0; // 첫 번째 데이터면 1, 아니면 초기화
    }
    _lastValue = value;
  }

  // ==========================================================================
  // 🗑️ 데이터 제거 (모든 누적값 실시간 차감)
  // ==========================================================================
  
  /// 오래된 데이터 제거 (모든 누적값 즉시 차감)
  void _evictOld(DateTime now) {
    final cutoff = now.subtract(span);
    
    while (_queue.isNotEmpty && _queue.first.timestamp.isBefore(cutoff)) {
      final old = _queue.removeFirst();
      
      // 🔥 핵심: 모든 누적값을 O(1)으로 실시간 차감
      final oldX = old.timestamp.millisecondsSinceEpoch.toDouble();
      final oldY = old.value.toDouble();
      
      _sum -= oldY;
      _sumSq -= oldY * oldY;
      
      // 선형 회귀 + rSquared용 완전한 5변수 차감
      _sx -= oldX;
      _sy -= oldY;
      _sxx -= oldX * oldX;
      _sxy -= oldX * oldY;
      _syy -= oldY * oldY;
    }
    
    // 연속 증가 카운트 재계산 (제거 후 필요시)
    _recalculateConsecutiveIncreases();
  }
  
  /// 연속 증가 카운트 재계산 (데이터 제거 후 필요시)
  void _recalculateConsecutiveIncreases() {
    if (_queue.length < 2) {
      _incStreak = _queue.length;
      return;
    }
    
    _incStreak = 1;
    final values = _queue.map((item) => item.value).toList();
    
    for (int i = values.length - 2; i >= 0; i--) {
      if (values[i + 1] > values[i]) {
        _incStreak++;
      } else {
        break;
      }
    }
  }

  // ==========================================================================
  // 📊 O(1)으로 계산되는 모든 통계 지표들
  // ==========================================================================
  
  // 기본 정보
  int get length => _queue.length;
  bool get isEmpty => _queue.isEmpty;
  bool get isNotEmpty => _queue.isNotEmpty;
  
  // 기본 통계 (O(1))
  double get sum => _sum;
  double get mean => isEmpty ? 0.0 : _sum / length;
  
  double get variance {
    if (length < 2) return 0.0;
    // 베셀 보정된 표본 분산: s² = (Σy² - n*μ²) / (n-1)
    final meanVal = mean;
    final sampleVariance = (_sumSq - length * meanVal * meanVal) / (length - 1);
    return math.max(0.0, sampleVariance); // 음수 방지
  }
  
  double get stdev => math.sqrt(variance);
  
  int get consecutiveIncreases => _incStreak;
  
  double zScore(num x) {
    final sd = stdev;
    return sd == 0 ? 0.0 : (x - mean) / sd;
  }
  
  double get cv {
    final meanVal = mean;
    return meanVal == 0 ? 0.0 : stdev / meanVal.abs();
  }
  
  // ==========================================================================
  // 🚀 선형 회귀 지표들 (O(1) - 5변수 공식 활용)
  // ==========================================================================
  
  /// 선형 회귀 기울기 (O(1))
  double get slope {
    final n = length;
    if (n < 2) return 0.0;
    
    final denominator = n * _sxx - _sx * _sx;
    return denominator == 0 ? 0.0 : (n * _sxy - _sx * _sy) / denominator;
  }
  
  /// 🎯 결정계수 R² (O(1) 완전 최적화!)
  /// 공식: R² = (n*Σxy - Σx*Σy)² / [(n*Σx² - (Σx)²) * (n*Σy² - (Σy)²)]
  double get rSquared {
    final n = length;
    if (n < 2) return 0.0;
    
    try {
      final numerator = n * _sxy - _sx * _sy;
      final denomX = n * _sxx - _sx * _sx;
      final denomY = n * _syy - _sy * _sy;
      final denominator = denomX * denomY;
      
      if (denominator <= 0) return 0.0;
      
      final rSquaredValue = (numerator * numerator) / denominator;
      return math.max(0.0, math.min(1.0, rSquaredValue)); // [0, 1] 범위 보장
    } catch (e) {
      return 0.0; // 계산 오류 시 안전값 반환
    }
  }
  
  /// 선형 회귀 절편 (O(1))
  double get intercept {
    final n = length;
    if (n < 2) return mean;
    
    final xMean = _sx / n;
    final yMean = _sy / n;
    return yMean - slope * xMean;
  }
  
  /// 선형 회귀 상관계수 (O(1))
  double get correlation {
    return math.sqrt(rSquared) * (slope >= 0 ? 1 : -1);
  }

  // ==========================================================================
  // 📋 데이터 접근 (필요시 사용, O(n)일 수 있음)
  // ==========================================================================
  
  List<T> get values => _queue.map((e) => e.value).toList();
  Iterable<DateTime> get timestamps => _queue.map((e) => e.timestamp);
  
  /// 최신 값
  T? get latest => _queue.isNotEmpty ? _queue.last.value : null;
  
  /// 가장 오래된 값
  T? get oldest => _queue.isNotEmpty ? _queue.first.value : null;
  
  /// 최대값 (O(n) - 캐싱 가능하지만 복잡도 증가로 현재는 단순 구현)
  T get max => _queue.isEmpty ? 0 as T : _queue.map((e) => e.value).reduce(math.max);
  
  /// 최소값 (O(n) - 캐싱 가능하지만 복잡도 증가로 현재는 단순 구현)
  T get min => _queue.isEmpty ? 0 as T : _queue.map((e) => e.value).reduce(math.min);

  // ==========================================================================
  // 🛠️ 유틸리티 메서드들
  // ==========================================================================
  
  /// 윈도우 데이터 모두 제거
  void clear() {
    _queue.clear();
    _sum = 0.0;
    _sumSq = 0.0;
    _incStreak = 0;
    _lastValue = null;
    _sx = 0.0;
    _sy = 0.0;
    _sxx = 0.0;
    _sxy = 0.0;
    _syy = 0.0;
  }
  
  /// 특정 시점까지의 데이터 강제 제거
  void evictBefore(DateTime cutoff) {
    while (_queue.isNotEmpty && _queue.first.timestamp.isBefore(cutoff)) {
      final old = _queue.removeFirst();
      
      final oldX = old.timestamp.millisecondsSinceEpoch.toDouble();
      final oldY = old.value.toDouble();
      
      _sum -= oldY;
      _sumSq -= oldY * oldY;
      _sx -= oldX;
      _sy -= oldY;
      _sxx -= oldX * oldX;
      _sxy -= oldX * oldY;
      _syy -= oldY * oldY;
    }
    
    _recalculateConsecutiveIncreases();
  }
  
  /// 윈도우 상태 정보 (디버깅용)
  Map<String, dynamic> get debugInfo => const <String, dynamic>{
    'performance': 'All O(1) optimized',
  }..addAll({
    'length': length,
    'span': '${span.inSeconds}s',
    'sum': _sum,
    'mean': mean,
    'stdev': stdev,
    'variance': variance,
    'cv': cv,
    'slope': slope,
    'rSquared': rSquared,
    'correlation': correlation,
    'consecutiveIncreases': consecutiveIncreases,
    'regressionVariables': <String, double>{
      'sx': _sx,
      'sy': _sy,
      'sxx': _sxx,
      'sxy': _sxy,
      'syy': _syy,
    },
  });
  
  /// 성능 검증 (모든 지표가 O(1)인지 확인)
  Map<String, String> get performanceProfile => const <String, String>{
    'basic_stats': 'O(1) - sum, mean, variance, stdev, cv',
    'regression': 'O(1) - slope, rSquared, intercept, correlation',
    'streak': 'O(1) - consecutiveIncreases',
    'z_score': 'O(1) - zScore calculation',
    'data_access': 'O(n) - values, timestamps, min, max (acceptable)',
    'overall': 'Fully optimized for real-time streaming',
  };
  
  @override
  String toString() {
    return 'RollingWindow(length: $length, span: ${span.inSeconds}s, '
           'mean: ${mean.toStringAsFixed(2)}, R²: ${rSquared.toStringAsFixed(3)})';
  }
}\n\n// ====== lib/core/utils/streaming_market_buffer.dart ======\n
\n\n// ====== lib/core/utils/app_life_cycle_manager.dart ======\n
// lib/core/utils/app_life_cycle_manager.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../utils/logger.dart';

/// 앱 라이프사이클과 주기적인 작업을 관리합니다.
/// 🎯 Hive Box는 백그라운드에서도 유지 (닫지 않음)
/// 🆕 외부 접근을 위한 풀 기능 API 제공
class AppLifecycleManager extends WidgetsBindingObserver {
  final Ref ref;
  Timer? _globalTimer;
  
  // 🆕 외부 접근을 위한 상태 관리
  DateTime? _appStartTime;
  DateTime? _lastResumeTime;
  DateTime? _lastPauseTime;
  int _resumeCount = 0;
  int _pauseCount = 0;
  Duration _totalForegroundTime = Duration.zero;
  Duration _totalBackgroundTime = Duration.zero;
  AppLifecycleState _currentState = AppLifecycleState.resumed;
  
  // 🆕 라이프사이클 리스너들
  final List<void Function(AppLifecycleState)> _lifecycleListeners = [];
  
  // 🆕 성능 통계
  final Map<String, dynamic> _performanceStats = {};

  AppLifecycleManager(this.ref) {
    _appStartTime = DateTime.now();
    _lastResumeTime = _appStartTime;
    WidgetsBinding.instance.addObserver(this);
    _startGlobalTimer();
    log.i('🎬 AppLifecycleManager 초기화 완료');
  }

  // ══════════════════════════════════════════════════════════
  // 🆕 외부 접근 API들
  // ══════════════════════════════════════════════════════════

  /// 🆕 현재 앱 상태 조회
  AppLifecycleState get currentState => _currentState;

  /// 🆕 앱 시작 시간
  DateTime? get appStartTime => _appStartTime;

  /// 🆕 앱 가동 시간 (업타임)
  Duration get uptime {
    if (_appStartTime == null) return Duration.zero;
    return DateTime.now().difference(_appStartTime!);
  }

  /// 🆕 포그라운드 총 시간
  Duration get totalForegroundTime {
    var total = _totalForegroundTime;
    if (_currentState == AppLifecycleState.resumed && _lastResumeTime != null) {
      total += DateTime.now().difference(_lastResumeTime!);
    }
    return total;
  }

  /// 🆕 백그라운드 총 시간
  Duration get totalBackgroundTime {
    var total = _totalBackgroundTime;
    if (_currentState == AppLifecycleState.paused && _lastPauseTime != null) {
      total += DateTime.now().difference(_lastPauseTime!);
    }
    return total;
  }

  /// 🆕 이벤트 카운터들
  int get resumeCount => _resumeCount;
  int get pauseCount => _pauseCount;

  /// 🆕 마지막 상태 변경 시간
  DateTime? get lastStateChangeTime {
    switch (_currentState) {
      case AppLifecycleState.resumed:
        return _lastResumeTime;
      case AppLifecycleState.paused:
        return _lastPauseTime;
      default:
        return null;
    }
  }

  /// 🆕 라이프사이클 리스너 추가
  void addLifecycleListener(void Function(AppLifecycleState) listener) {
    _lifecycleListeners.add(listener);
    log.d('🎧 라이프사이클 리스너 추가됨 (총 ${_lifecycleListeners.length}개)');
  }

  /// 🆕 라이프사이클 리스너 제거
  void removeLifecycleListener(void Function(AppLifecycleState) listener) {
    _lifecycleListeners.remove(listener);
    log.d('🎧 라이프사이클 리스너 제거됨 (총 ${_lifecycleListeners.length}개)');
  }

  /// 🆕 수동 새로고침/정리 작업 강제 실행
  void forceRefresh() {
    log.i('🔄 수동 새로고침 실행');
    _performPeriodicTasks();
  }

  /// 🆕 메모리 정리 강제 실행
  void forceCleanup() {
    log.i('🧹 수동 메모리 정리 실행');
    _performMemoryCleanup();
  }

  /// 🆕 성능 통계 업데이트
  void updatePerformanceStats(String key, dynamic value) {
    _performanceStats[key] = value;
    _performanceStats['lastUpdated'] = DateTime.now().toIso8601String();
  }

  /// 🆕 메모리 상태 조회
  Map<String, dynamic> getMemoryStats() {
    return {
      'uptime': uptime.toString(),
      'foregroundTime': totalForegroundTime.toString(),
      'backgroundTime': totalBackgroundTime.toString(),
      'resumeCount': resumeCount,
      'pauseCount': pauseCount,
      'currentState': _currentState.name,
      'lastStateChange': lastStateChangeTime?.toIso8601String(),
      'platformMemoryUsage': _getPlatformMemoryInfo(),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }

  /// 🆕 성능 통계 조회
  Map<String, dynamic> getPerformanceStats() {
    return Map.from(_performanceStats)
      ..addAll({
        'uptime': uptime.inSeconds,
        'foregroundTimeSeconds': totalForegroundTime.inSeconds,
        'backgroundTimeSeconds': totalBackgroundTime.inSeconds,
        'resumeCount': resumeCount,
        'pauseCount': pauseCount,
        'currentState': _currentState.name,
      });
  }

  /// 🆕 전체 시스템 상태 조회 (디버깅용)
  Map<String, dynamic> getSystemStatus() {
    return {
      'app': getMemoryStats(),
      'performance': getPerformanceStats(),
      'platform': {
        'os': Platform.operatingSystem,
        'version': Platform.operatingSystemVersion,
        'locale': Platform.localeName,
      },
      'listeners': {
        'lifecycleListeners': _lifecycleListeners.length,
      },
      'timers': {
        'globalTimerActive': _globalTimer?.isActive ?? false,
      },
    };
  }

  // ══════════════════════════════════════════════════════════
  // 기존 내부 로직들
  // ══════════════════════════════════════════════════════════

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    final previousState = _currentState;
    _currentState = state;
    
    _updateStateTimes(previousState, state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        log.i('➡️ 앱이 포그라운드로 돌아왔습니다.');
        _resumeCount++;
        _lastResumeTime = DateTime.now();
        _startGlobalTimer();
        _onAppResumed();
        break;
        
      case AppLifecycleState.paused:
        log.i('⏸️ 앱이 백그라운드로 이동했습니다.');
        _pauseCount++;
        _lastPauseTime = DateTime.now();
        _stopGlobalTimer();
        _onAppPaused();
        break;
        
      case AppLifecycleState.detached:
        log.i('🔚 앱이 종료되었습니다.');
        _onAppDetached();
        break;
        
      case AppLifecycleState.inactive:
        log.d('😴 앱이 비활성 상태입니다.');
        break;
        
      case AppLifecycleState.hidden:
        log.d('🫥 앱이 숨김 상태입니다.');
        break;
    }
    
    // 🆕 외부 리스너들에게 알림
    _notifyLifecycleListeners(state);
  }

  /// 🆕 상태 전환 시간 업데이트
  void _updateStateTimes(AppLifecycleState from, AppLifecycleState to) {
    final now = DateTime.now();
    
    if (from == AppLifecycleState.resumed && _lastResumeTime != null) {
      _totalForegroundTime += now.difference(_lastResumeTime!);
    } else if (from == AppLifecycleState.paused && _lastPauseTime != null) {
      _totalBackgroundTime += now.difference(_lastPauseTime!);
    }
  }

  /// 🆕 라이프사이클 리스너들에게 알림
  void _notifyLifecycleListeners(AppLifecycleState state) {
    for (final listener in _lifecycleListeners) {
      try {
        listener(state);
      } catch (e, st) {
        log.e('라이프사이클 리스너 실행 중 오류', e, st);
      }
    }
  }

  /// 전역 타이머 시작
  void _startGlobalTimer() {
    if (_globalTimer == null || !_globalTimer!.isActive) {
      _globalTimer = Timer.periodic(const Duration(seconds: 30), (_) {
        _performPeriodicTasks();
      });
      log.i('⏰ 전역 타이머 시작: 30초 간격');
    }
  }

  /// 전역 타이머 중지
  void _stopGlobalTimer() {
    _globalTimer?.cancel();
    _globalTimer = null;
    log.d('⏹️ 전역 타이머 중지');
  }

  /// 주기적 작업 실행
  void _performPeriodicTasks() {
    log.d('🔄 전역 타이머: 주기적 작업 실행');
    
    // 여기에 주기적으로 실행할 작업들 추가
    // 예: 메모리 정리, 상태 체크, 백그라운드 동기화 등
    
    // 예시: 메모리 사용량 체크 (디버그 모드에서만)
    _checkMemoryUsage();
    
    // 🆕 성능 통계 업데이트
    updatePerformanceStats('lastPeriodicTaskRun', DateTime.now().toIso8601String());
  }

  /// 앱이 포그라운드로 돌아왔을 때
  void _onAppResumed() {
    log.i('📦 Hive Box 유지 - 백그라운드에서도 데이터 보존됨');
    
    // 포그라운드 복귀 시 필요한 작업들
    // 예: 연결 상태 확인, 데이터 새로고침 등
  }

  /// 앱이 백그라운드로 이동했을 때
  void _onAppPaused() {
    log.i('💾 백그라운드 진입 - 중요 데이터 보존 중');
    
    // 백그라운드 진입 시 필요한 작업들
    // 예: 임시 데이터 저장, 연결 정리 등
  }

  /// 앱이 완전히 종료될 때
  void _onAppDetached() {
    log.i('🧹 앱 종료 - 최종 정리 작업 수행');
    dispose();
  }

  /// 메모리 사용량 체크 (디버그용)
  void _checkMemoryUsage() {
    // 실제 구현은 플랫폼별로 다를 수 있음
    log.d('🧠 메모리 상태 체크 (개발 중)');
    
    // 🆕 플랫폼별 메모리 정보 수집
    final memInfo = _getPlatformMemoryInfo();
    updatePerformanceStats('memoryInfo', memInfo);
  }

  /// 🆕 메모리 정리 실행
  void _performMemoryCleanup() {
    // 실제 메모리 정리 로직
    log.i('🧹 메모리 정리 실행');
    
    // 예시: 가비지 컬렉션 강제 실행 (Dart에서는 제한적)
    // System.gc() 같은 것은 없지만, 불필요한 참조 정리 등을 할 수 있음
  }

  /// 🆕 플랫폼별 메모리 정보 수집
  Map<String, dynamic> _getPlatformMemoryInfo() {
    try {
      return {
        'platform': Platform.operatingSystem,
        'availableProcessors': Platform.numberOfProcessors,
        'timestamp': DateTime.now().toIso8601String(),
        // 실제 메모리 정보는 플랫폼 채널을 통해 구현 가능
        'note': 'Platform memory info implementation needed'
      };
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  /// 정리 작업
  void dispose() {
    _stopGlobalTimer();
    WidgetsBinding.instance.removeObserver(this);
    _lifecycleListeners.clear();
    log.i('🧹 AppLifecycleManager 정리 완료');
  }
}

/// AppLifecycleManager 프로바이더
final appLifecycleManagerProvider = Provider<AppLifecycleManager>((ref) {
  final manager = AppLifecycleManager(ref);
  ref.onDispose(() => manager.dispose());
  return manager;
});\n\n// ====== lib/core/utils/streaming_stats.dart ======\n
\n\n// ====== lib/core/utils/market_data_context.dart ======\n
import 'rolling_window.dart';
import 'advanced_metrics.dart';

/// 🎯 MarketDataContext - 마켓 데이터 통합 관리
/// 
/// V4.1 개선사항:
/// - 9개 파라미터 → 1개 객체로 단순화
/// - 타임프레임별 윈도우 관리
/// - 🆕 온라인 지표 연동 지원
/// - 메모리 효율적인 윈도우 관리
/// - 데이터 무결성 보장
class MarketDataContext {
  final String market;
  
  // 📊 멀티 타임프레임 가격 윈도우
  final Map<Duration, RollingWindow<double>> _priceWindows = {};
  
  // 📊 멀티 타임프레임 거래량 윈도우
  final Map<Duration, RollingWindow<double>> _volumeWindows = {};
  
  // 📊 보조 지표 윈도우들
  final RollingWindow<double>? buyRatioWindow;
  final RollingWindow<double>? intervalWindow;
  
  /// 생성자
  MarketDataContext({
    required this.market,
    required Map<Duration, RollingWindow<double>> priceWindows,
    required Map<Duration, RollingWindow<double>> volumeWindows,
    this.buyRatioWindow,
    this.intervalWindow,
  }) {
    _priceWindows.addAll(priceWindows);
    _volumeWindows.addAll(volumeWindows);
    
    // 데이터 무결성 검사
    _validateWindows();
  }

  /// 🏗️ 팩토리 생성자 - 표준 타임프레임으로 생성
  factory MarketDataContext.standard({
    required String market,
    required RollingWindow<double> priceWindow30s,
    required RollingWindow<double> priceWindow60s,
    required RollingWindow<double> priceWindow300s,
    required RollingWindow<double> volumeWindow30s,
    required RollingWindow<double> volumeWindow60s,
    required RollingWindow<double> volumeWindow300s,
    RollingWindow<double>? buyRatioWindow,
    RollingWindow<double>? intervalWindow,
  }) {
    return MarketDataContext(
      market: market,
      priceWindows: {
        const Duration(seconds: 30): priceWindow30s,
        const Duration(seconds: 60): priceWindow60s,
        const Duration(seconds: 300): priceWindow300s,
      },
      volumeWindows: {
        const Duration(seconds: 30): volumeWindow30s,
        const Duration(seconds: 60): volumeWindow60s,
        const Duration(seconds: 300): volumeWindow300s,
      },
      buyRatioWindow: buyRatioWindow,
      intervalWindow: intervalWindow,
    );
  }

  /// 🏗️ 팩토리 생성자 - 빈 컨텍스트 생성
  factory MarketDataContext.empty(String market) {
    return MarketDataContext(
      market: market,
      priceWindows: {
        const Duration(seconds: 30): RollingWindow<double>(span: const Duration(seconds: 30)),
        const Duration(seconds: 60): RollingWindow<double>(span: const Duration(seconds: 60)),
        const Duration(seconds: 300): RollingWindow<double>(span: const Duration(seconds: 300)),
      },
      volumeWindows: {
        const Duration(seconds: 30): RollingWindow<double>(span: const Duration(seconds: 30)),
        const Duration(seconds: 60): RollingWindow<double>(span: const Duration(seconds: 60)),
        const Duration(seconds: 300): RollingWindow<double>(span: const Duration(seconds: 300)),
      },
      buyRatioWindow: RollingWindow<double>(span: const Duration(seconds: 180)),
      intervalWindow: RollingWindow<double>(span: const Duration(seconds: 600)),
    );
  }

  /// 📊 가격 윈도우 조회
  RollingWindow<double> getPriceWindow(Duration timeframe) {
    final window = _priceWindows[timeframe];
    if (window == null) {
      throw ArgumentError('Price window not found for timeframe: ${timeframe.inSeconds}s');
    }
    return window;
  }

  /// 📊 거래량 윈도우 조회
  RollingWindow<double> getVolumeWindow(Duration timeframe) {
    final window = _volumeWindows[timeframe];
    if (window == null) {
      throw ArgumentError('Volume window not found for timeframe: ${timeframe.inSeconds}s');
    }
    return window;
  }

  /// 📊 사용 가능한 타임프레임 목록
  List<Duration> get availableTimeframes {
    final timeframes = <Duration>{..._priceWindows.keys, ..._volumeWindows.keys}.toList();
    timeframes.sort((a, b) => a.inSeconds.compareTo(b.inSeconds));
    return timeframes;
  }

  /// 📊 가장 긴 타임프레임 윈도우 조회
  RollingWindow<double> get longestPriceWindow {
    if (_priceWindows.isEmpty) {
      throw StateError('No price windows available');
    }
    
    final longestTimeframe = _priceWindows.keys.reduce(
      (a, b) => a.inSeconds > b.inSeconds ? a : b
    );
    return _priceWindows[longestTimeframe]!;
  }

  /// 📊 가장 긴 타임프레임 거래량 윈도우 조회
  RollingWindow<double> get longestVolumeWindow {
    if (_volumeWindows.isEmpty) {
      throw StateError('No volume windows available');
    }
    
    final longestTimeframe = _volumeWindows.keys.reduce(
      (a, b) => a.inSeconds > b.inSeconds ? a : b
    );
    return _volumeWindows[longestTimeframe]!;
  }

  /// 📊 가장 짧은 타임프레임 윈도우 조회
  RollingWindow<double> get shortestPriceWindow {
    if (_priceWindows.isEmpty) {
      throw StateError('No price windows available');
    }
    
    final shortestTimeframe = _priceWindows.keys.reduce(
      (a, b) => a.inSeconds < b.inSeconds ? a : b
    );
    return _priceWindows[shortestTimeframe]!;
  }

  /// 📊 가장 짧은 타임프레임 거래량 윈도우 조회
  RollingWindow<double> get shortestVolumeWindow {
    if (_volumeWindows.isEmpty) {
      throw StateError('No volume windows available');
    }
    
    final shortestTimeframe = _volumeWindows.keys.reduce(
      (a, b) => a.inSeconds < b.inSeconds ? a : b
    );
    return _volumeWindows[shortestTimeframe]!;
  }

  /// 🔄 데이터 업데이트
  void updateAllWindows({
    required double price,
    required double volume,
    required DateTime timestamp,
    double? buyRatio,
    double? interval,
  }) {
    // 모든 가격 윈도우 업데이트
    for (final window in _priceWindows.values) {
      window.add(price, timestamp: timestamp);
    }
    
    // 모든 거래량 윈도우 업데이트
    for (final window in _volumeWindows.values) {
      window.add(volume, timestamp: timestamp);
    }
    
    // 보조 윈도우 업데이트
    if (buyRatio != null && buyRatioWindow != null) {
      buyRatioWindow!.add(buyRatio, timestamp: timestamp);
    }
    
    if (interval != null && intervalWindow != null) {
      intervalWindow!.add(interval, timestamp: timestamp);
    }
  }

  /// 🆕 온라인 지표 업데이트를 위한 메서드
  void updateWithOnlineMetrics({
    required double price,
    required double volume,
    required DateTime timestamp,
    double? buyRatio,
    double? interval,
    required AdvancedMetrics onlineMetrics,
  }) {
    // 기본 윈도우 업데이트
    updateAllWindows(
      price: price,
      volume: volume,
      timestamp: timestamp,
      buyRatio: buyRatio,
      interval: interval,
    );
    
    // 🔥 온라인 지표도 동시 업데이트
    onlineMetrics.updatePrice(
      market: market,
      price: price,
      timestamp: timestamp,
    );
  }

  /// 📊 다중 타임프레임 트렌드 분석
  Map<String, dynamic> getMultiTimeframeTrend() {
    final trends = <String, Map<String, dynamic>>{};
    
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      if (window.length >= 2) {
        final currentPrice = window.values.first;
        final previousPrice = window.values[1];
        final changePercent = ((currentPrice - previousPrice) / previousPrice) * 100;
        
        trends[timeframe] = {
          'changePercent': changePercent,
          'trend': changePercent > 0.1 ? 'UP' : 
                   changePercent < -0.1 ? 'DOWN' : 'FLAT',
          'volatility': window.cv,
          'dataPoints': window.length,
        };
      }
    }
    
    return {
      'market': market,
      'trends': trends,
      'consensus': _calculateTrendConsensus(trends),
    };
  }

  /// 🎯 트렌드 합의 계산
  String _calculateTrendConsensus(Map<String, Map<String, dynamic>> trends) {
    if (trends.isEmpty) return 'UNKNOWN';
    
    final upCount = trends.values.where((t) => t['trend'] == 'UP').length;
    final downCount = trends.values.where((t) => t['trend'] == 'DOWN').length;
    final flatCount = trends.values.where((t) => t['trend'] == 'FLAT').length;
    
    if (upCount > downCount && upCount > flatCount) return 'BULLISH';
    if (downCount > upCount && downCount > flatCount) return 'BEARISH';
    return 'NEUTRAL';
  }

  /// 📊 윈도우 상태 정보
  Map<String, dynamic> getWindowStats() {
    final stats = <String, dynamic>{
      'market': market,
      'priceWindows': <String, dynamic>{},
      'volumeWindows': <String, dynamic>{},
      'auxWindows': <String, dynamic>{},
    };
    
    // 가격 윈도우 통계
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      stats['priceWindows'][timeframe] = {
        'length': window.length,
        'mean': window.length > 0 ? window.mean : 0.0,
        'stdev': window.length > 0 ? window.stdev : 0.0,
        'cv': window.length > 0 ? window.cv : 0.0,
        'min': window.length > 0 ? window.min : 0.0,
        'max': window.length > 0 ? window.max : 0.0,
      };
    }
    
    // 거래량 윈도우 통계
    for (final entry in _volumeWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      stats['volumeWindows'][timeframe] = {
        'length': window.length,
        'sum': window.length > 0 ? window.sum : 0.0,
        'mean': window.length > 0 ? window.mean : 0.0,
        'stdev': window.length > 0 ? window.stdev : 0.0,
      };
    }
    
    // 보조 윈도우 통계
    if (buyRatioWindow != null) {
      stats['auxWindows']['buyRatio'] = {
        'length': buyRatioWindow!.length,
        'mean': buyRatioWindow!.length > 0 ? buyRatioWindow!.mean : 0.5,
      };
    }
    
    if (intervalWindow != null) {
      stats['auxWindows']['interval'] = {
        'length': intervalWindow!.length,
        'mean': intervalWindow!.length > 0 ? intervalWindow!.mean : 0.0,
        'variance': intervalWindow!.length > 0 ? intervalWindow!.variance : 0.0,
      };
    }
    
    return stats;
  }

  /// 🔍 데이터 품질 검사 (온라인 지표 포함)
  Map<String, dynamic> getDataQuality({AdvancedMetrics? onlineMetrics}) {
    final quality = <String, dynamic>{
      'market': market,
      'overall': 'GOOD',
      'issues': <String>[],
      'scores': <String, double>{},
    };
    
    double totalScore = 0.0;
    int windowCount = 0;
    
    // 가격 윈도우 품질 검사
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      double score = 1.0;
      
      if (window.isEmpty) {
        quality['issues'].add('Empty price window: $timeframe');
        score = 0.0;
      } else if (window.length < entry.key.inSeconds / 10) {
        quality['issues'].add('Insufficient data in price window: $timeframe');
        score = 0.5;
      } else if (window.stdev == 0) {
        quality['issues'].add('No price variance in window: $timeframe');
        score = 0.3;
      }
      
      quality['scores']['price_$timeframe'] = score;
      totalScore += score;
      windowCount++;
    }
    
    // 거래량 윈도우 품질 검사
    for (final entry in _volumeWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      double score = 1.0;
      
      if (window.isEmpty) {
        quality['issues'].add('Empty volume window: $timeframe');
        score = 0.0;
      } else if (window.sum == 0) {
        quality['issues'].add('No volume in window: $timeframe');
        score = 0.0;
      }
      
      quality['scores']['volume_$timeframe'] = score;
      totalScore += score;
      windowCount++;
    }
    
    // 🆕 온라인 지표 품질 검사
    if (onlineMetrics != null) {
      final metricsHealth = onlineMetrics.getSystemHealth();
      final marketHealth = metricsHealth['markets']?[market];
      
      if (marketHealth != null) {
        double metricsScore = 1.0;
        
        if (marketHealth['isStale'] == true) {
          quality['issues'].add('Online metrics are stale');
          metricsScore = 0.3;
        } else if (marketHealth['rsi']?['isReady'] != true) {
          quality['issues'].add('RSI calculator not ready');
          metricsScore = 0.5;
        } else if (marketHealth['macd']?['isReady'] != true) {
          quality['issues'].add('MACD calculator not ready');
          metricsScore = 0.5;
        }
        
        quality['scores']['online_metrics'] = metricsScore;
        totalScore += metricsScore;
        windowCount++;
        
        // 온라인 지표 상세 정보 추가
        quality['onlineMetrics'] = {
          'rsi': marketHealth['rsi'],
          'macd': marketHealth['macd'],
          'lastUpdate': marketHealth['lastUpdate'],
        };
      }
    }
    
    // 전체 품질 점수 계산
    final overallScore = windowCount > 0 ? totalScore / windowCount : 0.0;
    quality['overallScore'] = overallScore;
    
    if (overallScore >= 0.8) {
      quality['overall'] = 'EXCELLENT';
    } else if (overallScore >= 0.6) {
      quality['overall'] = 'GOOD';
    } else if (overallScore >= 0.4) {
      quality['overall'] = 'FAIR';
    } else {
      quality['overall'] = 'POOR';
    }
    
    return quality;
  }

  /// 🧹 윈도우 정리 (메모리 최적화 + 온라인 지표)
  void cleanup({bool force = false, AdvancedMetrics? onlineMetrics}) {
    final now = DateTime.now();
    
    for (final window in _priceWindows.values) {
      if (force || (window.timestamps.isNotEmpty && 
          now.difference(window.timestamps.last).inMinutes > 30)) {
        // 오래된 데이터나 force 플래그시 정리
        window.clear();
      }
    }
    
    for (final window in _volumeWindows.values) {
      if (force || (window.timestamps.isNotEmpty && 
          now.difference(window.timestamps.last).inMinutes > 30)) {
        window.clear();
      }
    }
    
    buyRatioWindow?.clear();
    intervalWindow?.clear();
    
    // 🆕 온라인 지표도 함께 정리
    if (onlineMetrics != null && force) {
      onlineMetrics.resetMarket(market);
    }
  }

  /// 🔍 데이터 무결성 검사
  void _validateWindows() {
    // 가격 윈도우 검사
    for (final entry in _priceWindows.entries) {
      final timeframe = entry.key;
      final window = entry.value;
      
      if (window.span != timeframe) {
        throw ArgumentError(
          'Price window span mismatch: expected ${timeframe.inSeconds}s, '
          'got ${window.span.inSeconds}s'
        );
      }
    }
    
    // 거래량 윈도우 검사
    for (final entry in _volumeWindows.entries) {
      final timeframe = entry.key;
      final window = entry.value;
      
      if (window.span != timeframe) {
        throw ArgumentError(
          'Volume window span mismatch: expected ${timeframe.inSeconds}s, '
          'got ${window.span.inSeconds}s'
        );
      }
    }
  }
}\n\n// ====== lib/core/utils/circular_buffer.dart ======\n
\n\n// ====== lib/core/utils/analysis_isolate_manager.dart ======\n
\n\n// ====== lib/core/extensions/result.dart ======\n
import 'package:meta/meta.dart';
import '../error/app_exception.dart';

/// Either 스타일의 결과 타입.
///
/// - `Ok<T, E>`: 성공 시 데이터를 담습니다.
/// - `Err<T, E>`: 실패 시 예외를 담습니다.
@immutable
sealed class Result<T, E extends AppException> {
  const Result();

  /// 성공/실패에 따라 분기 처리합니다.
  R when<R>({
    required R Function(T value) ok,
    required R Function(E error) err,
  }) {
    if (this is Ok<T, E>) {
      return ok((this as Ok<T, E>).value);
    } else {
      return err((this as Err<T, E>).error);
    }
  }

  /// 성공 여부
  bool get isOk => this is Ok<T, E>;

  /// 실패 여부
  bool get isErr => this is Err<T, E>;

  /// 성공 값 (없으면 null)
  T? get valueOrNull => isOk ? (this as Ok<T, E>).value : null;

  /// 실패 예외 (없으면 null)
  E? get errorOrNull => isErr ? (this as Err<T, E>).error : null;

  /// 성공 값을 매핑합니다.
  Result<U, E> map<U>(U Function(T value) f) {
    if (this is Ok<T, E>) {
      return Ok<U, E>(f((this as Ok<T, E>).value));
    } else {
      return Err<U, E>((this as Err<T, E>).error);
    }
  }

  /// 실패 예외를 다른 타입으로 매핑합니다.
  /// 성공 시에도 새로운 에러 타입 F 를 사용하도록 합니다.
  Result<T, F> mapErr<F extends AppException>(F Function(E error) f) {
    if (this is Err<T, E>) {
      final err = (this as Err<T, E>).error;
      return Err<T, F>(f(err));
    }
    return Ok<T, F>((this as Ok<T, E>).value);
  }

  /// 성공 시 비동기 후속 작업을 수행합니다.
  Future<Result<U, E>> thenAsync<U>(Future<U> Function(T value) f) async {
    if (this is Ok<T, E>) {
      final T value = (this as Ok<T, E>).value;
      try {
        final u = await f(value);
        return Ok<U, E>(u);
      } on AppException catch (e) {
        final E errVal = e is E ? e : AppException(e.message) as E;
        return Err<U, E>(errVal);
      } catch (e) {
        final E errVal = AppException(e.toString()) as E;
        return Err<U, E>(errVal);
      }
    } else {
      return Err<U, E>((this as Err<T, E>).error);
    }
  }

  @override
  String toString() {
    if (this is Ok<T, E>) {
      return 'Ok(${(this as Ok<T, E>).value})';
    } else {
      return 'Err(${(this as Err<T, E>).error})';
    }
  }
}

/// 성공 결과를 담습니다.
class Ok<T, E extends AppException> extends Result<T, E> {
  final T value;
  const Ok(this.value);
}

/// 실패 결과를 담습니다.
class Err<T, E extends AppException> extends Result<T, E> {
  final E error;
  const Err(this.error);
}
\n\n// ====== lib/core/error/app_exception.dart ======\n
// lib/core/error/app_exception.dart

import 'package:dio/dio.dart';

/// 최상위 앱 예외
/// - 모든 커스텀 예외는 이 클래스를 상속해주세요.
class AppException implements Exception {
  /// 사용자에게 노출할 메시지
  final String message;

  /// 내부 로깅 또는 식별용 코드 (nullable)
  final String? code;

  /// HTTP 상태 코드 등 추가 상태 정보
  final int? statusCode;

  /// 원본 예외(있는 경우)
  final Exception? originalException;

  const AppException(
    this.message, {
    this.code,
    this.statusCode,
    this.originalException,
  });

  @override
  String toString() {
    final parts = <String>[];
    if (code != null) parts.add('code: $code');
    if (statusCode != null) parts.add('status: $statusCode');
    parts.add('message: $message');
    return 'AppException(${parts.join(', ')})';
  }
}

/// REST/HTTP 호출 중 발생한 예외
class NetworkException extends AppException {
  const NetworkException(
    String message, {
    String? code,
    int? statusCode,
    Exception? originalException,
  }) : super(
          message,
          code: code,
          statusCode: statusCode,
          originalException: originalException,
        );

  /// DioException → NetworkException 변환 헬퍼
  factory NetworkException.fromDio(DioException dioError) {
    final msg = dioError.message ?? dioError.toString();
    return NetworkException(
      msg,
      code: dioError.response?.statusMessage,
      statusCode: dioError.response?.statusCode,
      originalException: dioError,
    );
  }
}

/// WebSocket 연결/통신 중 발생한 예외
class WebSocketException extends AppException {
  /// WS 서버가 보낸 이유 문자열 (nullable)
  final String? reason;

  const WebSocketException(
    String message, {
    this.reason,
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );

  @override
  String toString() {
    final parts = <String>[];
    if (reason != null) parts.add('reason: $reason');
    parts.add('message: $message');
    return 'WebSocketException(${parts.join(', ')})';
  }
}

/// 서버로부터 Rate Limit(HTTP 429 등) 응답을 받았을 때
class RateLimitException extends AppException {
  /// 재시도까지 대기해야 할 시간
  final Duration retryAfter;

  const RateLimitException(
    String message, {
    required this.retryAfter,
    String? code,
    int? statusCode,
  }) : super(
          message,
          code: code,
          statusCode: statusCode,
        );

  @override
  String toString() =>
      'RateLimitException(retryAfter: ${retryAfter.inSeconds}s, message: $message)';
}

/// JSON 파싱 또는 데이터 변환 중 발생한 예외
class DataParsingException extends AppException {
  const DataParsingException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 인메모리 캐시에서 키를 찾지 못했을 때
class CacheMissException extends AppException {
  const CacheMissException([String message = 'Cache miss'])
      : super(message);
}

// ──────────────────────────────────────────────────────────────────────────
// 도메인 특화 예외
// ──────────────────────────────────────────────────────────────────────────

/// 체결(Trade) 데이터 유효성 검사 오류
class TradeException extends AppException {
  const TradeException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 호가(Order Book) 데이터 오류
class OrderBookException extends AppException {
  const OrderBookException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 캔들(Candle) 데이터 파싱 오류
class CandleException extends DataParsingException {
  const CandleException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 현재가(Ticker) 데이터 파싱 오류
class TickerException extends DataParsingException {
  const TickerException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}
\n\n// ====== lib/core/event/app_event.dart ======\n
// lib/core/event/app_event.dart

import 'package:equatable/equatable.dart';
import 'package:uuid/uuid.dart';

typedef Json = Map<String, dynamic>;

/// 애플리케이션 전역 이벤트의 베이스 클래스
/// - id     : UUID v4
/// - ts     : UTC 밀리초 타임스탬프
/// - payload: 자유 형태 JSON
class AppEvent extends Equatable {
  /// 고유 ID (UUID v4)
  final String id;

  /// UTC 밀리초 타임스탬프
  final int ts;

  /// 페이로드 데이터 (불변)
  final Json payload;

  const AppEvent({
    required this.id,
    required this.ts,
    required this.payload,
  });

  /// 현재 시각을 기준으로 id·ts를 자동 생성합니다.
  factory AppEvent.now(Json payload) {
    final nowUtcMs = DateTime.now().toUtc().millisecondsSinceEpoch;
    return AppEvent(
      id: const Uuid().v4(),
      ts: nowUtcMs,
      payload: Map<String, dynamic>.of(payload), // 방어적 복사
    );
  }

  /// UTC ms → 로컬 DateTime
  DateTime get timestamp =>
      DateTime.fromMillisecondsSinceEpoch(ts, isUtc: true).toLocal();

  /// JSON 직렬화 (payload도 복사하여 노출)
  Json toJson() => {
        'id': id,
        'ts': ts,
        'payload': Map<String, dynamic>.of(payload),
      };

  /// JSON 역직렬화
  factory AppEvent.fromJson(Json json) {
    return AppEvent(
      id: json['id'] as String,
      ts: json['ts'] as int,
      payload: Map<String, dynamic>.of(json['payload'] as Json),
    );
  }

  /// 복사본 생성 (immutable 유지)
  AppEvent copyWith({
    String? id,
    int? ts,
    Json? payload,
  }) =>
      AppEvent(
        id: id ?? this.id,
        ts: ts ?? this.ts,
        payload: payload != null ? Map<String, dynamic>.of(payload) : this.payload,
      );

  @override
  List<Object?> get props => [id, ts, payload];
}
\n\n// ====== lib/core/services/hive_service.dart ======\n
// lib/core/services/hive_service.dart

import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../utils/logger.dart';
import '../../data/models/trade_dto.dart';
import '../../data/models/market_mood_dto.dart'; // 🔥 MarketMood DTO 추가

/// 🎯 Hive 전역 관리 서비스 (싱글톤)
/// - 앱 시작 시 한 번만 초기화
/// - 모든 TypeAdapter 등록 및 Box 관리
/// - 백그라운드에서도 Box 유지 (닫지 않음)
/// - AppConfig에 의존하지 않는 완전 독립 서비스
class HiveService {
  // 싱글톤 패턴
  HiveService._();
  static final HiveService _instance = HiveService._();
  factory HiveService() => _instance;

  // 🏷️ Box 이름 상수 (HiveService 자체 관리)
  static const String _tradeBoxName = 'trades';
  static const String _marketMoodVolumeBoxName = 'market_mood_volume'; // 🔥 추가
  static const String _marketMoodCacheBoxName = 'market_mood_cache';   // 🔥 추가

  // Box 인스턴스 캐싱
  late final Box<TradeDto> _tradeBox;
  late final Box<TimestampedVolume> _marketMoodVolumeBox; // 🔥 추가
  late final Box _marketMoodCacheBox; // 🔥 추가 (dynamic)
  
  // 초기화 상태 관리
  bool _initialized = false;
  Future<void>? _initFuture;

  /// 🎯 Trade Box getter (이미 열려있다는 전제)
  Box<TradeDto> get tradeBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using tradeBox.'
      );
    }
    return _tradeBox;
  }

  /// 🔥 MarketMood Volume Box getter (이미 열려있다는 전제)
  Box<TimestampedVolume> get marketMoodVolumeBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using marketMoodVolumeBox.'
      );
    }
    return _marketMoodVolumeBox;
  }

  /// 🔥 MarketMood Cache Box getter (이미 열려있다는 전제)
  Box get marketMoodCacheBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using marketMoodCacheBox.'
      );
    }
    return _marketMoodCacheBox;
  }

  /// 🚀 Hive 초기화 (앱 시작 시 단 한 번만 호출)
  Future<void> init() async {
    if (_initialized) {
      log.i('[HiveService] already initialized, skipping');
      return;
    }

    // 동시 호출 방어 - race condition 완전 차단
    if (_initFuture != null) {
      log.d('[HiveService] init already in progress, waiting...');
      return _initFuture;
    }

    _initFuture = _doInit();
    await _initFuture;
  }

  /// 🔧 실제 초기화 로직
  Future<void> _doInit() async {
    try {
      // 1. Hive 플랫폼 초기화
      await Hive.initFlutter();
      log.i('[HiveService] Hive.initFlutter() completed');

      // 2. TypeAdapter 등록 (중복 방지)
      _registerAdapters();

      // 3. 모든 Box 열기 및 캐싱
      _tradeBox = await Hive.openBox<TradeDto>(_tradeBoxName);
      log.i('[HiveService] "$_tradeBoxName" box opened and cached');

      _marketMoodVolumeBox = await Hive.openBox<TimestampedVolume>(_marketMoodVolumeBoxName); // 🔥 추가
      log.i('[HiveService] "$_marketMoodVolumeBoxName" box opened and cached');

      _marketMoodCacheBox = await Hive.openBox(_marketMoodCacheBoxName); // 🔥 추가
      log.i('[HiveService] "$_marketMoodCacheBoxName" box opened and cached');

      _initialized = true;
      log.i('[HiveService] ✅ initialized successfully');
      
    } catch (e, st) {
      log.e('[HiveService] ❌ init failed', e, st);
      _initialized = false;
      rethrow; // 초기화 실패 시 상위에서 처리할 수 있도록
    } finally {
      // 초기화 완료 후 Future 해제 (재시도 가능하도록)
      _initFuture = null;
    }
  }

  /// 📋 모든 TypeAdapter 등록 (중복 방지)
  void _registerAdapters() {
    // Trade Adapter
    final tradeAdapter = TradeDtoAdapter();
    if (!Hive.isAdapterRegistered(tradeAdapter.typeId)) {
      Hive.registerAdapter(tradeAdapter);
      log.i('[HiveService] TradeDtoAdapter registered (typeId: ${tradeAdapter.typeId})');
    } else {
      log.d('[HiveService] TradeDtoAdapter already registered');
    }
    
    // 🔥 TimestampedVolume Adapter 추가
    final volumeAdapter = TimestampedVolumeAdapter();
    if (!Hive.isAdapterRegistered(volumeAdapter.typeId)) {
      Hive.registerAdapter(volumeAdapter);
      log.i('[HiveService] TimestampedVolumeAdapter registered (typeId: ${volumeAdapter.typeId})');
    } else {
      log.d('[HiveService] TimestampedVolumeAdapter already registered');
    }
    
    // 📝 향후 다른 어댑터 추가 시 여기에 추가
  }

  /// 🧹 리소스 정리 (디버그 모드에서만 실행)
  /// 일반적으로 모바일 앱에서는 OS가 자동 정리하므로 호출 불필요
  Future<void> dispose() async {
    if (!kDebugMode) {
      log.d('[HiveService] dispose skipped in production mode');
      return;
    }
    
    if (!_initialized) {
      log.d('[HiveService] not initialized, skip dispose');
      return;
    }

    try {
      if (_tradeBox.isOpen) {
        await _tradeBox.close();
        log.i('[HiveService] "$_tradeBoxName" box closed');
      }

      // 🔥 MarketMood Box들 정리 추가
      if (_marketMoodVolumeBox.isOpen) {
        await _marketMoodVolumeBox.close();
        log.i('[HiveService] "$_marketMoodVolumeBoxName" box closed');
      }

      if (_marketMoodCacheBox.isOpen) {
        await _marketMoodCacheBox.close();
        log.i('[HiveService] "$_marketMoodCacheBoxName" box closed');
      }

      await Hive.close();
      log.i('[HiveService] 🧹 all Hive resources disposed');
      
    } catch (e, st) {
      log.e('[HiveService] dispose failed', e, st);
    } finally {
      _initialized = false;
    }
  }

  /// 🔍 디버깅용: 현재 상태 정보
  Map<String, Object> get debugInfo => {
    'initialized': _initialized,
    'tradeBox': {
      'name': _tradeBoxName,
      'open': _initialized ? _tradeBox.isOpen : false,
      'length': _initialized ? _tradeBox.length : 0,
    },
    'marketMoodVolumeBox': { // 🔥 추가
      'name': _marketMoodVolumeBoxName,
      'open': _initialized ? _marketMoodVolumeBox.isOpen : false,
      'length': _initialized ? _marketMoodVolumeBox.length : 0,
    },
    'marketMoodCacheBox': { // 🔥 추가
      'name': _marketMoodCacheBoxName,
      'open': _initialized ? _marketMoodCacheBox.isOpen : false,
      'length': _initialized ? _marketMoodCacheBox.length : 0,
    },
    'initInProgress': _initFuture != null,
  };

  /// 🔍 디버깅용: 상태 로깅
  void logStatus() {
    log.d('[HiveService] Status: $debugInfo');
  }

  /// 🔍 디버깅용: Box 상세 정보 (개발 시 유용)
  void logBoxDetails() {
    if (!_initialized) {
      log.w('[HiveService] Cannot log box details - not initialized');
      return;
    }
    
    log.d('[HiveService] Box Details:');
    log.d('  Trade Box:');
    log.d('    - Name: $_tradeBoxName');
    log.d('    - Length: ${_tradeBox.length}');
    log.d('    - Keys sample: ${_tradeBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_tradeBox.isOpen}');
    
    // 🔥 MarketMood Box 정보 추가
    log.d('  MarketMood Volume Box:');
    log.d('    - Name: $_marketMoodVolumeBoxName');
    log.d('    - Length: ${_marketMoodVolumeBox.length}');
    log.d('    - Keys sample: ${_marketMoodVolumeBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_marketMoodVolumeBox.isOpen}');
    
    log.d('  MarketMood Cache Box:');
    log.d('    - Name: $_marketMoodCacheBoxName');
    log.d('    - Length: ${_marketMoodCacheBox.length}');
    log.d('    - Keys sample: ${_marketMoodCacheBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_marketMoodCacheBox.isOpen}');
  }
}\n\n// ====== lib/firebase_options.dart ======\n
// File generated by FlutterFire CLI and modified for .env
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    _checkEnvKeys([
      'FIREBASE_WEB_API_KEY',
      'FIREBASE_WEB_APP_ID',
      'FIREBASE_WEB_MESSAGING_SENDER_ID',
      'FIREBASE_WEB_PROJECT_ID',
      'FIREBASE_WEB_AUTH_DOMAIN',
      'FIREBASE_WEB_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WEB_API_KEY']!,
      appId: dotenv.env['FIREBASE_WEB_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_WEB_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_WEB_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_WEB_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_WEB_STORAGE_BUCKET']!,
    );
  }

  static FirebaseOptions get android {
    _checkEnvKeys([
      'FIREBASE_ANDROID_API_KEY',
      'FIREBASE_ANDROID_APP_ID',
      'FIREBASE_ANDROID_MESSAGING_SENDER_ID',
      'FIREBASE_ANDROID_PROJECT_ID',
      'FIREBASE_ANDROID_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_ANDROID_API_KEY']!,
      appId: dotenv.env['FIREBASE_ANDROID_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_ANDROID_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_ANDROID_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_ANDROID_STORAGE_BUCKET']!,
    );
  }

  static FirebaseOptions get ios {
    _checkEnvKeys([
      'FIREBASE_IOS_API_KEY',
      'FIREBASE_IOS_APP_ID',
      'FIREBASE_IOS_MESSAGING_SENDER_ID',
      'FIREBASE_IOS_PROJECT_ID',
      'FIREBASE_IOS_STORAGE_BUCKET',
      'FIREBASE_IOS_BUNDLE_ID',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_IOS_API_KEY']!,
      appId: dotenv.env['FIREBASE_IOS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_IOS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_IOS_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_IOS_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get macos {
    _checkEnvKeys([
      'FIREBASE_MACOS_API_KEY',
      'FIREBASE_MACOS_APP_ID',
      'FIREBASE_MACOS_MESSAGING_SENDER_ID',
      'FIREBASE_MACOS_PROJECT_ID',
      'FIREBASE_MACOS_STORAGE_BUCKET',
      'FIREBASE_MACOS_BUNDLE_ID',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_MACOS_API_KEY']!,
      appId: dotenv.env['FIREBASE_MACOS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MACOS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_MACOS_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_MACOS_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_MACOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get windows {
    _checkEnvKeys([
      'FIREBASE_WINDOWS_API_KEY',
      'FIREBASE_WINDOWS_APP_ID',
      'FIREBASE_WINDOWS_MESSAGING_SENDER_ID',
      'FIREBASE_WINDOWS_PROJECT_ID',
      'FIREBASE_WINDOWS_AUTH_DOMAIN',
      'FIREBASE_WINDOWS_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WINDOWS_API_KEY']!,
      appId: dotenv.env['FIREBASE_WINDOWS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_WINDOWS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_WINDOWS_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_WINDOWS_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_WINDOWS_STORAGE_BUCKET']!,
    );
  }

  static void _checkEnvKeys(List<String> keys) {
    for (var key in keys) {
      if (dotenv.env[key] == null) {
        throw Exception('$key is missing in .env file');
      }
    }
  }
}\n\n// ====== lib/shared/information/app_information_modal.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:package_info_plus/package_info_plus.dart';

class AppInformationModal {
  /// 앱 정보 모달 표시
  static void show(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black54,
      builder: (context) => const _AppInformationContent(),
    );
  }
}

class _AppInformationContent extends StatefulWidget {
  const _AppInformationContent();

  @override
  State<_AppInformationContent> createState() => _AppInformationContentState();
}

class _AppInformationContentState extends State<_AppInformationContent> {
  PackageInfo? _packageInfo;

  @override
  void initState() {
    super.initState();
    _loadPackageInfo();
  }

  Future<void> _loadPackageInfo() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      if (mounted) {
        setState(() {
          _packageInfo = packageInfo;
        });
      }
    } catch (e) {
      // 패키지 정보를 불러올 수 없는 경우 기본값 사용
      if (mounted) {
        setState(() {
          _packageInfo = null;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;
    
    // 설정 모달보다 조금 작은 크기로 설정
    final dialogHeight = isLandscape 
        ? (screenHeight * 0.6).clamp(250.0, 300.0)
        : 450.0;
    final dialogWidth = screenWidth * 0.85;

    return Dialog(
      backgroundColor: Colors.transparent,
      child: Container(
        width: dialogWidth,
        height: dialogHeight,
        decoration: BoxDecoration(
          color: Theme.of(context).scaffoldBackgroundColor,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withAlpha(26),
              blurRadius: 10,
              spreadRadius: 2,
            ),
          ],
        ),
        child: Column(
          children: [
            _buildHeader(context),
            Divider(color: Colors.grey.shade300, height: 1),
            Expanded(child: _buildContent(context)),
            _buildFooter(context),
          ],
        ),
      ),
    );
  }

  /// 헤더 (제목만, X버튼 제거)
  Widget _buildHeader(BuildContext context) {
    return const Padding(
      padding: EdgeInsets.all(16),
      child: Row(
        children: [
          Icon(Icons.info_outline, color: Colors.orange, size: 24),
          SizedBox(width: 8),
          Text(
            '앱 정보',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  /// 앱 정보 내용
  Widget _buildContent(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children: [
          const SizedBox(height: 8),
          
          // 앱 아이콘 및 이름
          _buildAppIcon(),
          const SizedBox(height: 20),
          
          // 앱 정보 카드들
          _buildInfoCard(
            icon: Icons.smartphone,
            title: '앱 이름',
            value: _packageInfo?.appName ?? 'Crypto Tracker',
          ),
          const SizedBox(height: 12),
          
          _buildInfoCard(
            icon: Icons.numbers,
            title: '버전',
            value: _packageInfo?.version ?? '1.0.0',
          ),
          const SizedBox(height: 12),
          
          _buildInfoCard(
            icon: Icons.code,
            title: '빌드 번호',
            value: _packageInfo?.buildNumber ?? '1',
          ),
          const SizedBox(height: 12),
          
          _buildInfoCard(
            icon: Icons.business,
            title: '패키지명',
            value: _packageInfo?.packageName ?? 'com.example.crypto_tracker',
            isLongText: true,
          ),
          const SizedBox(height: 12),
          
          _buildInfoCard(
            icon: Icons.person,
            title: '개발자',
            value: 'hd cho',
          ),
          const SizedBox(height: 12),
          
          _buildInfoCard(
            icon: Icons.calendar_today,
            title: '빌드 날짜',
            value: _getBuildDate(),
          ),
        ],
      ),
    );
  }

/// 앱 아이콘 위젯 (이미지로 변경)
Widget _buildAppIcon() {
  return Container(
    width: 80,
    height: 80,
    decoration: const BoxDecoration(
      borderRadius: BorderRadius.all(Radius.circular(16)),
      boxShadow: [
        BoxShadow(
          color: Colors.orange,
          blurRadius: 8,
          offset: Offset(0, 4),
        ),
      ],
    ),
    child: ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: Center(
        child: Image.asset(
          'assets/app_information_icon.webp',
          width: 64,  // 80의 80% = 64
          height: 64, // 80의 80% = 64
          fit: BoxFit.cover,
          errorBuilder: (context, error, stackTrace) {
            // 이미지 로드 실패 시 기본 아이콘 표시
            return Container(
              width: 80,
              height: 80,
              decoration: const BoxDecoration(
                borderRadius: BorderRadius.all(Radius.circular(16)),
                gradient: LinearGradient(
                  colors: [Colors.grey, Colors.deepOrange],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: const Icon(
                Icons.trending_up,
                color: Colors.white,
                size: 40,
              ),
            );
          },
        ),
      ),
    ),
  );
}

  /// 빌드 날짜 자동 생성
  String _getBuildDate() {
    final now = DateTime.now();
    return '${now.year}.${now.month.toString().padLeft(2, '0')}.${now.day.toString().padLeft(2, '0')}';
  }

  /// 정보 카드 위젯
  Widget _buildInfoCard({
    required IconData icon,
    required String title,
    required String value,
    bool isLongText = false,
  }) {
    return Card(
      elevation: 1,
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Row(
          children: [
            Icon(icon, color: Colors.orange, size: 20),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 12,
                      color: Colors.grey,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(height: 2),
                  GestureDetector(
                    onTap: isLongText ? () => _copyToClipboard(context, value) : null,
                    child: Text(
                      value,
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: isLongText ? Colors.orange : null,
                        decoration: isLongText ? TextDecoration.underline : null,
                      ),
                      maxLines: isLongText ? 2 : 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ),
            if (isLongText)
              const Icon(
                Icons.copy,
                color: Colors.grey,
                size: 16,
              ),
          ],
        ),
      ),
    );
  }

  /// 푸터 (저작권 정보만)
  Widget _buildFooter(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Text(
        '© 2025 Noonchit',
        style: TextStyle(
          fontSize: 12,
          color: Colors.grey.shade600,
        ),
      ),
    );
  }

  /// 클립보드에 복사
  void _copyToClipboard(BuildContext context, String text) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$text가 클립보드에 복사되었습니다'),
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}\n\n// ====== lib/shared/utils/blink_animation_mixin.dart ======\n
// lib/shared/utils/blink_animation_mixin.dart
import 'package:flutter/material.dart';

/// ✨ 반짝임 애니메이션 헬퍼 클래스
/// 복잡한 Mixin 대신 간단한 유틸리티 클래스로 제공
class BlinkAnimationHelper {
  
  /// 반짝임 효과가 적용된 위젯 래핑
  static Widget wrapWithBlinkEffect({
    required Widget child,
    required bool shouldBlink,
    required Animation<double> blinkAnimation,
    Color blinkColor = Colors.orange,
    double blurRadius = 15.0,
    double spreadRadius = 4.0,
    BorderRadius? borderRadius,
  }) {
    if (!shouldBlink) return child;
    
    return AnimatedBuilder(
      animation: blinkAnimation,
      builder: (context, _) {
        return Container(
          decoration: BoxDecoration(
            borderRadius: borderRadius ?? BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: blinkColor.withValues(
                  alpha: (1.0 - blinkAnimation.value) * 0.8,
                ),
                blurRadius: blurRadius,
                spreadRadius: spreadRadius,
              ),
            ],
          ),
          child: child,
        );
      },
    );
  }
  
  /// 조건부 깜빡임 효과
  static Widget wrapWithConditionalBlink({
    required Widget child,
    required bool enableBlinkAnimation,
    required ThemeData theme,
    BorderRadius? borderRadius,
  }) {
    if (!enableBlinkAnimation) return child;
    
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 1.0, end: 0.7),
      duration: const Duration(milliseconds: 300),
      builder: (context, value, _) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 150),
          decoration: BoxDecoration(
            borderRadius: borderRadius ?? BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: theme.colorScheme.primary.withValues(alpha: 1.0 - value),
                blurRadius: 8,
                spreadRadius: 2,
              ),
            ],
          ),
          child: child,
        );
      },
    );
  }
  
  /// 순위 변화 감지 및 반짝임 처리
  static bool checkRankChange({
    required Map<String, int> previousRanksMap,
    required String key,
    required int currentRank,
  }) {
    final previousRank = previousRanksMap[key];
    final shouldBlink = previousRank != null && currentRank < previousRank;
    
    // 현재 순위를 저장
    previousRanksMap[key] = currentRank;
    
    return shouldBlink;
  }
  
  /// 새로운 시그널 감지
  static bool checkNewSignal({
    required Set<String> blinkedSignalsSet,
    required DateTime detectedAt,
    required String signalKey,
    int maxAgeSeconds = 10,
  }) {
    final now = DateTime.now();
    final signalAge = now.difference(detectedAt).inSeconds;
    
    if (signalAge <= maxAgeSeconds && !blinkedSignalsSet.contains(signalKey)) {
      blinkedSignalsSet.add(signalKey);
      return true;
    }
    
    return false;
  }
}\n\n// ====== lib/shared/utils/tile_common.dart ======\n
// lib/shared/utils/tile_common.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
// import '../../domain/entities/app_settings.dart'; // 불필요한 import 제거

/// 🎯 타일 공통 유틸리티 클래스
/// SignalTile, TradeTile, VolumeTile, SectorTile에서 중복되는 로직들을 통합 관리
class TileCommon {
  
  // ==================== 코인명 표시 관련 ====================
  
  /// 🪙 동적 코인명 표시 (ticker/korean/english 전환)
  /// SignalTile, TradeTile, VolumeTile에서 공통 사용
  static String getDisplayName(WidgetRef ref, String market) {
    final displayMode = ref.watch(appSettingsProvider).displayMode;
    final marketInfoAsync = ref.watch(marketInfoProvider);
    
    // 기본 티커 (fallback)
    final ticker = market.replaceFirst('KRW-', '');
    
    // marketInfo가 로딩 중이거나 에러인 경우 티커 반환
    return marketInfoAsync.when(
      data: (marketInfoMap) {
        final marketInfo = marketInfoMap[market];
        
        switch (displayMode) {
          case DisplayMode.ticker:
            return ticker;
          case DisplayMode.korean:
            return marketInfo?.koreanName ?? ticker;
          case DisplayMode.english:
            return marketInfo?.englishName ?? ticker;
        }
      },
      loading: () => ticker, // 로딩 중에는 티커 표시
      error: (_, __) => ticker, // 에러 시에도 티커 표시
    );
  }
  
  // ==================== 순위 관련 ====================
  
  /// 🏆 순위에 따른 색상 결정
  /// VolumeTile, SectorTile에서 공통 사용
  static Color getRankColor(BuildContext context, int rank) {
    final theme = Theme.of(context);
    switch (rank) {
      case 1:
        return Colors.amber; // 🥇 1위 - 금색
      case 2:
        return Colors.grey.shade400; // 🥈 2위 - 은색
      case 3:
        return Colors.orange.shade300; // 🥉 3위 - 동색
      default:
        return theme.colorScheme.onSurface.withValues(alpha: 0.6); // 기본
    }
  }
  
  /// 🎯 순위 위젯 생성
  /// VolumeTile, SectorTile에서 공통 사용
  static Widget buildRankWidget(BuildContext context, int rank) {
    final rankColor = getRankColor(context, rank);
    final isTopThree = rank <= 3;
    
    return Container(
      width: 32,
      height: 32,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: isTopThree ? rankColor.withValues(alpha: 0.2) : Colors.transparent,
        border: isTopThree ? Border.all(color: rankColor, width: 2) : null,
      ),
      child: Center(
        child: Text(
          '$rank',
          style: TextStyle(
            fontSize: 14,
            fontWeight: isTopThree ? FontWeight.bold : FontWeight.normal,
            color: rankColor,
          ),
        ),
      ),
    );
  }
  
  // ==================== 상태 아이콘 관련 ====================
  
  /// 🔥 HOT 아이콘 (급상승 표시) - 깔끔한 텍스트 디자인
  /// SignalTile, VolumeTile, SectorTile에서 공통 사용
  static Widget? buildHotIcon(bool showHotIcon) {
    if (!showHotIcon) return null;
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 3),
      decoration: BoxDecoration(
        color: Colors.red,
        borderRadius: BorderRadius.circular(12), // ✅ Volume 토글과 일치
      ),
      child: const Text(
        'HOT', // ✅ 이모지 제거, 텍스트만
        style: TextStyle(
          color: Colors.white,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
  
  /// 🆕 NEW 뱃지 (최근 감지된 시그널용)
  /// SignalTile에서 사용
  static Widget? buildNewBadge(DateTime detectedAt, {int maxAgeSeconds = 30}) {
    final signalAge = DateTime.now().difference(detectedAt).inSeconds;
    if (signalAge > maxAgeSeconds) return null;

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
      decoration: BoxDecoration(
        color: Colors.red,
        borderRadius: BorderRadius.circular(6),
      ),
      child: const Text(
        'NEW',
        style: TextStyle(
          color: Colors.white,
          fontSize: 9,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
  
  // ==================== 변화율/가격 관련 ====================
  
  /// 📈 변화율 포맷팅
  /// SignalTile에서 사용
  static String formatChangePercent(double changePercent) {
    final absChange = changePercent.abs();
    if (absChange >= 10) {
      return '${changePercent >= 0 ? '+' : ''}${changePercent.toStringAsFixed(1)}%';
    } else {
      return '${changePercent >= 0 ? '+' : ''}${changePercent.toStringAsFixed(2)}%';
    }
  }
  
  /// 🎨 변화율에 따른 색상
  /// SignalTile에서 사용
  static Color getChangeColor(double changePercent) {
    if (changePercent > 0) {
      return Colors.red; // 상승: 빨강
    } else if (changePercent < 0) {
      return Colors.blue; // 하락: 파랑
    } else {
      return Colors.grey; // 변동 없음: 회색
    }
  }
  
  // ==================== 반짝임 효과 관련 ====================
  
  /// ✨ 반짝임 효과가 적용된 위젯 래핑
  /// 모든 타일에서 공통 사용
  static Widget wrapWithBlinkEffect({
    required Widget child,
    required bool shouldBlink,
    required Animation<double> blinkAnimation,
    Color blinkColor = Colors.orange,
    double blurRadius = 15.0,
    double spreadRadius = 4.0,
    BorderRadius? borderRadius,
  }) {
    if (!shouldBlink) return child;
    
    return AnimatedBuilder(
      animation: blinkAnimation,
      builder: (context, _) {
        return Container(
          decoration: BoxDecoration(
            borderRadius: borderRadius ?? BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: blinkColor.withValues(
                  alpha: (1.0 - blinkAnimation.value) * 0.8,
                ),
                blurRadius: blurRadius,
                spreadRadius: spreadRadius,
              ),
            ],
          ),
          child: child,
        );
      },
    );
  }
  
  /// 🎯 조건부 깜빡임 효과 (enableBlinkAnimation용)
  /// 모든 타일에서 공통 사용
  static Widget wrapWithConditionalBlink({
    required Widget child,
    required bool enableBlinkAnimation,
    required ThemeData theme,
    BorderRadius? borderRadius,
  }) {
    if (!enableBlinkAnimation) return child;
    
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 1.0, end: 0.7),
      duration: const Duration(milliseconds: 300),
      builder: (context, value, _) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 150),
          decoration: BoxDecoration(
            borderRadius: borderRadius ?? BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: theme.colorScheme.primary.withValues(alpha: 1.0 - value),
                blurRadius: 8,
                spreadRadius: 2,
              ),
            ],
          ),
          child: child,
        );
      },
    );
  }
  
  // ==================== 공통 레이아웃 헬퍼 ====================
  
  /// 📱 표준 카드 래퍼
  static Widget buildStandardCard({
    required Widget child,
    EdgeInsetsGeometry? margin,
    EdgeInsetsGeometry? padding,
    BorderRadius? borderRadius,
    double? elevation,
  }) {
    return Card(
      elevation: elevation ?? 2,
      margin: margin ?? const EdgeInsets.symmetric(vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: borderRadius ?? BorderRadius.circular(12),
      ),
      child: Padding(
        padding: padding ?? const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        child: child,
      ),
    );
  }
  
  /// 🔧 Flex 기반 Row 레이아웃 헬퍼
  static Widget buildFlexRow({
    required List<FlexChild> children,
    MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,
    CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,
  }) {
    return Row(
      mainAxisAlignment: mainAxisAlignment,
      crossAxisAlignment: crossAxisAlignment,
      children: children.map((flexChild) {
        if (flexChild.flex > 0) {
          return Expanded(
            flex: flexChild.flex,
            child: flexChild.child,
          );
        } else {
          return flexChild.child;
        }
      }).toList(),
    );
  }
}

/// 🔧 Flex 레이아웃용 헬퍼 클래스
class FlexChild {
  final Widget child;
  final int flex; // 0이면 Expanded 사용 안함
  
  const FlexChild(this.child, {this.flex = 0});
  
  /// 고정 크기 위젯
  const FlexChild.fixed(this.child) : flex = 0;
  
  /// 확장 가능한 위젯
  const FlexChild.expanded(this.child, {this.flex = 1});
}\n\n// ====== lib/shared/utils/amount_formatter.dart ======\n
// lib/shared/utils/amount_formatter.dart
import 'package:intl/intl.dart';

/// 💰 금액 포맷팅 유틸리티 클래스
/// 모든 타일에서 사용하는 금액/가격/거래량 포맷팅을 통합 관리
class AmountFormatter {
  // 포맷터 캐싱 (성능 최적화)
  static final _integerFormat = NumberFormat('#,###');
  static final _decimalFormat = NumberFormat('#,##0.##');
  static final _decimal3Format = NumberFormat('#,##0.###');
  static final _decimal6Format = NumberFormat('#,##0.######');
  static final _decimal1Format = NumberFormat('#,##0.#');
  
  // ==================== 거래량 포맷팅 ====================
  
  /// 📊 거래량 포맷팅 (VolumeTile, SectorTile에서 사용)
  /// 통합된 거래량 표시 규칙
  static String formatVolume(double totalVolume) {
    if (totalVolume < 0) return '0원';
    
    // 1만원 미만: 1원 ~ 9,999원 (콤마 포함)
    if (totalVolume < 10000) {
      return '${_integerFormat.format(totalVolume.toInt())}원';
    }
    // 1만원 ~ 9999만원: x,xxx만원 (콤마 포함)
    else if (totalVolume < 100000000) {
      final man = (totalVolume / 10000).toInt();
      return '${_integerFormat.format(man)}만원';
    }
    // 1억 ~ 9999억: x.xx억원 (소수점 2자리)
    else if (totalVolume < 1000000000000) {
      final eok = totalVolume / 100000000;
      return '${_decimalFormat.format(eok)}억원';
    }
    // 1조 ~ 9999조: x.xx조원 (소수점 2자리)
    else if (totalVolume < 10000000000000000) {
      final jo = totalVolume / 1000000000000;
      return '${_decimalFormat.format(jo)}조원';
    }
    // 1경 이상: x,xxx경원 (콤마 포함)
    else {
      final gyeong = (totalVolume / 10000000000000000).toInt();
      return '${_integerFormat.format(gyeong)}경원';
    }
  }
  
  // ==================== 가격 포맷팅 ====================
  
  /// 💵 조건부 가격 포맷팅 (TradeTile, SignalTile에서 사용)
  /// 가격 크기에 따라 소수점 자릿수를 동적 조절
  static String formatPrice(double price) {
    if (price <= 1.0) {
      return _decimal6Format.format(price); // 1 이하: 소수점 최대 6자리
    } else if (price < 10.0) {
      return _decimal3Format.format(price); // 1 초과 ~ 10 미만: 소수점 3자리
    } else if (price < 100.0) {
      return _decimalFormat.format(price); // 10 초과 ~ 100 미만: 소수점 2자리
    } else if (price < 1000.0) {
      return _decimal1Format.format(price); // 100 초과 ~ 1000 미만: 소수점 1자리
    } else {
      return _integerFormat.format(price); // 1000 이상: 정수
    }
  }
  
  /// 📈 거래량 개수 포맷팅 (TradeTile에서 사용)
  /// 코인 거래량(개수) 전용 포맷터
  static String formatTradeVolume(double volume) {
    if (volume < 1.0) {
      return _decimal6Format.format(volume); // 1개 미만: 소수점 최대 6자리
    } else {
      return _integerFormat.format(volume); // 1개 이상: 정수 표시
    }
  }
  
  // ==================== 간단 포맷팅 ====================
  
  /// 🔢 간단한 정수 포맷팅 (콤마만 추가)
  static String formatInteger(int number) {
    return _integerFormat.format(number);
  }
  
  /// 📉 소수점 2자리 포맷팅
  static String formatDecimal2(double number) {
    return _decimalFormat.format(number);
  }
  
  /// 📊 소수점 3자리 포맷팅
  static String formatDecimal3(double number) {
    return _decimal3Format.format(number);
  }
  
  // ==================== 특수 포맷팅 ====================
  
  /// 💯 퍼센트 포맷팅 (변화율 등)
  static String formatPercent(double percent, {int decimals = 2}) {
    final formatter = decimals == 1 ? _decimal1Format : _decimalFormat;
    return '${formatter.format(percent)}%';
  }
  
  /// 📏 크기에 따른 동적 포맷팅
  static String formatDynamic(double value) {
    if (value.abs() < 1) {
      return _decimal6Format.format(value);
    } else if (value.abs() < 100) {
      return _decimalFormat.format(value);
    } else {
      return _integerFormat.format(value);
    }
  }
  
  // ==================== 단위 변환 포맷팅 ====================
  
  /// 💰 만원 단위로 변환 (AmountDisplayWidget 호환)
  static String formatToManWon(double amount) {
    final manWon = amount / 10000;
    return '${_integerFormat.format(manWon)}만';
  }
  
  /// 📊 억원 단위로 변환
  static String formatToEokWon(double amount) {
    final eokWon = amount / 100000000;
    return '${_decimalFormat.format(eokWon)}억';
  }
  
  /// 📈 조원 단위로 변환
  static String formatToJoWon(double amount) {
    final joWon = amount / 1000000000000;
    return '${_decimalFormat.format(joWon)}조';
  }
  
  // ==================== 헬퍼 메서드 ====================
  
  /// 🎯 금액 크기 판별
  static String getAmountUnit(double amount) {
    if (amount < 10000) {
      return '원';
    } else if (amount < 100000000) {
      return '만원';
    } else if (amount < 1000000000000) {
      return '억원';
    } else if (amount < 10000000000000000) {
      return '조원';
    } else {
      return '경원';
    }
  }
  
  /// 📏 소수점 자릿수 결정
  static int getDecimalPlaces(double value) {
    if (value <= 1.0) return 6;
    if (value < 10.0) return 3;
    if (value < 100.0) return 2;
    if (value < 1000.0) return 1;
    return 0;
  }
  
  /// 🔄 포맷터 선택
  static NumberFormat getFormatter(double value) {
    final decimals = getDecimalPlaces(value);
    switch (decimals) {
      case 6: return _decimal6Format;
      case 3: return _decimal3Format;
      case 2: return _decimalFormat;
      case 1: return _decimal1Format;
      default: return _integerFormat;
    }
  }
}\n\n// ====== lib/shared/theme/app_theme.dart ======\n
import 'package:flutter/material.dart';
import '../../core/bridge/signal_bus.dart'; // ExchangePlatform 임포트

/// 앱의 테마 설정을 관리하는 클래스
class AppTheme {
  AppTheme._(); // private 생성자
  
  // 공통 컬러 팔레트
  static const Color neutralWhite = Colors.white;
  static const Color neutralBlack = Colors.black;
  static const Color neutralGrey = Colors.grey;
  static const Color accentOrange = Colors.orange;
  
  // 플랫폼별 포인트 컬러
  static Color getPrimaryColor(ExchangePlatform platform) {
    switch (platform) {
      case ExchangePlatform.upbit:
        return accentOrange;
      case ExchangePlatform.binance:
        return const Color(0xFFF0B90B); // 바이낸스 노랑
      case ExchangePlatform.bybit:
        return const Color(0xFF00C087); // 바이빗 초록
      case ExchangePlatform.bithumb:
        return const Color(0xFF1A3C34); // 빗썸 초록
    }
  }

  static Color getSecondaryColor(ExchangePlatform platform) {
    switch (platform) {
      case ExchangePlatform.upbit:
        return Colors.orangeAccent;
      case ExchangePlatform.binance:
        return const Color(0xFFF3BA2F); // 바이낸스 밝은 노랑
      case ExchangePlatform.bybit:
        return const Color(0xFF00D4B1); // 바이빗 밝은 초록
      case ExchangePlatform.bithumb:
        return const Color(0xFF2A5D52); // 빗썸 밝은 초록
    }
  }
  
  // 기본 테마 설정 (시스템 모드 또는 기본값용)
  static ThemeData light({ExchangePlatform platform = ExchangePlatform.upbit}) {
    final primaryColor = getPrimaryColor(platform);
    final secondaryColor = getSecondaryColor(platform);
    
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        brightness: Brightness.light,
        primary: primaryColor,
        secondary: secondaryColor,
      ),
      appBarTheme: const AppBarTheme(
        centerTitle: true,
        elevation: 0,
      ),
      cardTheme: const CardThemeData(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(12)),
        ),
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        selectedItemColor: primaryColor,
        unselectedItemColor: neutralGrey,
        showUnselectedLabels: true,
        type: BottomNavigationBarType.fixed,
      ),
      textTheme: const TextTheme(
        bodyLarge: TextStyle(fontSize: 16),
        bodyMedium: TextStyle(fontSize: 14),
        titleLarge: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          foregroundColor: neutralWhite,
          backgroundColor: primaryColor,
          textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
        ),
      ),
    );
  }
  
  // 다크 테마
  static ThemeData dark({ExchangePlatform platform = ExchangePlatform.upbit}) {
    final primaryColor = getPrimaryColor(platform);
    final secondaryColor = getSecondaryColor(platform);
    
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        brightness: Brightness.dark,
        primary: primaryColor,
        secondary: secondaryColor,
      ),
      appBarTheme: const AppBarTheme(
        centerTitle: true,
        elevation: 0,
      ),
      cardTheme: const CardThemeData(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(12)),
        ),
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        selectedItemColor: primaryColor,
        unselectedItemColor: neutralGrey,
        showUnselectedLabels: true,
        type: BottomNavigationBarType.fixed,
      ),
      textTheme: const TextTheme(
        bodyLarge: TextStyle(fontSize: 16),
        bodyMedium: TextStyle(fontSize: 14),
        titleLarge: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          foregroundColor: neutralBlack,
          backgroundColor: primaryColor,
          textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
        ),
      ),
    );
  }
  
  // 시스템 테마 (시스템 설정에 따라 라이트/다크 결정)
  static ThemeData system(BuildContext context, {ExchangePlatform platform = ExchangePlatform.upbit}) {
    final brightness = MediaQuery.of(context).platformBrightness;
    return brightness == Brightness.light
        ? light(platform: platform)
        : dark(platform: platform);
  }
}\n\n// ====== lib/shared/widgets/settings/slider_position_segment.dart ======\n
import 'package:flutter/material.dart';
import '../../../domain/entities/app_settings.dart'; // SliderPosition enum

/// 🎚️ 슬라이더 위치 설정 세그먼트 위젯 (각진 스타일)
class SliderPositionSegment extends StatelessWidget {
  final SliderPosition value;
  final ValueChanged<SliderPosition> onChanged;

  const SliderPositionSegment({
    super.key,
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    // 다른 세그먼트 컨트롤과 동일한 스타일을 위한 컨테이너
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          // '상단' 버튼
          _buildSegmentButton(
            context: context,
            position: SliderPosition.top,
            label: '위',
          ),
          // 구분선
          _buildDivider(),
          // '하단' 버튼
          _buildSegmentButton(
            context: context,
            position: SliderPosition.bottom,
            label: '아래',
          ),
        ],
      ),
    );
  }

  /// 각 세그먼트 버튼을 생성하는 헬퍼 메서드
  Widget _buildSegmentButton({
    required BuildContext context,
    required SliderPosition position,
    required String label,
  }) {
    final isSelected = value == position;
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    // ✨ Deprecation 경고 수정: withOpacity(0.1) -> withAlpha(26)
    final backgroundColor = isSelected ? Colors.orange.withAlpha(26) : Colors.transparent;

    return GestureDetector(
      onTap: () => onChanged(position),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // 슬라이더 위치를 시각적으로 보여주는 아이콘
            _buildSliderIcon(isTop: position == SliderPosition.top, isSelected: isSelected),
            const SizedBox(height: 2),
            // '위' 또는 '아래' 텍스트
            Text(
              label,
              style: TextStyle(
                fontSize: 11,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  /// 버튼 사이에 표시될 구분선
  Widget _buildDivider() {
    return Container(
      width: 1,
      height: 40, // 아이콘과 텍스트 높이에 맞게 조정
      color: Colors.grey.shade300,
    );
  }
  
  /// 슬라이더 위치를 표현하는 아이콘 위젯 (기존 로직 활용)
  Widget _buildSliderIcon({required bool isTop, required bool isSelected}) {
    final activeColor = isSelected ? Colors.orange : Colors.grey.shade600;
    final inactiveColor = Colors.grey.shade400;

    final sliderHandle = Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: 6,
          height: 6,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: activeColor,
          ),
        ),
        const SizedBox(width: 1),
        Container(
          width: 12,
          height: 1.5,
          color: activeColor,
        ),
      ],
    );

    final dummyItems = Row(
      mainAxisSize: MainAxisSize.min,
      children: List.generate(
        4,
        (i) => Padding(
          padding: const EdgeInsets.symmetric(horizontal: 0.5),
          child: Container(
            width: 3,
            height: 1.5,
            color: inactiveColor,
          ),
        ),
      ),
    );

    // isTop 플래그에 따라 위젯 순서 변경
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: isTop
          ? [sliderHandle, const SizedBox(height: 2), dummyItems]
          : [dummyItems, const SizedBox(height: 2), sliderHandle],
    );
  }
}
\n\n// ====== lib/shared/widgets/settings/font_segment.dart ======\n
import 'package:flutter/material.dart';
import '../../../domain/entities/app_settings.dart';

/// 🔤 폰트 세그먼트 위젯 (디바운싱 및 고정 크기 적용)
class FontSegment extends StatefulWidget {
  final FontFamily value;
  final ValueChanged<FontFamily> onChanged;

  const FontSegment({
    super.key,
    required this.value,
    required this.onChanged,
  });

  @override
  State<FontSegment> createState() => _FontSegmentState();
}

class _FontSegmentState extends State<FontSegment> {
  bool _isTapped = false;

  void _handleTap() {
    if (_isTapped) return;
    
    setState(() {
      _isTapped = true;
    });

    final currentIndex = FontFamily.values.indexOf(widget.value);
    final nextIndex = (currentIndex + 1) % FontFamily.values.length;
    final nextFont = FontFamily.values[nextIndex];

    widget.onChanged(nextFont);

    Future.delayed(const Duration(milliseconds: 500), () {
      if (mounted) {
        setState(() {
          _isTapped = false;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    // SizedBox로 감싸 버튼의 크기를 고정시킵니다.
    return SizedBox(
      width: 70, // 고정 너비
      height: 40, // 고정 높이
      child: GestureDetector(
        onTap: _handleTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          alignment: Alignment.center, // 텍스트를 중앙에 정렬
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.grey.shade300), // 회색 테두리로 변경
            color: _isTapped
                ? Colors.grey.withAlpha(50)
                : Colors.orange.withAlpha(26),
          ),
          child: Text(
            'Abc',
            style: TextStyle(
              fontFamily: widget.value.fontName,
              fontSize: 16,
              color: Colors.orange,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}\n\n// ====== lib/shared/widgets/settings/theme_mode_segment.dart ======\n
import 'package:flutter/material.dart';

/// 🎨 테마 모드 세그먼트 위젯 (3개 토글)
class ThemeModeSegment extends StatelessWidget {
  final ThemeMode themeMode;
  final ValueChanged<ThemeMode> onChanged;

  const ThemeModeSegment({
    super.key,
    required this.themeMode,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSegmentButton(
            context: context,
            label: '시스템',
            icon: Icons.phone_iphone,
            isSelected: themeMode == ThemeMode.system,
            onTap: () => onChanged(ThemeMode.system),
          ),
          _buildDivider(),
          _buildSegmentButton(
            context: context,
            label: '라이트',
            icon: Icons.wb_sunny,
            isSelected: themeMode == ThemeMode.light,
            onTap: () => onChanged(ThemeMode.light),
          ),
          _buildDivider(),
          _buildSegmentButton(
            context: context,
            label: '다크',
            icon: Icons.nightlight_round,
            isSelected: themeMode == ThemeMode.dark,
            onTap: () => onChanged(ThemeMode.dark),
          ),
        ],
      ),
    );
  }

  /// 개별 세그먼트 버튼 생성
  Widget _buildSegmentButton({
    required BuildContext context,
    required String label,
    required IconData icon,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    final backgroundColor = isSelected ? Colors.orange.withAlpha(26) : Colors.transparent;

    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(
                fontSize: 11,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 버튼 사이 구분선
  Widget _buildDivider() {
    return Container(
      width: 1,
      height: 40,
      color: Colors.grey.shade300,
    );
  }
}\n\n// ====== lib/shared/widgets/market_mood_modal.dart ======\n
\n\n// ====== lib/shared/widgets/amount_display_widget.dart ======\n
// lib/shared/widgets/amount_display_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../core/di/settings_provider.dart';
import '../../domain/entities/app_settings.dart';

/// 거래 금액 표시 위젯 (숫자 ↔ 아이콘)
class AmountDisplayWidget extends ConsumerWidget {
  final double totalAmount; // 총 거래 금액 (원 단위)
  final bool isBuy; // 매수/매도 구분 (색상용)
  final double fontSize;
  final FontWeight fontWeight;
  
  // 포맷터 캐싱
  static final _integerFormat = NumberFormat('#,###');
  
  const AmountDisplayWidget({
    Key? key,
    required this.totalAmount,
    required this.isBuy,
    this.fontSize = 16,
    this.fontWeight = FontWeight.bold,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final amountDisplayMode = ref.watch(appSettingsProvider).amountDisplayMode;
    
    return amountDisplayMode == AmountDisplayMode.icon
        ? _buildAmountIcon(context)
        : _buildAmountText(context);
  }

  /// 숫자로 금액 표시
  Widget _buildAmountText(BuildContext context) {
    return Text(
      '${_integerFormat.format(totalAmount / 10000)}만',
      style: TextStyle(
        fontWeight: fontWeight,
        color: isBuy ? Colors.green : Colors.red,
        fontSize: fontSize,
      ),
      overflow: TextOverflow.ellipsis,
      maxLines: 1,
    );
  }

  /// 아이콘으로 금액 표시 (1000만 ~ 100억원)
  Widget _buildAmountIcon(BuildContext context) {
    final amountInMan = (totalAmount / 10000).round(); // 만원 단위
    
    // 1000만원 미만이면 숫자로 표시
    if (amountInMan < 1000) {
      return _buildAmountText(context);
    }
    
    final assetPath = _getIconPath(amountInMan);
    
    return Image.asset(
      assetPath,
      width: 64,
      height: 40,
      fit: BoxFit.contain,
      errorBuilder: (context, error, stackTrace) {
        // 아이콘 로드 실패 시 숫자로 fallback
        return _buildAmountText(context);
      },
    );
  }

  /// 금액에 따른 아이콘 경로 결정
  String _getIconPath(int amountInMan) {
    if (amountInMan >= 1000 && amountInMan < 5000) {
      return _get1000SeriesPath(amountInMan);
    } else if (amountInMan >= 5000 && amountInMan < 100000) {
      return _get5000SeriesPath(amountInMan);
    } else if (amountInMan >= 100000 && amountInMan <= 1000000) {
      return _get10000SeriesPath(amountInMan);
    } else {
      // 100억 초과시 최대값으로
      return 'assets/icons/money/money_10000_10.png';
    }
  }

  /// 🔧 1000 시리즈 (1000만 ~ 4999만) - 세련된 계산식
  String _get1000SeriesPath(int amountInMan) {
    // 1000만원 기준으로 정규화하고 1000만원 단위로 레벨 결정
    final normalizedAmount = amountInMan - 1000; // 1000만원을 0으로 맞춤
    final level = (normalizedAmount / 1000).floor() + 1; // 1000만원 단위로 레벨 계산
    final clampedLevel = level.clamp(1, 4); // 1~4 범위로 제한
    
    return 'assets/icons/money/money_1000_$clampedLevel.png';
    
    // 수학적 매핑:
    // 1000~1999만 → (0~999)/1000 + 1 = 1 → money_1000_1.png
    // 2000~2999만 → (1000~1999)/1000 + 1 = 2 → money_1000_2.png
    // 3000~3999만 → (2000~2999)/1000 + 1 = 3 → money_1000_3.png
    // 4000~4999만 → (3000~3999)/1000 + 1 = 4 → money_1000_4.png
  }

  /// 🔧 5000 시리즈 (5000만 ~ 9억9999만) - 정확한 구간 매핑
  String _get5000SeriesPath(int amountInMan) {
    // 5000만원 기준으로 정규화
    final normalizedAmount = amountInMan - 5000; // 5000만원을 0으로 맞춤
    
    // 5000만원 단위와 1000만원 나머지 계산
    final fiveThousandUnits = (normalizedAmount / 5000).floor(); // 5천만 추가 개수
    final remainder = normalizedAmount % 5000; // 1000만원 단위 나머지
    
    // 총 5천만 개수 (기본 1개 + 추가 개수)
    final totalFiveThousands = fiveThousandUnits + 1;
    
    if (remainder == 0) {
      // 정확히 5천만 배수: 5000만, 1억, 1억5천만, 2억...
      final clampedCount = totalFiveThousands.clamp(1, 19);
      return 'assets/icons/money/money_5000_$clampedCount.png';
    } else {
      // 5천만 + 천만 조합
      final thousandLevel = _getThousandLevel(remainder); // 🔧 정확한 구간 매핑
      
      if (totalFiveThousands <= 3) {
        // 조합 지원: 1~3장까지
        return 'assets/icons/money/money_5000_${totalFiveThousands}_1000_$thousandLevel.png';
      } else {
        // 4장 이상은 조합 미지원, 스마트 반올림
        final roundedFiveThousands = remainder >= 2500 
          ? (totalFiveThousands + 1).clamp(4, 19)  // 2500만 이상이면 올림
          : totalFiveThousands.clamp(4, 19);       // 미만이면 버림
        return 'assets/icons/money/money_5000_$roundedFiveThousands.png';
      }
    }
    
    // 정확한 매핑 예시:
    // 5000만 → money_5000_1.png
    // 6200만 → remainder=1200 → level=1 → money_5000_1_1000_1.png ✅
    // 7800만 → remainder=2800 → level=2 → money_5000_1_1000_2.png ✅
    // 8300만 → remainder=3300 → level=3 → money_5000_1_1000_3.png ✅
    // 8560만 → remainder=3560 → level=3 → money_5000_1_1000_3.png ✅
    // 9200만 → remainder=4200 → level=4 → money_5000_1_1000_4.png ✅
  }
  
  /// 🔧 천만원 나머지를 정확한 레벨로 매핑
  int _getThousandLevel(int remainder) {
    if (remainder >= 1000 && remainder < 2000) return 1; // 1000~1999만 → level 1
    if (remainder >= 2000 && remainder < 3000) return 2; // 2000~2999만 → level 2  
    if (remainder >= 3000 && remainder < 4000) return 3; // 3000~3999만 → level 3
    return 4; // 4000만 이상 → level 4
  }

  /// 🔧 10000 시리즈 (10억 ~ 100억원) - 세련된 계산식
  String _get10000SeriesPath(int amountInMan) {
    // 10억원(100000만) 기준으로 정규화
    final normalizedAmount = amountInMan - 100000; // 10억원을 0으로 맞춤
    
    // 10억원 단위와 나머지 계산
    final tenBillionUnits = (normalizedAmount / 100000).floor(); // 10억 추가 개수
    final remainder = normalizedAmount % 100000; // 10억 미만 나머지
    
    // 총 10억 개수 (기본 1개 + 추가 개수)
    final totalTenBillions = tenBillionUnits + 1;
    
    if (remainder == 0) {
      // 정확히 10억 배수: 10억, 20억, 30억...
      final clampedCount = totalTenBillions.clamp(1, 10);
      return 'assets/icons/money/money_10000_$clampedCount.png';
    } else {
      // 10억 + 나머지 조합
      if (totalTenBillions <= 2) {
        // 조합 지원: 1~2장까지
        // 나머지를 5천만 단위로 변환 (정밀한 매핑)
        final fiveThousandCount = _calculateFiveThousandLevel(remainder);
        final clampedFiveThousand = fiveThousandCount.clamp(1, 19);
        return 'assets/icons/money/money_10000_${totalTenBillions}_5000_$clampedFiveThousand.png';
      } else {
        // 3장 이상은 조합 미지원, 스마트 반올림
        final roundedTenBillions = remainder >= 50000 
          ? (totalTenBillions + 1).clamp(3, 10)  // 5억 이상이면 올림
          : totalTenBillions.clamp(3, 10);       // 미만이면 버림
        return 'assets/icons/money/money_10000_$roundedTenBillions.png';
      }
    }
    
    // 수학적 매핑 예시:
    // 10억 → normalized=0, total=1 → money_10000_1.png
    // 15억 → normalized=50000, total=1, fiveThousand=10 → money_10000_1_5000_10.png
    // 23억 → normalized=130000, total=2, remainder=30000, fiveThousand=6 → money_10000_2_5000_6.png
    // 35억 → normalized=250000, total=3, remainder>=50000 → money_10000_4.png (올림)
  }
  
  /// 나머지 금액을 5천만 레벨로 정밀 변환하는 헬퍼 함수
  int _calculateFiveThousandLevel(int remainder) {
    // 5천만원 단위로 나누고, 2500만원 기준으로 반올림
    final exactLevel = remainder / 5000; // 정확한 5천만 레벨
    return exactLevel.round(); // 반올림으로 가장 가까운 정수
    
    // 예시:
    // 2500만원 → 2500/5000 = 0.5 → round() = 1 → 5천만 1장
    // 7500만원 → 7500/5000 = 1.5 → round() = 2 → 5천만 2장
    // 12000만원 → 12000/5000 = 2.4 → round() = 2 → 5천만 2장
    // 13000만원 → 13000/5000 = 2.6 → round() = 3 → 5천만 3장
  }
}\n\n// ====== lib/shared/widgets/ws_status_indicator.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // 🎯 HapticFeedback import 추가
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart'; // 🔧 수정: app_providers로 통합
import '../../core/network/websocket/base_ws_client.dart';
import 'websocket_modal.dart'; // 🆕 WebSocket 모달 import

class WsStatusIndicator extends ConsumerWidget {
  final double size;
  final bool showTooltip;
  final EdgeInsets? padding;

  const WsStatusIndicator({
    Key? key,
    this.size = 16,
    this.showTooltip = false, // 🔧 기본값을 false로 변경 (롱프레스 모달과 충돌 방지)
    this.padding,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final status = ref.watch(wsStatusProvider);
    
    Widget indicator = _buildStatusIcon(context, ref, status);
    
    if (padding != null) {
      indicator = Padding(padding: padding!, child: indicator);
    }
    
    return indicator;
  }

  Widget _buildStatusIcon(BuildContext context, WidgetRef ref, WsStatus status) {
    Widget statusIcon = _getStatusIcon(status);
    
    // 롱프레스 제스처 추가
    return GestureDetector(
      onLongPressStart: (details) => _showWebSocketModal(context, ref, details.globalPosition),
      onLongPressEnd: (_) => _hideWebSocketModal(),
      onLongPressCancel: () => _hideWebSocketModal(),
      child: statusIcon,
    );
  }

  /// WebSocket 상세 모달 표시
void _showWebSocketModal(BuildContext context, WidgetRef ref, Offset globalPosition) {
  // 🎯 햅틱 피드백 추가 (톡~ 소리 복구!)
  if (ref.read(appSettingsProvider).isHapticEnabled) {
    HapticFeedback.mediumImpact();
  }
  // 기존 툴팁 숨기기
  Tooltip.dismissAllToolTips();
    
    // 화면 크기 가져오기
    final screenSize = MediaQuery.of(context).size;
    final modalWidth = size * 4.2 * 2.5; // 🔧 위치 계산용 크기도 원래대로
    
    // 화면 경계 고려한 위치 계산
    double adjustedX = globalPosition.dx - (modalWidth / 2); // 중앙 정렬
    double adjustedY = globalPosition.dy - (size * 3); // 위쪽으로
    
    // 좌측 경계 체크
    if (adjustedX < 16) {
      adjustedX = 16; // 최소 여백
    }
    
    // 우측 경계 체크
    if (adjustedX + modalWidth > screenSize.width - 16) {
      adjustedX = screenSize.width - modalWidth - 16; // 우측 여백 확보
    }
    
    // 상단 경계 체크
    if (adjustedY < 50) {
      adjustedY = globalPosition.dy + size + 8; // 아래쪽으로 이동
    }
    
    final adjustedPosition = Offset(adjustedX, adjustedY);
    
    WebSocketStatsOverlay.show(
      context: context,
      ref: ref,
      position: adjustedPosition,
      statusIconSize: size,
    );
  }

  /// WebSocket 모달 숨기기
  void _hideWebSocketModal() {
    WebSocketStatsOverlay.hide();
  }

  Widget _getStatusIcon(WsStatus status) {
    switch (status) {
      case WsStatus.connected:
        return _AnimatedStatusIcon(
          icon: Icons.circle,
          color: Colors.green,
          tooltip: showTooltip ? '실시간 연결됨 (롱프레스: 상세정보)' : null,
          animationType: AnimationType.pulse,
          size: size,
        );
        
      case WsStatus.connecting:
        return _AnimatedStatusIcon(
          icon: Icons.refresh,
          color: Colors.blue,
          tooltip: showTooltip ? '연결 중... (롱프레스: 상세정보)' : null,
          animationType: AnimationType.rotate,
          size: size,
        );
        
      case WsStatus.reconnecting:
        return _AnimatedStatusIcon(
          icon: Icons.refresh,
          color: Colors.orange,
          tooltip: showTooltip ? '재연결 중... (롱프레스: 상세정보)' : null,
          animationType: AnimationType.rotate,
          size: size,
        );
        
      case WsStatus.disconnected:
        return _AnimatedStatusIcon(
          icon: Icons.circle,
          color: Colors.grey,
          tooltip: showTooltip ? '연결 끊김 (롱프레스: 상세정보)' : null,
          animationType: AnimationType.none,
          size: size,
        );
        
      case WsStatus.pongTimeout:
        return _AnimatedStatusIcon(
          icon: Icons.circle,
          color: Colors.red,
          tooltip: showTooltip ? 'ping 타임아웃 (롱프레스: 상세정보)' : null,
          animationType: AnimationType.blink,
          size: size,
        );
        
      case WsStatus.failed:
      case WsStatus.error:
        return _AnimatedStatusIcon(
          icon: Icons.error_outline,
          color: Colors.red,
          tooltip: showTooltip ? (status == WsStatus.failed ? '연결 실패 (롱프레스: 상세정보)' : '에러 발생 (롱프레스: 상세정보)') : null,
          animationType: AnimationType.blink,
          size: size,
        );
        
      case WsStatus.maxRetryExceeded:
        return _AnimatedStatusIcon(
          icon: Icons.warning,
          color: Colors.deepOrange,
          tooltip: showTooltip ? '최대 재시도 초과 (롱프레스: 상세정보)' : null,
          animationType: AnimationType.blink,
          size: size,
        );
    }
  }
}

enum AnimationType { none, pulse, rotate, blink }

class _AnimatedStatusIcon extends StatefulWidget {
  final IconData icon;
  final Color color;
  final String? tooltip;
  final AnimationType animationType;
  final double size;

  const _AnimatedStatusIcon({
    required this.icon,
    required this.color,
    required this.animationType,
    required this.size,
    this.tooltip,
  });

  @override
  State<_AnimatedStatusIcon> createState() => _AnimatedStatusIconState();
}

class _AnimatedStatusIconState extends State<_AnimatedStatusIcon>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _setupAnimation();
  }

  void _setupAnimation() {
    switch (widget.animationType) {
      case AnimationType.pulse:
        _controller = AnimationController(
          duration: const Duration(seconds: 2),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.7, end: 1.0).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case AnimationType.rotate:
        _controller = AnimationController(
          duration: const Duration(seconds: 1),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
        _controller.repeat();
        break;
        
      case AnimationType.blink:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 800),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.3, end: 1.0).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case AnimationType.none:
        _controller = AnimationController(vsync: this);
        _animation = const AlwaysStoppedAnimation(1.0);
        break;
    }
  }

  @override
  void didUpdateWidget(_AnimatedStatusIcon oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.animationType != widget.animationType) {
      _controller.dispose();
      _setupAnimation();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    Widget iconWidget = AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        Widget icon = Icon(
          widget.icon,
          color: widget.color,
          size: widget.size,
        );

        switch (widget.animationType) {
          case AnimationType.pulse:
          case AnimationType.blink:
            return Transform.scale(
              scale: _animation.value,
              child: Opacity(
                opacity: _animation.value,
                child: icon,
              ),
            );
            
          case AnimationType.rotate:
            return Transform.rotate(
              angle: _animation.value * 2 * 3.14159,
              child: icon,
            );
            
          case AnimationType.none:
            return icon;
        }
      },
    );

    if (widget.tooltip != null) {
      return Tooltip(
        message: widget.tooltip!,
        child: iconWidget,
      );
    }
    
    return iconWidget;
  }
}\n\n// ====== lib/shared/widgets/market_mood_indicator.dart ======\n
// lib/shared/widgets/market_mood_indicator.dart
// 🎨 Shared Widget: Market Mood 인디케이터 (클린 아키텍처 완전 대응)

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../presentation/controllers/market_mood_controller.dart';

/// 🎨 메인 마켓무드 인디케이터 위젯
class MarketMoodIndicator extends ConsumerWidget {
  final double size;
  final bool showTooltip;
  final EdgeInsets? padding;

  const MarketMoodIndicator({
    Key? key,
    this.size = 16,
    this.showTooltip = false,
    this.padding,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // [수정] 중앙 계산 Provider를 watch하여 로딩/에러/데이터 상태를 한 번에 처리합니다.
    final computedAsync = ref.watch(marketMoodComputedDataProvider);
    
    Widget indicator = computedAsync.when(
      data: (computed) {
        // [수정] marketData가 아직 로드되지 않은 초기 상태일 수 있으므로 null 체크 추가
        if (computed.marketData == null) {
          return _buildLoadingIcon();
        }
        // [수정] computed 객체에서 필요한 marketData와 currentMood를 직접 가져옵니다.
        return _buildMoodIcon(context, ref, computed.marketData!, computed.currentMood);
      },
      loading: () => _buildLoadingIcon(),
      error: (_, __) => _buildErrorIcon(),
    );
    
    if (padding != null) {
      indicator = Padding(padding: padding!, child: indicator);
    }
    
    return indicator;
  }

  Widget _buildMoodIcon(BuildContext context, WidgetRef ref, MarketMoodData data, MarketMood mood) {
    Widget moodIcon = _getMoodIcon(mood);
    
    // 롱프레스 제스처 추가
    return GestureDetector(
      onLongPressStart: (details) => _showMarketMoodModal(context, ref, details.globalPosition, data),
      onLongPressEnd: (_) => _hideMarketMoodModal(),
      onLongPressCancel: () => _hideMarketMoodModal(),
      child: moodIcon,
    );
  }

  Widget _buildLoadingIcon() {
    return _AnimatedMoodIcon(
      icon: Icons.refresh,
      color: Colors.grey,
      tooltip: showTooltip ? '시장 데이터 로딩 중...' : null,
      animationType: MoodAnimationType.rotate,
      size: size,
    );
  }

  Widget _buildErrorIcon() {
    return _AnimatedMoodIcon(
      icon: Icons.error_outline,
      color: Colors.red,
      tooltip: showTooltip ? '시장 데이터 로드 실패' : null,
      animationType: MoodAnimationType.blink,
      size: size,
    );
  }

  /// 🔥 시장 분위기 모달 표시 - 컨트롤러의 MarketMoodModalManager 사용
void _showMarketMoodModal(BuildContext context, WidgetRef ref, Offset globalPosition, MarketMoodData data) {
  if (ref.read(appSettingsProvider).isHapticEnabled) {
    HapticFeedback.mediumImpact();
  }
  Tooltip.dismissAllToolTips();
    
    // 화면 크기와 모달 크기 계산
    final screenSize = MediaQuery.of(context).size;
    final modalWidth = screenSize.width * 0.9; // 90% 너비 사용
    
    // 화면 경계 고려한 위치 계산
    double adjustedX = globalPosition.dx - (modalWidth / 2); // 중앙 정렬
    double adjustedY = globalPosition.dy + size + 40; // 🔥 무조건 아래쪽으로 (위쪽 계산 제거)
    
    // 좌측 경계 체크
    if (adjustedX < 16) {
      adjustedX = 16;
    }
    
    // 우측 경계 체크
    if (adjustedX + modalWidth > screenSize.width - 16) {
      adjustedX = screenSize.width - modalWidth - 16;
    }
    
    // 하단 경계 체크 - 화면 밖으로 나가면 위로 조정
    final bottomSafeArea = MediaQuery.of(context).padding.bottom;
    final maxY = screenSize.height - bottomSafeArea - 300; // 모달 최소 높이 고려
    if (adjustedY > maxY) {
      adjustedY = globalPosition.dy - 250; // 충분히 위로 올려서 표시
    }
    
    final adjustedPosition = Offset(adjustedX, adjustedY);
    
    // 컨트롤러의 MarketMoodModalManager 사용
    MarketMoodModalManager.show(
      context: context,
      ref: ref,
      position: adjustedPosition,
      statusIconSize: size,
      data: data,
    );
  }

  /// 🔥 시장 분위기 모달 숨기기
  void _hideMarketMoodModal() {
    MarketMoodModalManager.hide();
  }

  Widget _getMoodIcon(MarketMood mood) {
    switch (mood) {
      case MarketMood.bull:
        return _AnimatedMoodIcon(
          icon: Icons.rocket_launch,
          color: const Color(0xFFFF6B35), // 🚀 화염 오렌지-레드 톤
          tooltip: showTooltip ? '🚀 불장 - 30분 전 대비 +15% 이상 (롱프레스: 상세정보)' : null,
          animationType: MoodAnimationType.fastPulse,
          size: size,
        );
        
      case MarketMood.weakBull:
        return _AnimatedMoodIcon(
          icon: Icons.local_fire_department,
          color: const Color(0xFFFF6B35), // 🔥 화염 오렌지-레드 톤
          tooltip: showTooltip ? '🔥 약불장 - 30분 전 대비 +5~15% (롱프레스: 상세정보)' : null,
          animationType: MoodAnimationType.fireFlicker,
          size: size,
        );
        
      case MarketMood.sideways:
        return _AnimatedMoodIcon(
          icon: Icons.balance,
          color: const Color(0xFF757575), // ⚖️ 중성 회색
          tooltip: showTooltip ? '⚖️ 중간장 - 30분 전 대비 -5~+5% (롱프레스: 상세정보)' : null,
          animationType: MoodAnimationType.wiggle,
          size: size,
        );
        
      case MarketMood.bear:
        return _AnimatedMoodIcon(
          icon: Icons.water_drop,
          color: const Color(0xFF4A90E2), // 💧 물방울 블루 톤
          tooltip: showTooltip ? '💧 물장 - 30분 전 대비 -5~-15% (롱프레스: 상세정보)' : null,
          animationType: MoodAnimationType.waterDrop,
          size: size,
        );
        
      case MarketMood.deepBear:
        return _AnimatedMoodIcon(
          icon: Icons.ac_unit,
          color: const Color(0xFF4A90E2), // 🧊 얼음장 블루 톤
          tooltip: showTooltip ? '🧊 얼음장 - 30분 전 대비 -15% 이하 (롱프레스: 상세정보)' : null,
          animationType: MoodAnimationType.coldShiver,
          size: size,
        );
    }
  }
}

/// 🎨 애니메이션 타입 enum
enum MoodAnimationType { 
  none, 
  fastPulse, 
  fireFlicker, 
  wiggle, 
  waterDrop, 
  coldShiver, 
  rotate, 
  blink 
}

/// 🎨 애니메이션 아이콘 위젯
class _AnimatedMoodIcon extends StatefulWidget {
  final IconData icon;
  final Color color;
  final String? tooltip;
  final MoodAnimationType animationType;
  final double size;

  const _AnimatedMoodIcon({
    required this.icon,
    required this.color,
    required this.animationType,
    required this.size,
    this.tooltip,
  });

  @override
  State<_AnimatedMoodIcon> createState() => _AnimatedMoodIconState();
}

class _AnimatedMoodIconState extends State<_AnimatedMoodIcon>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _setupAnimation();
  }

  void _setupAnimation() {
    switch (widget.animationType) {
      case MoodAnimationType.fastPulse:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 800),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.6, end: 1.3).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.fireFlicker:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 600),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.7, end: 1.3).animate(
          CurvedAnimation(parent: _controller, curve: Curves.elasticOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.wiggle:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 2000),
          vsync: this,
        );
        _animation = Tween<double>(begin: -0.15, end: 0.15).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.waterDrop:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 2500),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.85, end: 1.0).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.coldShiver:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 150),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.95, end: 1.0).animate(
          CurvedAnimation(parent: _controller, curve: Curves.linear),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.rotate:
        _controller = AnimationController(
          duration: const Duration(seconds: 1),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0, end: 1).animate(_controller);
        _controller.repeat();
        break;
        
      case MoodAnimationType.blink:
        _controller = AnimationController(
          duration: const Duration(milliseconds: 800),
          vsync: this,
        );
        _animation = Tween<double>(begin: 0.3, end: 1.0).animate(
          CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
        );
        _controller.repeat(reverse: true);
        break;
        
      case MoodAnimationType.none:
        _controller = AnimationController(vsync: this);
        _animation = const AlwaysStoppedAnimation(1.0);
        break;
    }
  }

  @override
  void didUpdateWidget(_AnimatedMoodIcon oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.animationType != widget.animationType) {
      _controller.dispose();
      _setupAnimation();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    Widget iconWidget = AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        Widget icon = Icon(
          widget.icon,
          color: widget.color,
          size: widget.size,
        );

        switch (widget.animationType) {
          case MoodAnimationType.fastPulse:
            return Transform.translate(
              offset: Offset(0, (_animation.value - 1) * 2),
              child: Transform.scale(
                scale: _animation.value,
                child: Opacity(
                  opacity: (_animation.value * 0.8 + 0.2).clamp(0.5, 1.0),
                  child: icon,
                ),
              ),
            );
            
          case MoodAnimationType.fireFlicker:
            return Transform.scale(
              scale: _animation.value,
              child: Transform.rotate(
                angle: (_animation.value - 1) * 0.1,
                child: Opacity(
                  opacity: (_animation.value * 0.8 + 0.2).clamp(0.4, 1.0),
                  child: icon,
                ),
              ),
            );
            
          case MoodAnimationType.wiggle:
            return Transform.rotate(
              angle: _animation.value,
              child: Transform.scale(
                scale: 0.95 + (_animation.value.abs() * 0.1),
                child: icon,
              ),
            );
            
          case MoodAnimationType.waterDrop:
            return Transform.translate(
              offset: Offset(0, (1 - _animation.value) * 1.5),
              child: Transform.scale(
                scale: _animation.value,
                child: Opacity(
                  opacity: _animation.value.clamp(0.6, 1.0),
                  child: icon,
                ),
              ),
            );
            
          case MoodAnimationType.coldShiver:
            return Transform.translate(
              offset: Offset(
                (_animation.value - 0.975) * 40,
                (_animation.value - 0.975) * 20,
              ),
              child: Transform.scale(
                scale: _animation.value,
                child: Opacity(
                  opacity: _animation.value.clamp(0.8, 1.0),
                  child: icon,
                ),
              ),
            );
            
          case MoodAnimationType.rotate:
            return Transform.rotate(
              angle: _animation.value * 2 * 3.14159,
              child: icon,
            );
            
          case MoodAnimationType.blink:
            return Transform.scale(
              scale: _animation.value,
              child: Opacity(
                opacity: _animation.value.clamp(0.3, 1.0),
                child: icon,
              ),
            );
            
          case MoodAnimationType.none:
            return icon;
        }
      },
    );

    if (widget.tooltip != null) {
      return Tooltip(
        message: widget.tooltip!,
        preferBelow: false,
        verticalOffset: 20,
        waitDuration: const Duration(milliseconds: 500),
        showDuration: const Duration(seconds: 3),
        decoration: BoxDecoration(
          color: Colors.black87,
          borderRadius: BorderRadius.circular(8),
        ),
        textStyle: const TextStyle(
          fontSize: 11,
          color: Colors.white,
        ),
        child: iconWidget,
      );
    }
    
    return iconWidget;
  }
}\n\n// ====== lib/shared/widgets/sector_logo_provider.dart ======\n
// lib/shared/widgets/sector_logo_provider.dart
// 🚀 캐시 시스템이 적용된 섹터 로고 프로바이더

import 'package:flutter/material.dart';

/// 🎨 섹터 로고 관리 전용 Provider
/// 캐시 시스템 + WebP 지원
class SectorLogoProvider {
  
  /// 🆕 메모리 캐시 (위젯 레벨 캐싱)
  static final Map<String, Widget> _widgetCache = {};
  
  /// 🆕 캐시 설정
  static const int _maxCacheObjects = 50; // 최대 50개 아이콘 캐시
  
  /// 🚀 캐시된 섹터 로고 위젯 생성 (메인 함수)
  static Widget buildSectorIcon({
    required int sectorNumber,
    double size = 40.0,
  }) {
    final cacheKey = 'sector_${sectorNumber}_${size.toInt()}';
    
    // 🎯 메모리 캐시에서 먼저 확인
    if (_widgetCache.containsKey(cacheKey)) {
      return _widgetCache[cacheKey]!;
    }
    
    // 새로운 위젯 생성
    final logoWidget = _buildSectorIconWidget(
      sectorNumber: sectorNumber,
      size: size,
    );
    
    // 🎯 메모리 캐시에 저장 (용량 제한)
    if (_widgetCache.length < _maxCacheObjects) {
      _widgetCache[cacheKey] = logoWidget;
    }
    
    return logoWidget;
  }

  /// 🎯 실제 섹터 아이콘 위젯 생성
  static Widget _buildSectorIconWidget({
    required int sectorNumber,
    required double size,
  }) {
    return SizedBox(
      width: size,
      height: size,
      child: Image.asset(
        'assets/icons/sector/sector$sectorNumber.webp',
        width: size,
        height: size,
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          return Container(
            width: size,
            height: size,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.grey.shade300,
            ),
            child: Center(
              child: Text(
                '📊',
                style: TextStyle(fontSize: size * 0.5),
              ),
            ),
          );
        },
      ),
    );
  }

  /// 🧹 캐시 정리 함수들
  static void clearCache() {
    _widgetCache.clear();
  }
  
  static void clearSpecificCache(int sectorNumber) {
    _widgetCache.removeWhere((key, value) => key.startsWith('sector_$sectorNumber'));
  }
  
  static int getCacheSize() {
    return _widgetCache.length;
  }

  /// 🎯 섹터 번호 유효성 검사
  static bool isValidSectorNumber(int sectorNumber) {
    return sectorNumber >= 1 && sectorNumber <= 46;
  }

  /// 🔧 디버깅용: 캐시 상태 정보
  static Map<String, dynamic> getCacheStatus() {
    return {
      'totalCached': _widgetCache.length,
      'maxCapacity': _maxCacheObjects,
      'cacheKeys': _widgetCache.keys.toList(),
      'memoryUsage': '${(_widgetCache.length / _maxCacheObjects * 100).toStringAsFixed(1)}%',
    };
  }
}\n\n// ====== lib/shared/widgets/notification_service.dart ======\n
// lib/shared/widgets/notification_service.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import '../../core/utils/logger.dart';
import '../../core/di/app_providers.dart';
import '../../core/di/notification_provider.dart'; // 🆕 Provider 분리

/// 🔔 Firebase + 비즈니스 로직을 담당하는 알림 서비스
class NotificationService {
  final Ref ref;
  StreamSubscription<RemoteMessage>? _onMessageSub;
  StreamSubscription<RemoteMessage>? _onMessageOpenedSub;
  
  NotificationService(this.ref);

  /// Firebase 리스너 설정
  void setupFirebaseListeners(GlobalKey<NavigatorState> navigatorKey) {
    final messenger = ref.read(scaffoldMessengerKeyProvider).currentState;
    
    // 앱이 실행 중일 때 알림 수신
    _onMessageSub = FirebaseMessaging.onMessage.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        // 🎯 Provider를 통해 알림 추가
        _addNotificationToProvider(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
        
        // SnackBar로도 표시
        _showNotificationSnackBar(messenger, n, msg.data);
      }
    });
    
    // 앱이 종료된 상태에서 알림 클릭해서 앱 시작
    FirebaseMessaging.instance.getInitialMessage().then((msg) {
      if (msg != null) {
        final n = msg.notification;
        if (n != null) {
          _addNotificationToProvider(
            title: n.title ?? '알림',
            message: n.body ?? '',
            type: _getNotificationType(msg.data),
            extra: msg.data,
          );
        }
      }
    });
    
    // 앱이 백그라운드에 있을 때 알림 클릭
    _onMessageOpenedSub = FirebaseMessaging.onMessageOpenedApp.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        _addNotificationToProvider(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
      }
    });
    
    log.i('🔔 Firebase 알림 리스너 설정 완료');
  }

  /// Provider를 통한 알림 추가 (내부 메서드)
  void _addNotificationToProvider({
    required String title,
    required String message,
    required NotificationType type,
    Map<String, dynamic>? extra,
  }) {
    final notification = NotificationData(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: title,
      message: message,
      type: type,
      createdAt: DateTime.now(),
      extra: extra,
    );
    
    final currentList = ref.read(notificationListProvider);
    ref.read(notificationListProvider.notifier).state = [
      notification,
      ...currentList,
    ];
    
    log.i('🔔 알림 추가: $title (${type.name})');
  }

  /// SnackBar 표시
  void _showNotificationSnackBar(
    ScaffoldMessengerState? messenger,
    RemoteNotification notification,
    Map<String, dynamic>? data,
  ) {
    if (messenger == null) return;
    
    final type = _getNotificationType(data);
    messenger
      ..hideCurrentSnackBar()
      ..showSnackBar(SnackBar(
        content: Row(
          children: [
            Icon(_getIconForType(type), color: Colors.white, size: 20),
            const SizedBox(width: 8),
            Expanded(child: Text('${notification.title}: ${notification.body}')),
          ],
        ),
        backgroundColor: _getColorForType(type),
        duration: const Duration(seconds: 3),
        action: SnackBarAction(
          label: '보기',
          textColor: Colors.white,
          onPressed: () {
            // TODO: 알림 모달 열기
            log.i('📱 알림 상세보기 요청');
          },
        ),
      ));
  }

  /// Firebase 메시지 데이터로부터 알림 타입 추론
  NotificationType _getNotificationType(Map<String, dynamic>? data) {
    if (data == null) return NotificationType.system;
    
    final type = data['type']?.toString().toLowerCase();
    switch (type) {
      case 'trade':
      case 'execution':
        return NotificationType.trade;
      case 'price':
      case 'price_alert':
        return NotificationType.priceAlert;
      case 'volume':
        return NotificationType.volume;
      case 'surge':
      case 'pump':
      case 'dump':
        return NotificationType.surge;
      default:
        return NotificationType.system;
    }
  }

  /// 🆕 타입별 아이콘 반환 (NotificationService 내부 메서드)
  IconData _getIconForType(NotificationType type) {
    switch (type) {
      case NotificationType.trade:
        return Icons.show_chart;
      case NotificationType.priceAlert:
        return Icons.attach_money;
      case NotificationType.volume:
        return Icons.bar_chart;
      case NotificationType.surge:
        return Icons.trending_up;
      case NotificationType.system:
        return Icons.settings;
    }
  }

  /// 🆕 타입별 색상 반환 (NotificationService 내부 메서드)  
  Color _getColorForType(NotificationType type) {
    switch (type) {
      case NotificationType.trade:
        return Colors.blue;
      case NotificationType.priceAlert:
        return Colors.green;
      case NotificationType.volume:
        return Colors.purple;
      case NotificationType.surge:
        return Colors.red;
      case NotificationType.system:
        return Colors.grey;
    }
  }

  /// 🎯 외부에서 호출 가능한 알림 추가 (공개 메서드)
  void addNotification({
    required String title,
    required String message,
    required NotificationType type,
    Map<String, dynamic>? extra,
  }) {
    _addNotificationToProvider(
      title: title,
      message: message,
      type: type,
      extra: extra,
    );
  }
  
  /// 알림 읽음 처리
  void markAsRead(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) {
      if (notification.id == notificationId) {
        return notification.copyWith(status: NotificationStatus.read);
      }
      return notification;
    }).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 알림 읽음: $notificationId');
  }
  
  /// 알림 제거
  void removeNotification(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.where((n) => n.id != notificationId).toList();
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('🗑️ 알림 제거: $notificationId');
  }
  
  /// 모든 알림 읽음 처리
  void markAllAsRead() {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) => 
      notification.copyWith(status: NotificationStatus.read)
    ).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 모든 알림 읽음 처리');
  }
  
  /// 모든 알림 제거
  void clearAllNotifications() {
    ref.read(notificationListProvider.notifier).state = [];
    log.i('🧹 모든 알림 제거');
  }
  
  /// 필터 설정
  void setFilter(NotificationType? type) {
    ref.read(notificationFilterProvider.notifier).state = type;
    log.i('🔍 알림 필터: ${type?.name ?? "전체"}');
  }
  
  /// 읽지 않은 알림 개수
  int getUnreadCount() {
    return ref.read(unreadNotificationCountProvider);
  }

  /// Firebase 리스너 정리
  void dispose() {
    _onMessageSub?.cancel();
    _onMessageOpenedSub?.cancel();
    log.i('🧹 Firebase 알림 리스너 정리됨');
  }
}

/// 🔔 알림 서비스 Provider
final notificationServiceProvider = Provider((ref) => NotificationService(ref));\n\n// ====== lib/shared/widgets/common_app_bar.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/settings_provider.dart';
import 'ws_status_indicator.dart';
import 'market_mood_indicator.dart';
import 'notification_modal.dart';
import 'settings_modal.dart';
import 'slide_indicator.dart';
import '../../presentation/pages/main_page.dart';

/// 공통 상단바 + 알림/설정 아이콘 + 슬라이드 인디케이터
class CommonAppBar extends ConsumerWidget implements PreferredSizeWidget {
 const CommonAppBar({
   super.key,
   required this.title,
   this.leading,
   this.actions,
   this.centerTitle = true,
   this.elevation = 0,
   // 슬라이드 인디케이터용 파라미터들
   this.pages,
   this.pageController,
   this.animationController,
 });

 final String title;
 final Widget? leading;
 final List<Widget>? actions;
 final bool centerTitle;
 final double elevation;

 // 슬라이드 인디케이터 관련
 final List<PageInfo>? pages;
 final PageController? pageController;
 final AnimationController? animationController;

 @override
 Size get preferredSize => const Size.fromHeight(kToolbarHeight);

 @override
 Widget build(BuildContext context, WidgetRef ref) {
   final screenWidth = MediaQuery.of(context).size.width;
   final leadingWidth = screenWidth * 0.2; // 화면 너비의 20%

   return AppBar(
     title: _buildTitle(),
     centerTitle: centerTitle,
     elevation: elevation,
     leadingWidth: leadingWidth,
     leading: leading ?? SizedBox(
       width: leadingWidth,
       child: Row(
         children: [
           // 알림 버튼 (그라디언트 효과 적용)
           Padding(
             padding: const EdgeInsets.only(left: 8),
             child: IconButton(
               icon: ShaderMask(
                 shaderCallback: (bounds) => const LinearGradient(
                   colors: [
                     Color(0xFF9E9E9E), // 밝은 회색
                     Color(0xFF616161), // 중간 회색
                     Color(0xFF424242), // 어두운 회색
                   ],
                   begin: Alignment.topLeft,
                   end: Alignment.bottomRight,
                 ).createShader(bounds),
                 child: const Icon(
                   Icons.notifications,
                   size: 22,
                   color: Colors.white, // 그라디언트가 적용될 베이스
                 ),
               ),
               onPressed: () {
                 if (ref.read(appSettingsProvider).isHapticEnabled) {
                   HapticFeedback.lightImpact();
                 }
                 NotificationModal.show(context);
               },
             ),
           ),
           // 임시 이미지 (주석 처리)
           // Padding(
           //   padding: const EdgeInsets.only(left: 8),
           //   child: IconButton(
           //     icon: Image.asset(
           //       'assets/common_app_bar_icon.webp',
           //       width: 22,
           //       height: 22,
           //       fit: BoxFit.contain,
           //     ),
           //     onPressed: () {
           //       if (ref.read(settingsProvider).isHapticEnabled) {
           //         HapticFeedback.lightImpact();
           //       }
           //       // TODO: 임시로 노티피케이션 개발 전까지 비활성화
           //       // NotificationModal.show(context);
           //     },
           //   ),
           // ),
           // Market Mood 아이콘
           const MarketMoodIndicator(
             size: 18,
             padding: EdgeInsets.only(right: 4),
           ),
         ],
       ),
     ),
     actions: actions ?? [
       // WebSocket 상태 아이콘
       const WsStatusIndicator(
         size: 16,
         padding: EdgeInsets.only(right: 4),
       ),
       // 설정 버튼 (예쁜 그라디언트 적용)
       Padding(
         padding: const EdgeInsets.only(right: 8),
         child: IconButton(
           icon: ShaderMask(
             shaderCallback: (bounds) => const LinearGradient(
               colors: [
                 Color(0xFF9E9E9E), // 밝은 회색
                 Color(0xFF616161), // 중간 회색
                 Color(0xFF424242), // 어두운 회색
               ],
               begin: Alignment.topLeft,
               end: Alignment.bottomRight,
             ).createShader(bounds),
             child: const Icon(
               Icons.settings,
               size: 22,
               color: Colors.white, // 그라디언트가 적용될 베이스
             ),
           ),
           onPressed: () {
             if (ref.read(appSettingsProvider).isHapticEnabled) {
               HapticFeedback.lightImpact();
             }
             SettingsModal.show(context);
           },
         ),
       ),
     ],
   );
 }

 /// 타이틀 부분 구성 (슬라이드 인디케이터 또는 텍스트)
 Widget _buildTitle() {
   // 슬라이드 인디케이터 파라미터들이 모두 있으면 인디케이터 표시
   if (pages != null && pageController != null && animationController != null) {
     return SlideIndicator(
       pages: pages!,
       pageController: pageController!,
       animationController: animationController!,
     );
   }

   // 파라미터가 없으면 기본 텍스트 표시
   return Text(title);
 }
}\n\n// ====== lib/shared/widgets/notification_modal.dart ======\n
// lib/shared/widgets/notification_modal.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class NotificationModal {
  /// 알림 모달 표시
  static void show(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black54,
      builder: (context) => const _NotificationModalContent(),
    );
  }
}

class _NotificationModalContent extends ConsumerWidget {
  const _NotificationModalContent();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Container(
      margin: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.1),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // 🎨 알림 모달 헤더
          _buildHeader(context, ref),
          
          // 구분선
          Divider(color: Colors.grey.shade300, height: 1),
          
          // 🎯 알림 placeholder 내용
          _buildContent(context),
          
          // 하단 여백
          SizedBox(height: MediaQuery.of(context).padding.bottom + 20),
        ],
      ),
    );
  }

  /// 헤더 (제목만, X 버튼 제거)
  Widget _buildHeader(BuildContext context, WidgetRef ref) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Column(
        children: [
          // 당김 핸들
          Container(
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade400,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(height: 12),
          // 제목 (X 버튼 제거)
          const Row(
            children: [
              SizedBox(width: 16),
              Icon(Icons.notifications, color: Colors.orange),
              SizedBox(width: 8),
              Text(
                '알림',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// 알림 컨텐츠 (placeholder) - 가로/세로 모드 대응
  Widget _buildContent(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;
    final bottomPadding = MediaQuery.of(context).padding.bottom;
    
    // 가로 모드일 때 더 작은 높이 사용 + Safe Area 고려
    final maxHeight = isLandscape 
        ? (screenHeight * 0.65 - bottomPadding).clamp(200.0, 250.0) // 가로: Safe Area 제외
        : 400.0; // 세로 모드: 기존 400

    return Container(
      constraints: BoxConstraints(maxHeight: maxHeight),
      child: SingleChildScrollView(
        physics: const BouncingScrollPhysics(
          parent: AlwaysScrollableScrollPhysics(),
        ),
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // 알림 아이콘
            Icon(
              Icons.notifications_outlined,
              size: isLandscape ? 60 : 80, // 가로 모드에서 아이콘 크기 축소
              color: Colors.orange.withValues(alpha: 0.5),
            ),
            SizedBox(height: isLandscape ? 16 : 24), // 가로 모드에서 간격 축소
            
            // 제목
            Text(
              '알림 기능',
              style: TextStyle(
                fontSize: isLandscape ? 20 : 24, // 가로 모드에서 폰트 크기 축소
                fontWeight: FontWeight.bold,
                color: Colors.orange,
              ),
            ),
            SizedBox(height: isLandscape ? 8 : 12), // 가로 모드에서 간격 축소
            
            // 설명
            Text(
              '실시간 체결 알림과\n가격 변동 알림을 받아보세요',
              style: TextStyle(
                fontSize: isLandscape ? 14 : 16, // 가로 모드에서 폰트 크기 축소
                color: Colors.grey.shade600,
                height: 1.4,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: isLandscape ? 20 : 32), // 가로 모드에서 간격 축소
            
            // 준비 중 배지
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
              decoration: BoxDecoration(
                color: Colors.orange.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(color: Colors.orange.withValues(alpha: 0.3)),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    Icons.construction,
                    size: 16,
                    color: Colors.orange.shade700,
                  ),
                  const SizedBox(width: 6),
                  Text(
                    '곧 출시 예정!',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.orange.shade700,
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: isLandscape ? 12 : 16), // 가로 모드에서 간격 축소
            
            // 기능 미리보기
            Text(
              '• 실시간 체결 알림\n• 급등락 알림\n• 거래량 급증 알림\n• 맞춤 가격 알림',
              style: TextStyle(
                fontSize: isLandscape ? 12 : 13, // 가로 모드에서 폰트 크기 축소
                color: Colors.grey.shade500,
                height: 1.6,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}\n\n// ====== lib/shared/widgets/settings_modal.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/app_settings.dart';
// 🎨 세그먼트 위젯들 Import
import 'settings/theme_mode_segment.dart';
import 'settings/slider_position_segment.dart';
import 'settings/font_segment.dart';
// 📱 앱 정보 모달 Import
import '../information/app_information_modal.dart';

class SettingsModal {
  /// 설정 모달 표시
  static void show(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black54,
      builder: (context) => const _SettingsModalContent(),
    );
  }
}

class _SettingsModalContent extends ConsumerWidget {
  const _SettingsModalContent();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settings = ref.watch(appSettingsProvider);
    final controller = ref.read(appSettingsProvider.notifier);

    return Container(
      margin: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha(26),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildHeader(context, ref),
          Divider(color: Colors.grey.shade300, height: 1),
          _buildContent(context, settings, controller, ref),
          SizedBox(height: MediaQuery.of(context).padding.bottom + 20),
        ],
      ),
    );
  }

  /// 헤더 (제목 + 닫기 버튼)
  Widget _buildHeader(BuildContext context, WidgetRef ref) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Column(
        children: [
          Container(
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade400,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(height: 12),
          const Row(
            children: [
              SizedBox(width: 16),
              Icon(Icons.settings, color: Colors.orange),
              SizedBox(width: 8),
              Text(
                '설정',
                style: TextStyle(
                  fontSize: 19,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// 설정 컨텐츠 (스크롤 가능)
  Widget _buildContent(BuildContext context, AppSettings settings, dynamic controller, WidgetRef ref) {
    final scrollController = ScrollController();
    final screenHeight = MediaQuery.of(context).size.height;
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;
    final bottomPadding = MediaQuery.of(context).padding.bottom; // Safe Area 하단 패딩
    
    // 가로 모드일 때 더 작은 높이 사용 + Safe Area 고려
    final maxHeight = isLandscape 
        ? (screenHeight * 0.65 - bottomPadding).clamp(250.0, 300.0) // Safe Area 제외
        : 420.0; // 세로 모드: 기존 420
    
    return Container(
      constraints: BoxConstraints(maxHeight: maxHeight),
      child: RawScrollbar(
        controller: scrollController,
        thumbVisibility: false,
        trackVisibility: false,
        thickness: 6.4,
        radius: const Radius.circular(3.2),
        thumbColor: Colors.orange.withAlpha(128),
        trackColor: Colors.transparent,
        interactive: true,
        minThumbLength: 40,
        child: SingleChildScrollView(
          controller: scrollController,
          physics: const BouncingScrollPhysics(
            parent: AlwaysScrollableScrollPhysics(),
          ),
          padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16),
          child: Column(
            children: [
              // 🎨 테마 설정 (3개 테마만)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.palette, color: Colors.orange),
                    title: const Text('테마', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getThemeDescription(settings.themeMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: ThemeModeSegment(
                      themeMode: settings.themeMode,
                      onChanged: (ThemeMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setThemeMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              // 💰 코인명 표시 방식
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.monetization_on, color: Colors.orange),
                    title: const Text('코인명 표시', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getDisplayModeDescription(settings.displayMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: _DisplayModeSegment(
                      value: settings.displayMode,
                      onChanged: (DisplayMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setDisplayMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 💵 금액 표시 방식
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.account_balance_wallet, color: Colors.orange),
                    title: const Text('금액 표시', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getAmountDisplayModeDescription(settings.amountDisplayMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: _AmountDisplayModeSegment(
                      value: settings.amountDisplayMode,
                      onChanged: (AmountDisplayMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setAmountDisplayMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 🔤 폰트 설정
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.font_download, color: Colors.orange),
                    title: const Text('폰트', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getFontDescription(settings.fontFamily),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: FontSegment(
                      value: settings.fontFamily,
                      onChanged: (FontFamily font) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setFontFamily(font);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 🎚️ 슬라이더 위치
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.tune, color: Colors.orange),
                    title: const Text('슬라이더 위치', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getSliderPositionDescription(settings.sliderPosition),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: SliderPositionSegment(
                      value: settings.sliderPosition,
                      onChanged: (SliderPosition position) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setSliderPosition(position);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // ✨ 블링크 효과
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.auto_awesome, color: Colors.orange),
                    title: const Text('블링크 효과', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getBlinkDescription(settings.blinkEnabled),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.blinkEnabled,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setBlinkEnabled(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 📱 화면 항상 켜기
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.screen_lock_rotation, color: Colors.orange),
                    title: const Text('화면 항상 켜기', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getKeepScreenDescription(settings.keepScreenOn),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.keepScreenOn,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setKeepScreenOn(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 📳 햅틱 피드백 (새로 추가)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.vibration, color: Colors.orange),
                    title: const Text('햅틱 피드백', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getHapticDescription(settings.isHapticEnabled),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.isHapticEnabled,
                    onChanged: (bool value) {
                      // 햅틱 설정 변경 시에는 일단 햅틱 실행 후 설정 적용
                      if (settings.isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setHapticEnabled(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 🔒 화면 회전 잠금 (새로 추가)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.screen_rotation_outlined, color: Colors.orange),
                    title: const Text('세로 모드 고정', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      _getPortraitLockDescription(settings.isPortraitLocked),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.isPortraitLocked,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setPortraitLocked(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 🔧 캐시 비우기
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.cleaning_services, color: Colors.orange),
                    title: const Text('캐시 비우기', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      '임시 데이터를 삭제합니다',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: _CacheSegment(
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        _showClearCacheDialog(context, controller, ref);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 🔄 설정 초기화
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.restore, color: Colors.orange),
                    title: const Text('설정 초기화', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      '모든 설정을 기본값으로 되돌립니다',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: _ResetSegment(
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        _showResetDialog(context, controller, ref);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // 📱 앱 정보 (새로 추가)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.info_outline, color: Colors.orange),
                    title: const Text('앱 정보', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      '버전 정보 및 개발자 정보를 확인합니다',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: _AppInfoSegment(
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        AppInformationModal.show(context);
                      },
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // 📝 Helper 메서드들 (완전 구현)
  String _getThemeDescription(ThemeMode themeMode) {
    switch (themeMode) {
      case ThemeMode.system:
        return '시스템 설정에 따라 테마가 결정됩니다';
      case ThemeMode.light:
        return '밝은 테마가 적용됩니다';
      case ThemeMode.dark:
        return '어두운 테마가 적용됩니다';
    }
  }

  String _getDisplayModeDescription(DisplayMode mode) {
    switch (mode) {
      case DisplayMode.ticker:
        return 'BTC, ETH, XRP 형식으로 표시됩니다';
      case DisplayMode.korean:
        return '비트코인, 이더리움, 리플 형식으로 표시됩니다';
      case DisplayMode.english:
        return 'Bitcoin, Ethereum, Ripple 형식으로 표시됩니다';
    }
  }

  String _getAmountDisplayModeDescription(AmountDisplayMode mode) {
    switch (mode) {
      case AmountDisplayMode.number:
        return '금액 숫자로 표시됩니다';
      case AmountDisplayMode.icon:
        return '💵 아이콘으로 표시됩니다';
    }
  }

  String _getFontDescription(FontFamily fontFamily) {
    return '${fontFamily.fontName} 폰트가 적용됩니다';
  }

  String _getSliderPositionDescription(SliderPosition position) {
    return position == SliderPosition.top
        ? '슬라이더를 화면 상단에 표시합니다'
        : '슬라이더를 화면 하단에 표시합니다';
  }

  String _getBlinkDescription(bool enabled) {
    return enabled
        ? '가격 변동 시 블링크 효과가 표시됩니다'
        : '블링크 효과가 비활성화됩니다';
  }

  String _getKeepScreenDescription(bool enabled) {
    return enabled
        ? '화면이 자동으로 꺼지지 않습니다'
        : '시스템 설정에 따라 화면이 꺼집니다';
  }

  // 🆕 새로 추가된 설정들의 설명
  String _getHapticDescription(bool enabled) {
    return enabled
        ? '터치 시 진동 피드백이 활성화됩니다'
        : '진동 피드백이 비활성화됩니다';
  }

  String _getPortraitLockDescription(bool locked) {
    return locked
        ? '화면이 세로 모드로 고정됩니다'
        : '화면 회전이 자동으로 전환됩니다';
  }

  // 🗂️ 다이얼로그 메서드들
  void _showClearCacheDialog(BuildContext context, dynamic controller, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('캐시 비우기'),
        content: const Text('임시 데이터를 삭제하시겠습니까?\n앱 성능이 향상될 수 있습니다.'),
        actions: [
          TextButton(
            onPressed: () {
              // 취소 버튼은 햅틱 없음
              Navigator.of(context).pop();
            },
            child: const Text('취소'),
          ),
          TextButton(
            onPressed: () async {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact();
              }
              Navigator.of(context).pop();
              await controller.clearCache();
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('캐시가 삭제되었습니다')),
                );
              }
            },
            child: const Text('삭제', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void _showResetDialog(BuildContext context, dynamic controller, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('설정 초기화'),
        content: const Text('모든 설정을 기본값으로 되돌리시겠습니까?\n이 작업은 되돌릴 수 없습니다.'),
        actions: [
          TextButton(
            onPressed: () {
              // 취소 버튼은 햅틱 없음
              Navigator.of(context).pop();
            },
            child: const Text('취소'),
          ),
          TextButton(
            onPressed: () async {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact();
              }
              Navigator.of(context).pop();
              await controller.resetAllSettings();
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('설정이 초기화되었습니다')),
                );
              }
            },
            child: const Text('초기화', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
}

/// 🆕 코인명 표시 방식 세그먼트 위젯 (슬라이더 스타일 통일)
class _DisplayModeSegment extends StatelessWidget {
  final DisplayMode value;
  final ValueChanged<DisplayMode> onChanged;

  const _DisplayModeSegment({
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSegmentButton(context: context, mode: DisplayMode.ticker, label: '티커', icon: Icons.code),
          _buildDivider(),
          _buildSegmentButton(context: context, mode: DisplayMode.korean, label: '한글', icon: Icons.language),
          _buildDivider(),
          _buildSegmentButton(context: context, mode: DisplayMode.english, label: '영문', icon: Icons.translate),
        ],
      ),
    );
  }

  Widget _buildSegmentButton({
    required BuildContext context,
    required DisplayMode mode,
    required String label,
    required IconData icon,
  }) {
    final isSelected = value == mode;
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    final backgroundColor = isSelected ? Colors.orange.withAlpha(26) : Colors.transparent;

    return GestureDetector(
      onTap: () => onChanged(mode),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(
                fontSize: 11,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDivider() {
    return Container(width: 1, height: 40, color: Colors.grey.shade300);
  }
}

/// 💰 금액 표시 방식 세그먼트 위젯
class _AmountDisplayModeSegment extends StatelessWidget {
  final AmountDisplayMode value;
  final ValueChanged<AmountDisplayMode> onChanged;

  const _AmountDisplayModeSegment({
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSegmentButton(context: context, mode: AmountDisplayMode.number, label: '숫자', icon: Icons.format_list_numbered),
          _buildDivider(),
          _buildSegmentButton(context: context, mode: AmountDisplayMode.icon, label: '아이콘', icon: Icons.account_balance_wallet),
        ],
      ),
    );
  }

  Widget _buildSegmentButton({
    required BuildContext context,
    required AmountDisplayMode mode,
    required String label,
    required IconData icon,
  }) {
    final isSelected = value == mode;
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    final backgroundColor = isSelected ? Colors.orange.withAlpha(26) : Colors.transparent;

    return GestureDetector(
      onTap: () => onChanged(mode),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(
                fontSize: 11,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDivider() {
    return Container(width: 1, height: 40, color: Colors.grey.shade300);
  }
}

/// 🔧 캐시 비우기 세그먼트 위젯
class _CacheSegment extends StatelessWidget {
  final VoidCallback onPressed;

  const _CacheSegment({
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: GestureDetector(
        onTap: onPressed,
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.orange.withAlpha(26),
            borderRadius: BorderRadius.circular(6),
          ),
          child: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.cleaning_services, size: 16, color: Colors.orange),
              SizedBox(height: 2),
              Text(
                '비우기',
                style: TextStyle(
                  fontSize: 11,
                  color: Colors.orange,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// 🔄 설정 초기화 세그먼트 위젯
class _ResetSegment extends StatelessWidget {
  final VoidCallback onPressed;

  const _ResetSegment({
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: GestureDetector(
        onTap: onPressed,
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.orange.withAlpha(26),
            borderRadius: BorderRadius.circular(6),
          ),
          child: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.restore, size: 16, color: Colors.orange),
              SizedBox(height: 2),
              Text(
                '초기화',
                style: TextStyle(
                  fontSize: 11,
                  color: Colors.orange,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// 📱 앱 정보 세그먼트 위젯
class _AppInfoSegment extends StatelessWidget {
  final VoidCallback onPressed;

  const _AppInfoSegment({
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: GestureDetector(
        onTap: onPressed,
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.orange.withAlpha(26),
            borderRadius: BorderRadius.circular(6),
          ),
          child: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.info_outline, size: 16, color: Colors.orange),
              SizedBox(height: 2),
              Text(
                '정보',
                style: TextStyle(
                  fontSize: 11,
                  color: Colors.orange,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}\n\n// ====== lib/shared/widgets/sector_names.dart ======\n
// lib/shared/widgets/sector_names.dart
// 🆕 실제 섹터 분류에 맞춘 네이밍 매핑

import '../../domain/entities/app_settings.dart';

class SectorNames {
  // 🎯 상세 분류 (28개 섹터) 네이밍 매핑
  static const Map<String, Map<String, String>> detailedSectorNaming = {
    // ==================== 기본 그룹 ====================
    '비트코인 그룹': {
      'ticker': 'BTC-GRP',
      'korean': '비트코인 그룹',
      'english': 'Bitcoin Group',
    },
    '이더리움 그룹': {
      'ticker': 'ETH-GRP',
      'korean': '이더리움 그룹',
      'english': 'Ethereum Group',
    },
    '스테이킹': {
      'ticker': 'STAKE',
      'korean': '스테이킹',
      'english': 'Staking',
    },

    // ==================== 블록체인 아키텍처 ====================
    '모놀리식 블록체인': {
      'ticker': 'MONO',
      'korean': '모놀리식 블록체인',
      'english': 'Monolithic Blockchain',
    },
    '모듈러 블록체인': {
      'ticker': 'MODU',
      'korean': '모듈러 블록체인',
      'english': 'Modular Blockchain',
    },

    // ==================== 스테이블코인 생태계 ====================
    '스테이블 코인': {
      'ticker': 'STABLE',
      'korean': '스테이블 코인',
      'english': 'Stablecoin',
    },

    // ==================== DeFi 생태계 ====================
    'DEX/애그리게이터': {
      'ticker': 'DEX',
      'korean': 'DEX/애그리게이터',
      'english': 'DEX/Aggregator',
    },
    '랜딩': {
      'ticker': 'LEND',
      'korean': '랜딩',
      'english': 'Lending',
    },
    '유동화 스테이킹/리스테이킹': {
      'ticker': 'LSTAKE',
      'korean': '유동화 스테이킹/리스테이킹',
      'english': 'Liquid Staking/Restaking',
    },
    'RWA': {
      'ticker': 'RWA',
      'korean': 'RWA',
      'english': 'Real World Assets',
    },

    // ==================== 인프라 & 기술 ====================
    '지급결제 인프라': {
      'ticker': 'PAY',
      'korean': '지급결제 인프라',
      'english': 'Payment Infrastructure',
    },
    '상호운용성/브릿지': {
      'ticker': 'BRIDGE',
      'korean': '상호운용성/브릿지',
      'english': 'Interoperability/Bridge',
    },
    '엔터프라이즈 블록체인': {
      'ticker': 'ENTER',
      'korean': '엔터프라이즈 블록체인',
      'english': 'Enterprise Blockchain',
    },
    '오라클': {
      'ticker': 'ORACLE',
      'korean': '오라클',
      'english': 'Oracle',
    },
    '데이터 인프라': {
      'ticker': 'DATA',
      'korean': '데이터 인프라',
      'english': 'Data Infrastructure',
    },
    '스토리지': {
      'ticker': 'STORAGE',
      'korean': '스토리지',
      'english': 'Storage',
    },
    'AI': {
      'ticker': 'AI',
      'korean': 'AI',
      'english': 'Artificial Intelligence',
    },

    // ==================== 엔터테인먼트 & 게임 ====================
    '메타버스': {
      'ticker': 'META',
      'korean': '메타버스',
      'english': 'Metaverse',
    },
    'NFT/게임': {
      'ticker': 'NFT-GAME',
      'korean': 'NFT/게임',
      'english': 'NFT/Gaming',
    },

    // ==================== 미디어 & 콘텐츠 ====================
    '미디어/스트리밍': {
      'ticker': 'MEDIA',
      'korean': '미디어/스트리밍',
      'english': 'Media/Streaming',
    },
    '광고': {
      'ticker': 'AD',
      'korean': '광고',
      'english': 'Advertising',
    },
    '교육/기타 콘텐츠': {
      'ticker': 'EDU',
      'korean': '교육/기타 콘텐츠',
      'english': 'Education/Content',
    },

    // ==================== 소셜 & 커뮤니티 ====================
    '소셜/DAO': {
      'ticker': 'SOCIAL',
      'korean': '소셜/DAO',
      'english': 'Social/DAO',
    },
    '팬토큰': {
      'ticker': 'FAN',
      'korean': '팬토큰',
      'english': 'Fan Token',
    },
    '밈': {
      'ticker': 'MEME',
      'korean': '밈',
      'english': 'Meme',
    },

    // ==================== 특수 용도 ====================
    'DID': {
      'ticker': 'DID',
      'korean': 'DID',
      'english': 'Decentralized Identity',
    },
    '의료': {
      'ticker': 'MED',
      'korean': '의료',
      'english': 'Medical',
    },
    '월렛/메세징': {
      'ticker': 'WALLET',
      'korean': '월렛/메세징',
      'english': 'Wallet/Messaging',
    },
  };

  // 🎯 기본 분류 (18개 섹터) 네이밍 매핑 - 🆕 신규상장 4개 섹터 추가
  static const Map<String, Map<String, String>> basicSectorNaming = {
    '메이저 코인': {
      'ticker': 'MAJOR',
      'korean': '메이저 코인',
      'english': 'Major Coins',
    },
    '비트코인 계열': {
      'ticker': 'BTC-FAM',
      'korean': '비트코인 계열',
      'english': 'Bitcoin Family',
    },
    '이더리움 생태계': {
      'ticker': 'ETH-ECO',
      'korean': '이더리움 생태계',
      'english': 'Ethereum Ecosystem',
    },
    '레이어1 블록체인': {
      'ticker': 'L1',
      'korean': '레이어1 블록체인',
      'english': 'Layer 1 Blockchain',
    },
    '고 시총': {
      'ticker': 'LARGE-CAP',
      'korean': '고 시총',
      'english': 'Large Market Cap',
    },
    '중 시총': {
      'ticker': 'MID-CAP',
      'korean': '중 시총',
      'english': 'Mid Market Cap',
    },
    '저 시총': {
      'ticker': 'SMALL-CAP',
      'korean': '저 시총',
      'english': 'Small Market Cap',
    },
    '마이너 알트코인': {
      'ticker': 'MINOR-ALT',
      'korean': '마이너 알트코인',
      'english': 'Minor Altcoins',
    },
    'DeFi 토큰': {
      'ticker': 'DEFI',
      'korean': 'DeFi 토큰',
      'english': 'DeFi Tokens',
    },
    '스테이블코인': {
      'ticker': 'STABLE',
      'korean': '스테이블코인',
      'english': 'Stablecoins',
    },
    '게임/NFT/메타버스': {
      'ticker': 'GAMING',
      'korean': '게임/NFT/메타버스',
      'english': 'Gaming/NFT/Metaverse',
    },
    '한국 프로젝트': {
      'ticker': 'KOREA',
      'korean': '한국 프로젝트',
      'english': 'Korean Projects',
    },
    '솔라나 생태계': {
      'ticker': 'SOL-ECO',
      'korean': '솔라나 생태계',
      'english': 'Solana Ecosystem',
    },
    'AI/기술 토큰': {
      'ticker': 'AI-TECH',
      'korean': 'AI/기술 토큰',
      'english': 'AI/Tech Tokens',
    },

    // 🆕 신규상장 섹터 4개 추가
    '2023년 신규상장': {
      'ticker': 'NEW-23',
      'korean': '2023년 신규상장',
      'english': '2023 New Listings',
    },
    '2024년 상반기 신규상장': {
      'ticker': 'NEW-24H1',
      'korean': '2024년 상반기 신규상장',
      'english': '2024 H1 New Listings',
    },
    '2024년 하반기 신규상장': {
      'ticker': 'NEW-24H2',
      'korean': '2024년 하반기 신규상장',
      'english': '2024 H2 New Listings',
    },
    '2025년 상반기 신규상장': {
      'ticker': 'NEW-25H1',
      'korean': '2025년 상반기 신규상장',
      'english': '2025 H1 New Listings',
    },
  };

  /// 🎯 섹터명을 DisplayMode에 따라 변환 (기본/상세 분류 자동 감지)
  static String getDisplayName(String sectorKey, DisplayMode displayMode, {bool isDetailed = false}) {
    // 정규화 (입력된 섹터명 그대로 매핑에서 찾기)
    final normalizedKey = sectorKey.trim();
    
    // 상세/기본 분류에 따라 적절한 매핑 선택
    final sectorData = isDetailed 
        ? detailedSectorNaming[normalizedKey] 
        : basicSectorNaming[normalizedKey];
    
    // 매핑이 없으면 다른 분류에서 찾기 시도
    final fallbackData = isDetailed 
        ? basicSectorNaming[normalizedKey]
        : detailedSectorNaming[normalizedKey];
    
    final finalData = sectorData ?? fallbackData;
    
    if (finalData == null) {
      // 매핑이 없으면 원본 반환 (fallback)
      return sectorKey;
    }

    switch (displayMode) {
      case DisplayMode.ticker:
        return finalData['ticker'] ?? sectorKey;
      case DisplayMode.korean:
        return finalData['korean'] ?? sectorKey;
      case DisplayMode.english:
        return finalData['english'] ?? sectorKey;
    }
  }

  /// 🔧 모든 섹터 키 목록 반환 (디버깅용)
  static List<String> getAllSectorKeys({bool isDetailed = false}) {
    return isDetailed 
        ? detailedSectorNaming.keys.toList()
        : basicSectorNaming.keys.toList();
  }

  /// 🔧 특정 섹터가 매핑에 있는지 확인
  static bool hasSector(String sectorKey, {bool isDetailed = false}) {
    final normalizedKey = sectorKey.trim();
    
    return isDetailed 
        ? detailedSectorNaming.containsKey(normalizedKey)
        : basicSectorNaming.containsKey(normalizedKey);
  }

  /// 🔧 디버깅용 - 매핑되지 않은 섹터 찾기
  static List<String> findUnmappedSectors(List<String> actualSectorKeys, {bool isDetailed = false}) {
    final unmapped = <String>[];
    
    for (final sectorKey in actualSectorKeys) {
      if (!hasSector(sectorKey, isDetailed: isDetailed)) {
        unmapped.add(sectorKey);
      }
    }
    
    return unmapped;
  }

  /// 🔧 전체 매핑 정보 반환 (디버깅용)
  static Map<String, Map<String, String>> getAllMappings({bool isDetailed = false}) {
    return isDetailed ? detailedSectorNaming : basicSectorNaming;
  }
}

// 🆕 SectorTile에서 사용할 헬퍼 확장
extension SectorDisplayExtension on String {
  /// 섹터명을 DisplayMode에 따라 표시
  String toDisplayName(DisplayMode displayMode, {bool isDetailed = false}) {
    return SectorNames.getDisplayName(this, displayMode, isDetailed: isDetailed);
  }
}\n\n// ====== lib/shared/widgets/slide_indicator.dart ======\n
// lib/shared/widgets/slide_indicator.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // 🎯 HapticFeedback용 추가
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../presentation/pages/main_page.dart';

/// 🎨 슬라이드 인디케이터 - iOS 스타일의 페이지 인디케이터
class SlideIndicator extends ConsumerStatefulWidget {
 final List<PageInfo> pages;
 final PageController pageController;
 final AnimationController animationController;

 const SlideIndicator({
   Key? key,
   required this.pages,
   required this.pageController,
   required this.animationController,
 }) : super(key: key);

 @override
 ConsumerState<SlideIndicator> createState() => _SlideIndicatorState();
}

class _SlideIndicatorState extends ConsumerState<SlideIndicator>
   with TickerProviderStateMixin {
 
 late List<AnimationController> _iconControllers;
 late List<Animation<double>> _scaleAnimations;
 late List<Animation<Color?>> _colorAnimations;

 @override
 void initState() {
   super.initState();
   _setupAnimations();
 }

 /// 애니메이션 설정
 void _setupAnimations() {
   _iconControllers = List.generate(
     widget.pages.length,
     (index) => AnimationController(
       duration: const Duration(milliseconds: 250),
       vsync: this,
     ),
   );

   _scaleAnimations = _iconControllers.map((controller) {
     return Tween<double>(
       begin: 0.8, // 작은 크기
       end: 1.2,   // 큰 크기
     ).animate(CurvedAnimation(
       parent: controller,
       curve: Curves.easeOutBack, // 통통 튀는 애니메이션
     ));
   }).toList();

   _colorAnimations = _iconControllers.map((controller) {
     return ColorTween(
       begin: Colors.grey.shade400,     // 비활성 색상
       end: Colors.orange,              // 활성 색상
     ).animate(CurvedAnimation(
       parent: controller,
       curve: Curves.easeInOut,
     ));
   }).toList();

   // 초기 선택된 페이지 애니메이션 시작 (체결 페이지 = index 1)
   WidgetsBinding.instance.addPostFrameCallback((_) {
     _iconControllers[1].forward();
   });
 }

 @override
 void dispose() {
   for (final controller in _iconControllers) {
     controller.dispose();
   }
   super.dispose();
 }

 @override
 Widget build(BuildContext context) {
   final currentIndex = ref.watch(selectedTabProvider);
   
   // 페이지 변경 시 애니메이션 업데이트
   _updateAnimations(currentIndex);

   return SizedBox( // ✅ Container → SizedBox 변경
     height: 40,
     child: Row(
       mainAxisSize: MainAxisSize.min,
       children: widget.pages.asMap().entries.map((entry) {
         final index = entry.key;
         final page = entry.value;
         
         return _buildAnimatedIcon(index, page, currentIndex);
       }).toList(),
     ),
   );
 }

 /// 애니메이션 업데이트
 void _updateAnimations(int currentIndex) {
   for (int i = 0; i < _iconControllers.length; i++) {
     if (i == currentIndex) {
       _iconControllers[i].forward();
     } else {
       _iconControllers[i].reverse();
     }
   }
 }

 /// 애니메이션 아이콘 생성
 Widget _buildAnimatedIcon(int index, PageInfo page, int currentIndex) {
   final isSelected = index == currentIndex;
   
   return AnimatedBuilder(
     animation: Listenable.merge([
       _scaleAnimations[index],
       _colorAnimations[index],
     ]),
     builder: (context, child) {
       return GestureDetector(
         onTap: () => _onIconTap(index),
         child: Container(
           margin: const EdgeInsets.symmetric(horizontal: 1.8),
           padding: const EdgeInsets.all(8),
           child: Transform.scale(
             scale: _scaleAnimations[index].value,
             child: Container(
               width: 32,
               height: 32,
               decoration: BoxDecoration(
                 shape: BoxShape.circle,
                 color: isSelected 
                   ? Colors.orange.withValues(alpha: 0.1)
                   : Colors.transparent,
                 border: isSelected 
                   ? Border.all(color: Colors.orange.withValues(alpha: 0.3), width: 1)
                   : null,
               ),
               child: Icon(
                 page.icon,
                 size: isSelected ? 20 : 16,
                 color: _colorAnimations[index].value,
               ),
             ),
           ),
         ),
       );
     },
   );
 }

 /// 아이콘 클릭 처리
 void _onIconTap(int index) {
   // 햅틱 피드백 먼저 실행
   if (ref.read(appSettingsProvider).isHapticEnabled) {
     HapticFeedback.lightImpact(); // 🎯 햅틱 활성화!
   }
   
   // Provider 상태 업데이트
   ref.read(selectedTabProvider.notifier).state = index;
   
   // 페이지 이동
   widget.pageController.animateToPage(
     index,
     duration: const Duration(milliseconds: 300),
     curve: Curves.easeInOut,
   );
   
   debugPrint('🎯 슬라이드 인디케이터 클릭: ${widget.pages[index].title}');
 }
}

/// 🎨 간단 버전 슬라이드 인디케이터 (애니메이션 없음)
class SimpleSlideIndicator extends ConsumerWidget {
 final List<PageInfo> pages;
 final PageController pageController;

 const SimpleSlideIndicator({
   Key? key,
   required this.pages,
   required this.pageController,
 }) : super(key: key);

 @override
 Widget build(BuildContext context, WidgetRef ref) {
   final currentIndex = ref.watch(selectedTabProvider);

   return SizedBox( // ✅ Container → SizedBox 변경
     height: 40,
     child: Row(
       mainAxisSize: MainAxisSize.min,
       children: pages.asMap().entries.map((entry) {
         final index = entry.key;
         final page = entry.value;
         final isSelected = index == currentIndex;
         
         return GestureDetector(
           onTap: () {
             if (ref.read(appSettingsProvider).isHapticEnabled) {
               HapticFeedback.lightImpact(); // 🎯 간단 버전에도 햅틱 추가!
             }
             
             ref.read(selectedTabProvider.notifier).state = index;
             pageController.animateToPage(
               index,
               duration: const Duration(milliseconds: 300),
               curve: Curves.easeInOut,
             );
           },
           child: Container(
             margin: const EdgeInsets.symmetric(horizontal: 4),
             padding: const EdgeInsets.all(8),
             child: Container(
               width: 32,
               height: 32,
               decoration: BoxDecoration(
                 shape: BoxShape.circle,
                 color: isSelected 
                   ? Colors.orange.withValues(alpha: 0.1)
                   : Colors.transparent,
                 border: isSelected 
                   ? Border.all(color: Colors.orange.withValues(alpha: 0.3), width: 1)
                   : null,
               ),
               child: Icon(
                 page.icon,
                 size: isSelected ? 20 : 16,
                 color: isSelected ? Colors.orange : Colors.grey.shade400,
               ),
             ),
           ),
         );
       }).toList(),
     ),
   );
 }
}\n\n// ====== lib/shared/widgets/coin_logo_provider.dart ======\n
// lib/shared/widgets/coin_logo_provider.dart
// 🚀 캐시 시스템이 적용된 코인 로고 프로바이더

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';

/// 🎨 업비트 KRW 마켓 → CoinPaprika ID 매핑 테이블
/// 실제 업비트 KRW 마켓의 모든 코인들 완전 매칭 (2024년 기준 ~250개)
class CoinLogoProvider {
  
  /// 🆕 메모리 캐시 (위젯 레벨 캐싱)
  static final Map<String, Widget> _widgetCache = {};
  
  /// 🆕 캐시 설정
  static const int _maxCacheObjects = 500; // 최대 500개 이미지 캐시
  
  /// 코인 로고 URL 가져오기 (64x64 썸네일)
  static String? getCoinLogoUrl(String ticker) {
    final paprikaId = _getCoinPaprikaId(ticker);
    if (paprikaId == null) return null;
    
    return 'https://coinpaprika.com/coin/$paprikaId/logo.png';
  }

  /// 코인 로고 URL 가져오기 (200x200 작은 이미지)
  static String? getCoinLogoUrlSmall(String ticker) {
    // CoinPaprika는 동일한 URL 사용 (자동 리사이즈)
    return getCoinLogoUrl(ticker);
  }

  /// 🚀 캐시된 코인 로고 위젯 생성 (메인 함수)
  static Widget buildCoinLogo({
    required String ticker,
    double radius = 16,
    Color? fallbackColor,
    Color? fallbackTextColor,
  }) {
    final cacheKey = '${ticker.toUpperCase()}_${radius}_${fallbackColor.hashCode}_${fallbackTextColor.hashCode}';
    
    // 🎯 메모리 캐시에서 먼저 확인
    if (_widgetCache.containsKey(cacheKey)) {
      return _widgetCache[cacheKey]!;
    }
    
    final logoUrl = getCoinLogoUrl(ticker);
    
    Widget logoWidget;
    
    if (logoUrl != null) {
      logoWidget = _buildCachedNetworkImage(
        ticker: ticker,
        logoUrl: logoUrl,
        radius: radius,
        fallbackColor: fallbackColor,
        fallbackTextColor: fallbackTextColor,
      );
    } else {
      logoWidget = _buildFallbackAvatar(ticker, radius, fallbackColor, fallbackTextColor);
    }
    
    // 🎯 메모리 캐시에 저장 (용량 제한)
    if (_widgetCache.length < _maxCacheObjects) {
      _widgetCache[cacheKey] = logoWidget;
    }
    
    return logoWidget;
  }

  /// 🚀 cached_network_image를 사용한 네트워크 이미지 로딩
  static Widget _buildCachedNetworkImage({
    required String ticker,
    required String logoUrl,
    required double radius,
    Color? fallbackColor,
    Color? fallbackTextColor,
  }) {
    return CircleAvatar(
      radius: radius,
      backgroundColor: Colors.grey.shade200,
      child: ClipOval(
        child: CachedNetworkImage(
          imageUrl: logoUrl,
          width: radius * 2,
          height: radius * 2,
          fit: BoxFit.cover,
          
          // 🎯 캐시 설정 (기본 캐시 매니저 사용)
          // cacheManager: DefaultCacheManager(), // 필요시 커스텀 매니저 설정
          
          // 🎯 로딩 중 위젯
          placeholder: (context, url) => Container(
            width: radius * 2,
            height: radius * 2,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.grey.shade100,
            ),
            child: Center(
              child: SizedBox(
                width: radius * 0.6,
                height: radius * 0.6,
                child: CircularProgressIndicator(
                  strokeWidth: 1.5,
                  valueColor: AlwaysStoppedAnimation<Color>(
                    Colors.grey.shade400,
                  ),
                ),
              ),
            ),
          ),
          
          // 🎯 에러 시 fallback
          errorWidget: (context, url, error) {
            return _buildFallbackAvatar(ticker, radius, fallbackColor, fallbackTextColor);
          },
          
          // 🎯 이미지 로드 완료
          imageBuilder: (context, imageProvider) {
            return Container(
              width: radius * 2,
              height: radius * 2,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                image: DecorationImage(
                  image: imageProvider,
                  fit: BoxFit.cover,
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  /// 🧹 캐시 정리 함수들
  static void clearMemoryCache() {
    _widgetCache.clear();
  }
  
  static void clearSpecificCache(String ticker) {
    _widgetCache.removeWhere((key, value) => key.startsWith(ticker.toUpperCase()));
  }
  
  static Future<void> clearNetworkCache() async {
    // cached_network_image의 캐시 정리
    // await DefaultCacheManager().emptyCache();
  }
  
  static int getMemoryCacheSize() {
    return _widgetCache.length;
  }

  /// CoinPaprika ID 매핑 (업비트 KRW 마켓 전체 커버 - 665줄 버전 기반)
  static String? _getCoinPaprikaId(String ticker) {
    const paprikaMappings = {
      // === 메이저 코인들 ===
      'BTC': 'btc-bitcoin',
      'ETH': 'eth-ethereum',
      'XRP': 'xrp-xrp',
      'ADA': 'ada-cardano',
      'SOL': 'sol-solana',
      'DOT': 'dot-polkadot',
      'AVAX': 'avax-avalanche',
      'MATIC': 'matic-polygon',
      'POL': 'pol-polygon-ecosystem-token',
      'NEAR': 'near-near-protocol',
      'ATOM': 'atom-cosmos',
      'LINK': 'link-chainlink',
      'UNI': 'uni-uniswap',
      'ALGO': 'algo-algorand',
      'VET': 'vet-vechain',
      'SAND': 'sand-the-sandbox',
      'MANA': 'mana-decentraland',
      'AXS': 'axs-axie-infinity',
      'THETA': 'theta-theta-token',
      'FIL': 'fil-filecoin',
      'AAVE': 'aave-aave',
      'DOGE': 'doge-dogecoin',
      'SHIB': 'shib-shiba-inu',
      'PEPE': 'pepe-pepe',
      
      // === 비트코인 계열 ===
      'BCH': 'bch-bitcoin-cash',
      'BSV': 'bsv-bitcoin-sv',
      'BTT': 'btt-bittorrent',
      '1000SATS': 'sats-1000sats',
      'ORDI': 'ordi-ordinals',
      
      // === 이더리움 생태계 ===
      'ETC': 'etc-ethereum-classic',
      'ENS': 'ens-ethereum-name-service',
      'LPT': 'lpt-livepeer',
      'COMP': 'comp-compound',
      'MKR': 'mkr-maker',
      'YFI': 'yfi-yearn-finance',
      'SUSHI': 'sushi-sushiswap',
      'BAL': 'bal-balancer',
      '1INCH': '1inch-1inch',
      'LRC': 'lrc-loopring',
      'ZRX': 'zrx-0x',
      'BAT': 'bat-basic-attention-token',
      'ENJ': 'enj-enjincoin',
      'CRV': 'crv-curve-dao-token',
      'SNX': 'snx-synthetix-network-token',
      'MASK': 'mask-mask-network',
      'BLUR': 'blur-blur',
      'GRT': 'grt-the-graph',
      
      // === 레이어1 블록체인들 ===
      'EGLD': 'egld-elrond',
      'INJ': 'inj-injective-protocol',
      'APT': 'apt-aptos',
      'SUI': 'sui-sui',
      'ARB': 'arb-arbitrum',
      'OP': 'op-optimism',
      'STX': 'stx-stacks',
      'TIA': 'tia-celestia',
      'SEI': 'sei-sei',
      'PYTH': 'pyth-pyth-network',
      'JTO': 'jto-jito',
      'JUP': 'jup-jupiter',
      'TNSR': 'tnsr-tensor',
      'W': 'w-wormhole',
      'ENA': 'ena-ethena',
      'OMNI': 'omni-omni-network',
      'REZ': 'rez-renzo',
      'BB': 'bb-bouncbit',
      'NOT': 'not-notcoin',
      'IO': 'io-io-net',
      'ZK': 'zk-zksync',
      'LISTA': 'lista-lista-dao',
      'ZRO': 'zro-layerzero',
      'G': 'g-gravity',
      'BANANA': 'banana-banana-gun',
      'RENDER': 'rndr-render-token',
      'TON': 'ton-the-open-network',
      'NEO': 'neo-neo',
      'GAS': 'gas-gas',
      'ONT': 'ont-ontology',
      'ONG': 'ong-ontology-gas',
      'QTUM': 'qtum-qtum',
      'WAVES': 'waves-waves',
      'LSK': 'lsk-lisk',
      'STRAX': 'strax-stratis',
      'ARK': 'ark-ark',
      'STORJ': 'storj-storj',
      'SC': 'sc-siacoin',
      'ARDR': 'ardr-ardor',
      'KMD': 'kmd-komodo',
      'ZEC': 'zec-zcash',
      'DASH': 'dash-dash',
      'XMR': 'xmr-monero',
      'ICX': 'icx-icon',
      'ZIL': 'zil-zilliqa',
      'IOTA': 'miota-iota',
      'XTZ': 'xtz-tezos',
      'CELO': 'celo-celo',
      'FLOW': 'flow-flow',
      'MINA': 'mina-mina-protocol',
      'HBAR': 'hbar-hedera-hashgraph',
      'CKB': 'ckb-nervos-network',
      'BEAM': 'beam-beam',
      'ZETA': 'zeta-zetachain',
      'TAIKO': 'taiko-taiko',
      'AERGO': 'aergo-aergo',
      
      // === 알트코인들 ===
      'LTC': 'ltc-litecoin',
      'A': 'a-vaulta', // VAULTA (볼타)
      'TRX': 'trx-tron',
      'XLM': 'xlm-stellar',
      'STEEM': 'steem-steem',
      'IOST': 'iost-iost',
      'MTL': 'mtl-metal',
      'GRS': 'grs-groestlcoin',
      'POWR': 'powr-power-ledger',
      'XEM': 'xem-nem',
      'XEC': 'xec-ecash',
      'VTHO': 'vtho-vethor-token',
      'TFUEL': 'tfuel-theta-fuel',
      'HIVE': 'hive-hive',
      'CVC': 'cvc-civic',
      'SNT': 'snt-status',
      'SXP': 'sxp-swipe',
      'T': 't-threshold-network',
      'PUNDIX': 'pundix-pundi-x',
      
      // === DeFi 토큰들 ===
      'CAKE': 'cake-pancakeswap',
      'RUNE': 'rune-thorchain',
      'ALPHA': 'alpha-alpha-finance-lab',
      'DODO': 'dodo-dodo',
      'RAY': 'ray-raydium',
      'SRM': 'srm-serum',
      'KNC': 'knc-kyber-network-crystal',
      'ANKR': 'ankr-ankr',
      'CELR': 'celr-celer-network',
      'KAVA': 'kava-kava',
      'HARD': 'hard-kava-lend',
      'SWP': 'swp-kava-swap',
      'JST': 'jst-just',
      'SUN': 'sun-sun',
      'CRO': 'cro-cronos',
      'CHZ': 'chz-chiliz',
      'GLM': 'glm-golem',
      'AUCTION': 'auction-bounce',
      'PENDLE': 'pendle-pendle',
      'STG': 'stg-stargate-finance',
      'COW': 'cow-cow-protocol',
      'OM': 'om-mantra-dao',
      'ONDO': 'ondo-ondo',
      'SAFE': 'safe-safe',
      
      // === 스테이블코인 ===
      'USDT': 'usdt-tether',
      'USDC': 'usdc-usd-coin',
      'BUSD': 'busd-binance-usd',
      'DAI': 'dai-dai',
      'TUSD': 'tusd-trueusd',
      'USDD': 'usdd-usdd',
      
      // === 게임/NFT/메타버스 ===
      'GALA': 'gala-gala',
      'APE': 'ape-apecoin',
      'GMT': 'gmt-stepn',
      'GST': 'gst-green-satoshi-token',
      'LOOKS': 'looks-looksrare',
      'PLA': 'pla-playdapp',
      'WAXP': 'waxp-wax',
      'TLM': 'tlm-alien-worlds',
      'SLP': 'slp-smooth-love-potion',
      'IMX': 'imx-immutable-x',
      'BIGTIME': 'bigtime-big-time',
      'GAME2': 'game-gamebuild',
      'AGLD': 'agld-adventure-gold',
      'YGG': 'ygg-yield-guild-games',
      'ME': 'me-magic-eden',
      'VIRTUAL': 'virtual-virtual-protocol',
      'MOCA': 'moca-moca',
      'PENGU': 'pengu-pudgy-penguins',
      'MEW': 'mew-cat-in-a-dogs-world',
      'ANIME': 'anime-animecoin',
      'FLOKI': 'floki-floki',
      'BONK': 'bonk-bonk',
      'WIF': 'wif-dogwifcoin',
      'BOME': 'bome-book-of-meme',
      
      // === 한국 프로젝트들 ===
      'KLAY': 'klay-klaytn',
      'BORA': 'bora-bora',
      'META': 'meta-metadium',
      'WEMIX': 'wemix-wemix-token',
      'MBL': 'mbl-moviebloc',
      'HUNT': 'hunt-hunt',
      'TEMCO': 'temco-temco',
      'SOLVE': 'solve-solve-care',
      'PROM': 'prom-prometeus',
      'ORBS': 'orbs-orbs',
      'MIX': 'mix-mixmarvel',
      'CENNZ': 'cennz-centrality',
      'STPT': 'stpt-standard-tokenization-protocol',
      'MDT': 'mdt-measurable-data-token',
      'LAMB': 'lamb-lambda',
      'COTI': 'coti-coti',
      'WTC': 'wtc-waltonchain',
      'NPXS': 'npxs-pundi-x',
      'APIS': 'apis-apis',
      'DAC': 'dac-davinci-coin',
      'ELF': 'elf-aelf',
      'KARMA': 'karma-karma-dao',
      'MEET': 'meet-coinmeet',
      'QKC': 'qkc-quarkchain',
      'SSX': 'ssx-somesing',
      'UPP': 'upp-sentinel-protocol',
      'TOKAMAK': 'ton-tokamak-network',
      'MLK': 'mlk-milk-alliance',
      'DKA': 'dka-dkargo',
      'CBK': 'cbk-cobak-token',
      'MOC': 'moc-mossland',
      'HP': 'hp-hippo-protocol',
      'BOUNTY': 'bnty-bounty0x',
      'MED': 'med-medibloc',
      'MVL': 'mvl-mass-vehicle-ledger',
      'ASTR': 'astr-astar',
      'TT': 'tt-thunder-token',
      'MNT': 'mnt-mantle',
      'FCT2': 'fct-factom',
      'IQ': 'iq-everipedia',
      'AHT': 'aht-ahatoken',
      'AWE': 'awe-awe-network',
      'ATH': 'ath-aethir',
      'SOPH': 'soph-sophon',
      'SIGN': 'sign-sign',
      
      // === 솔라나 생태계 ===
      'ORCA': 'orca-orca',
      'DRIFT': 'drift-drift-protocol',
      'SONIC': 's-sonic',
      'LAYER': 'layer-solayer',
      'DEEP': 'deep-deepbook-protocol',
      'MOVE': 'move-movement',
      
      // === AI/기술 토큰들 ===
      'ARKM': 'arkm-arkham',
      'KAITO': 'kaito-kaito',
      'NXPC': 'nxpc-nexpace',
      'WCT': 'wct-walletconnect-token',
      'AKT': 'akt-akash-network',
      'AQT': 'aqt-alpha-quark-token',
      'CARV': 'carv-carv',
      'UXLINK': 'uxlink-uxlink',
      'WAL': 'wal-walrus',
      'CTC': 'ctc-creditcoin',
      'POLYX': 'polyx-polymesh',
      'ID': 'id-space-id',
      'VANA': 'vana-vana',
      'STRIKE': 'strike-strike',
      'BERA': 'bera-berachain',
      'TRUMP': 'trump-maga',
      'POKT': 'pokt-pocket-network',
      'STMX': 'stmx-stormx',
      'BLAST': 'blast-blast',
      
      // === 신규 상장 코인들 ===
      'RVN': 'rvn-ravencoin',
      'AXL': 'axl-axelar',
      'ALT': 'alt-altlayer',
    };
    
    return paprikaMappings[ticker.toUpperCase()];
  }

  /// Fallback 아바타 생성 (첫 글자 또는 기본 아이콘)
  static Widget _buildFallbackAvatar(
    String ticker, 
    double radius, 
    Color? fallbackColor, 
    Color? fallbackTextColor,
  ) {
    return CircleAvatar(
      radius: radius,
      backgroundColor: fallbackColor ?? Colors.grey.shade300,
      child: Text(
        ticker.isNotEmpty ? ticker[0].toUpperCase() : '?',
        style: TextStyle(
          color: fallbackTextColor ?? Colors.grey.shade700,
          fontWeight: FontWeight.bold,
          fontSize: radius * 0.6,
        ),
      ),
    );
  }

  /// 특정 티커가 지원되는지 확인
  static bool isSupported(String ticker) => _getCoinPaprikaId(ticker.toUpperCase()) != null;
}\n\n// ====== lib/shared/widgets/sector_classification.dart ======\n
// lib/shared/widgets/sector_classification.dart

import 'package:flutter/foundation.dart';

/// 섹터 분류 관리 전용 Provider (공유 위젯 레이어)
/// 상세(28개) vs 기본(18개) 분류 토글 및 매핑 데이터 제공
class SectorClassificationProvider extends ChangeNotifier {
 // 현재 선택된 분류 타입 (true: 상세, false: 기본)
 bool _isDetailedClassification = true;
 
 // 🚀 캐시 시스템 추가
 Map<String, List<String>>? _cachedCurrentSectors;
 Map<String, List<String>>? _cachedCoinToSectorsMap;
 
 bool get isDetailedClassification => _isDetailedClassification;
 
 /// 분류 타입 토글
 void toggleClassificationType() {
   // 🚀 캐시 무효화
   _cachedCurrentSectors = null;
   _cachedCoinToSectorsMap = null;
   
   _isDetailedClassification = !_isDetailedClassification;
   notifyListeners();
 }
 
 /// 상세 분류 섹터별 코인 매핑 (28개 섹터)
 static const Map<String, List<String>> _detailedSectors = {
   // ==================== 기본 그룹 ====================
   '비트코인 그룹': ['BTC', 'BCH', 'BSV', 'XEC'],
   '이더리움 그룹': ['ETH', 'ETC'],
   '스테이킹': ['ETH', 'SOL', 'ADA', 'POL', 'ATOM'],

   // ==================== 블록체인 아키텍처 ====================
   '모놀리식 블록체인': [
     'SOL', 'ADA', 'TRX', 'SUI', 'AVAX', 'NEAR', 'CRO', 'APT', 'ETC', 'VET',
     'ATOM', 'ALGO', 'INJ', 'A', 'SEI', 'IOTA', 'XTZ', 'FLOW', 'KAVA', 'EGLD',
     'NEO', 'MINA', 'BERA', 'ZIL', 'QTUM', 'ASTR', 'GAS', 'VTHO', 'VANA', 'ELF',
     'WAVES', 'ICX', 'ONT', 'HIVE', 'SXP', 'POWR', 'ARDR', 'XEM', 'IOST', 'ONG',
     'GLMR', 'ARK', 'AERGO', 'QKC', 'META', 'TT', 'FCT2'
   ],
   '모듈러 블록체인': [
     'ETH', 'DOT', 'MNT', 'POL', 'ARB', 'STX', 'SONIC', 'MOVE', 'CKB', 'CELO',
     'LSK', 'BLAST', 'TAIKO', 'MTL', 'TOKAMAK'
   ],

   // ==================== 스테이블코인 생태계 ====================
   '스테이블 코인': ['USDT', 'USDC'],

   // ==================== DeFi 생태계 ====================
   'DEX/애그리게이터': [
     'UNI', 'JUP', 'DEEP', '1INCH', 'ZRX', 'ORCA', 'COW', 'ORBS', 'AUCTION', 'KNC'
   ],
   '랜딩': ['AAVE', 'COMP', 'STRIKE'],
   '유동화 스테이킹/리스테이킹': ['PENDLE', 'JTO', 'LAYER'],
   'RWA': ['ONDO', 'CTC'],

   // ==================== 인프라 & 기술 ====================
   '지급결제 인프라': ['BTC', 'XRP', 'BCH', 'XLM', 'BSV', 'XEC', 'PUNDIX', 'GRS'],
   '상호운용성/브릿지': ['ZRO', 'W', 'T', 'ZETA', 'STG'],
   '엔터프라이즈 블록체인': ['HBAR', 'POLYX', 'STRAX'],
   '오라클': ['LINK', 'PYTH'],
   '데이터 인프라': ['GRT', 'KAITO', 'ANKR', 'ARKM', 'MVL', 'CARV'],
   '스토리지': ['FIL', 'THETA', 'BTT', 'WAL', 'AKT', 'LPT', 'GLM', 'TFUEL', 'SC', 'STORJ'],
   'AI': ['VIRTUAL', 'RENDER', 'ATH'],

   // ==================== 엔터테인먼트 & 게임 ====================
   '메타버스': ['SAND', 'MANA', 'MOCA', 'MOC'],
   'NFT/게임': [
     'IMX', 'AXS', 'BEAM', 'BLUR', 'ENJ', 'GMT', 'ANIME', 'ME', 'BORA',
     'BIGTIME', 'WAXP', 'AGLD', 'GAME2', 'AQT'
   ],

   // ==================== 미디어 & 콘텐츠 ====================
   '미디어/스트리밍': ['MBL'],
   '광고': ['BAT', 'MLK', 'STMX'],
   '교육/기타 콘텐츠': ['IQ', 'AHT'],

   // ==================== 소셜 & 커뮤니티 ====================
   '소셜/DAO': ['G', 'UXLINK', 'STEEM', 'CBK'],
   '팬토큰': ['CHZ'],
   '밈': ['DOGE', 'SHIB', 'PEPE', 'TRUMP', 'BONK', 'MEW'],

   // ==================== 특수 용도 ====================
   'DID': ['ENS', 'ID', 'CVC'],
   '의료': ['MED'],
   '월렛/메세징': ['SAFE', 'MASK', 'WCT', 'SNT'],
 };

 /// 기본 분류 (18개 섹터) - 🆕 신규상장 섹터 4개 추가
 static const Map<String, List<String>> _basicSectors = {
   '메이저 코인': [
     'BTC', 'ETH', 'XRP', 'ADA', 'SOL', 'DOT', 'AVAX', 'MATIC', 'POL', 'NEAR',
     'ATOM', 'LINK', 'UNI', 'ALGO', 'VET', 'SAND', 'MANA', 'AXS', 'THETA',
     'FIL', 'AAVE', 'DOGE', 'SHIB', 'PEPE'
   ],
   '비트코인 계열': [
     'BTC', 'BCH', 'BSV', 'BTT', '1000SATS', 'ORDI'
   ],
   '이더리움 생태계': [
     'ETH', 'ETC', 'ENS', 'LPT', 'COMP', 'MKR', 'YFI', 'SUSHI', 'BAL',
     '1INCH', 'LRC', 'ZRX', 'BAT', 'ENJ', 'CRV', 'SNX', 'MASK', 'BLUR', 'GRT'
   ],
   '레이어1 블록체인': [
     'EGLD', 'INJ', 'APT', 'SUI', 'ARB', 'OP', 'STX', 'TIA', 'SEI', 'PYTH',
     'JTO', 'JUP', 'TNSR', 'W', 'ENA', 'OMNI', 'REZ', 'BB', 'NOT', 'IO',
     'ZK', 'LISTA', 'ZRO', 'G', 'BANANA', 'RENDER', 'TON', 'NEO', 'GAS',
     'ONT', 'ONG', 'QTUM', 'WAVES', 'LSK', 'STRAX', 'ARK', 'STORJ', 'SC',
     'ARDR', 'KMD', 'ZEC', 'DASH', 'XMR', 'ICX', 'ZIL', 'IOTA', 'XTZ',
     'CELO', 'FLOW', 'MINA', 'HBAR', 'CKB', 'BEAM', 'ZETA', 'TAIKO', 'AERGO'
   ],
   
   // 🆕 시총별 분류 (환율 1,400원 적용 기준)
   '고 시총': [
     'BTC', 'ETH', 'XRP', 'SOL', 'DOGE', 'AVAX', 'TRUMP'
   ],
   '중 시총': [
     'SUI', 'APT', 'NEAR', 'UNI', 'LINK', 'AAVE', 'INJ', 'STX', 'AXS', 'FIL',
     'ATOM', 'DOT', 'PENDLE', 'RENDER', 'GAS', 'ORCA', 'BERA', 'ZRO', 'TIA',
     'MASK', 'VIRTUAL', 'KAITO', 'QTUM', 'JTO', 'OM', 'ONDO', 'ME', 'LAYER',
     'AGLD', 'THETA', 'MTL', 'MNT', 'ADA', 'TAIKO',      'VAULTA', 'DRIFT', 'CTC',
     'XTZ', 'IMX', 'ARKM', 'SAFE', 'JUP', 'WAL', 'LSK', 'KAVA', 'COW',
     'UXLINK', 'ARK', 'FLOW', 'CARV', 'ARB', 'CELO', 'PUNDIX', 'KNC',
     'MANA', 'TRX', 'SAND', 'STORJ', 'XLM', 'HUNT', 'SONIC', 'GLM', 'ZRX',
     'HIVE', 'ZETA', 'MINA', 'POL', '1INCH', 'ALGO', 'SEI', 'STG', 'IOTA',
     'ID', 'SXP', 'HBAR', 'POWR', 'DEEP', 'MOVE', 'POLYX', 'STEEM', 'ONT',
     'BAT', 'CVC', 'AERGO', 'ICX', 'PYTH', 'CRO', 'GRT', 'BLUR', 'ARDR',
     'BORA', 'W', 'MOCA', 'BIGTIME', 'GMT', 'STRAX', 'CHZ', 'SNT', 'TFUEL',
     'JST', 'VET', 'ANIME', 'WAXP', 'ORBS', 'ANKR', 'T', 'G', 'ZIL', 'PENGU',
     'XEM', 'BEAM', 'CKB', 'IQ', 'AHT', 'IOST'
   ],
   '저 시총': [
     'GAME2', 'MVL', 'SC', 'MEW', 'BLAST', 'STMX', 'TT', 'MBL', 'VTHO', 'XEC',
     'BONK', 'SHIB', 'PEPE', 'BTT', 'CBK', 'MLK', 'POKT', 'SIGN', 'MOC',
     'SOPH', 'AWE', 'ATH', 'BOUNTY', 'HP', 'FCT2', 'ASTR', 'META', 'DKA',
     'QKC', 'MED'
   ],
   
   // 🆕 마이너 알트코인 (기존 알트코인 복원)
   '마이너 알트코인': [
     'LTC', 'A', 'TRX', 'XLM', 'STEEM', 'IOST', 'MTL', 'GRS', 'POWR',
     'XEM', 'XEC', 'VTHO', 'TFUEL', 'HIVE', 'CVC', 'SNT', 'SXP', 'T', 'PUNDIX'
   ],
   
   'DeFi 토큰': [
     'CAKE', 'RUNE', 'ALPHA', 'DODO', 'RAY', 'SRM', 'KNC', 'ANKR', 'CELR',
     'KAVA', 'HARD', 'SWP', 'JST', 'SUN', 'CRO', 'CHZ', 'GLM', 'AUCTION',
     'PENDLE', 'STG', 'COW', 'OM', 'ONDO', 'SAFE'
   ],
   '스테이블코인': [
     'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'USDD'
   ],
   '게임/NFT/메타버스': [
     'GALA', 'APE', 'GMT', 'GST', 'LOOKS', 'PLA', 'WAXP', 'TLM', 'SLP',
     'IMX', 'BIGTIME', 'GAME2', 'AGLD', 'YGG', 'ME', 'VIRTUAL', 'MOCA',
     'PENGU', 'MEW', 'ANIME', 'FLOKI', 'BONK', 'WIF', 'BOME'
   ],
   '한국 프로젝트': [
     'KLAY', 'BORA', 'META', 'WEMIX', 'MBL', 'HUNT', 'TEMCO', 'SOLVE',
     'PROM', 'ORBS', 'MIX', 'CENNZ', 'STPT', 'MDT', 'LAMB', 'COTI',
     'WTC', 'NPXS', 'APIS', 'DAC', 'ELF', 'KARMA', 'MEET', 'QKC',
     'SSX', 'UPP', 'TOKAMAK', 'MLK', 'DKA', 'CBK', 'MOC', 'HP',
     'BOUNTY', 'MED', 'MVL', 'ASTR', 'TT', 'MNT', 'FCT2', 'IQ',
     'AHT', 'AWE', 'ATH', 'SOPH', 'SIGN'
   ],
   '솔라나 생태계': [
     'SOL', 'ORCA', 'DRIFT', 'SONIC', 'LAYER', 'DEEP', 'MOVE'
   ],
   'AI/기술 토큰': [
     'ARKM', 'KAITO', 'NXPC', 'WCT', 'AKT', 'AQT', 'CARV', 'UXLINK',
     'WAL', 'CTC', 'POLYX', 'ID', 'VANA', 'STRIKE', 'BERA', 'TRUMP',
     'POKT', 'STMX', 'BLAST'
   ],

   // 🆕 신규상장 섹터 4개 추가
   '2023년 신규상장': [
     'SHIB', 'MASK', 'EGLD', 'SUI', 'GRT', 'BLUR', 'IMX', 'SEI', 'MINA', 'CTC', 'ASTR'
   ],
   '2024년 상반기 신규상장': [
     'ID', 'PYTH', 'MNT', 'BIGTIME', 'AKT', 'ZETA', 'STG', 'BEAM', 'TAIKO', 'ONDO', 'ZRO', 'BLAST'
   ],
   '2024년 하반기 신규상장': [
     'JUP', 'ENS', 'GAL', 'PENDLE', 'ATH', 'UXLINK', 'CKB', 'W', 'CARV', 'INJ', 'MEW', 'UNI', 
     'SAFE', 'DRIFT', 'AGLD', 'PEPE', 'BONK', 'RENDER', 'MOVE', 'ME', 'MOCA', 'VANA'
   ],
   '2025년 상반기 신규상장': [
     'SONIC', 'VTHO', 'ANIME', 'VIRTUAL', 'BERA', 'LAYER', 'TRUMP', 'JTO', 'COW', 'KAITO', 
     'ARKM', 'ORCA', 'WAL', 'COMP', 'FIL', 'WCT', 'DEEP', 'SIGN', 'TIA', 'PENGU', 
     'NXPC', 'OM', 'SOPH', 'LPT', 'POKT', 'RVN', 'AXL', 'ALT', 'RAY'
   ],
 };

 /// 🚀 캐시된 현재 활성화된 섹터 매핑 반환
 Map<String, List<String>> get currentSectors {
   _cachedCurrentSectors ??= _isDetailedClassification ? _detailedSectors : _basicSectors;
   return _cachedCurrentSectors!;
 }

 /// 🚀 캐시된 코인→섹터 역색인 맵 반환 (O(1) 조회용)
 Map<String, List<String>> get coinToSectorsMap {
   if (_cachedCoinToSectorsMap == null) {
     _cachedCoinToSectorsMap = <String, List<String>>{};
     currentSectors.forEach((sector, coins) {
       for (final coin in coins) {
         _cachedCoinToSectorsMap!.putIfAbsent(coin, () => []).add(sector);
       }
     });
     
     if (kDebugMode) {
       debugPrint('🚀 SectorClassification: coinToSectorsMap built with ${_cachedCoinToSectorsMap!.length} coins');
     }
   }
   return _cachedCoinToSectorsMap!;
 }

 /// 상세 분류 섹터 매핑 반환
 Map<String, List<String>> get detailedSectors => _detailedSectors;

 /// 기본 분류 섹터 매핑 반환
 Map<String, List<String>> get basicSectors => _basicSectors;

 /// 섹터 목록 반환
 List<String> get sectorNames => currentSectors.keys.toList();

 /// 특정 섹터의 코인들 반환
 List<String> getCoinsInSector(String sectorName) {
   return currentSectors[sectorName] ?? [];
 }

 /// 🚀 최적화된 특정 코인이 속한 섹터들 반환 (O(1) 조회)
 List<String> getSectorsForCoin(String ticker) {
   return coinToSectorsMap[ticker.toUpperCase()] ?? [];
 }

 /// 현재 분류 타입 문자열 반환
 String get currentClassificationName {
   return _isDetailedClassification ? '상세' : '기본';
 }

 /// 섹터별 통계 정보
 Map<String, int> get sectorSizes {
   return currentSectors.map((sector, coins) => 
       MapEntry(sector, coins.length));
 }

 /// 전체 고유 코인 개수
 int get totalUniqueCoins {
   return currentSectors.values
       .expand((coins) => coins)
       .toSet()
       .length;
 }

 /// 중복도가 높은 코인들 (여러 섹터에 속한 코인들)
 Map<String, int> getCoinDuplicationCount() {
   Map<String, int> duplications = {};
   
   currentSectors.forEach((sector, coins) {
     for (String coin in coins) {
       duplications[coin] = (duplications[coin] ?? 0) + 1;
     }
   });
   
   return Map.fromEntries(
     duplications.entries.toList()
       ..sort((a, b) => b.value.compareTo(a.value))
   );
 }

 /// 🔧 디버깅용: 캐시 상태 정보
 Map<String, dynamic> get cacheStatus {
   return {
     'isDetailed': _isDetailedClassification,
     'currentSectorsCached': _cachedCurrentSectors != null,
     'coinToSectorsMapCached': _cachedCoinToSectorsMap != null,
     'totalSectors': currentSectors.length,
     'totalCoins': coinToSectorsMap.length,
     'averageCoinsPerSector': currentSectors.values.map((e) => e.length).reduce((a, b) => a + b) / currentSectors.length,
   };
 }
}\n\n// ====== lib/shared/widgets/websocket_modal.dart ======\n
// lib/shared/widgets/websocket_modal.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';

/// WebSocket 상세 정보 팝업 오버레이
class WebSocketStatsOverlay {
  static OverlayEntry? _overlayEntry;

  /// 롱프레스 시 팝업 표시 (Market Mood 방식)
  static void show({
    required BuildContext context,
    required WidgetRef ref,
    required Offset position,
    required double statusIconSize,
  }) {
    hide(); // 기존 팝업 제거

    // Market Mood와 동일한 방식으로 위치 미리 계산
    final adjustedPosition = _calculateModalPosition(context, position, statusIconSize);

    _overlayEntry = OverlayEntry(
      builder: (context) => _WebSocketStatsPopup(
        position: adjustedPosition,
        statusIconSize: statusIconSize,
        ref: ref,
      ),
    );

    Overlay.of(context).insert(_overlayEntry!);
  }

  /// WebSocket 전용 위치 계산 (항상 아래쪽에만 표시)
  static Offset _calculateModalPosition(BuildContext context, Offset globalPosition, double size) {
    final screenSize = MediaQuery.of(context).size;
    final modalWidth = size * 4.2 * 2.5;
    const modalHeight = 200.0; // ✅ const 추가 (Line 38)
    
    // 아이콘 중앙 기준으로 모달 중앙 정렬 + 우측으로 이동
    double adjustedX = globalPosition.dx - (modalWidth / 2) + 150; // 🔧 우측으로 50px 이동
    double adjustedY = globalPosition.dy + size + 2; // 🔧 항상 아래쪽에만
    
    // 좌측 경계 체크
    if (adjustedX < 16) {
      adjustedX = 16;
    }
    
    // 우측 경계 체크
    if (adjustedX + modalWidth > screenSize.width - 0) {
      adjustedX = screenSize.width - modalWidth - 0;
    }
    
    // 하단 경계 체크 (화면 아래로 벗어나면 위쪽으로만)
    if (adjustedY + modalHeight > screenSize.height - 50) {
      adjustedY = globalPosition.dy - modalHeight - 8;
    }
    
    return Offset(adjustedX, adjustedY);
  }

  /// 팝업 숨기기
  static void hide() {
    _overlayEntry?.remove();
    _overlayEntry = null;
  }
}

class _WebSocketStatsPopup extends StatefulWidget {
  final Offset position;
  final double statusIconSize;
  final WidgetRef ref;

  const _WebSocketStatsPopup({
    required this.position,
    required this.statusIconSize,
    required this.ref,
  });

  @override
  State<_WebSocketStatsPopup> createState() => _WebSocketStatsPopupState();
}

class _WebSocketStatsPopupState extends State<_WebSocketStatsPopup>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );

    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));

    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.0, 0.5),
    ));

    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => WebSocketStatsOverlay.hide(),
      behavior: HitTestBehavior.translucent,
      child: Material(
        color: Colors.transparent,
        child: Stack(
          children: [
            // 투명 배경 (탭하면 닫힘)
            Positioned.fill(
              child: Container(color: Colors.transparent),
            ),
            // 실제 팝업 (Market Mood 방식: 이미 계산된 위치 사용)
            AnimatedBuilder(
              animation: _controller,
              builder: (context, child) {
                return Positioned(
                  left: widget.position.dx,
                  top: widget.position.dy,
                  child: Transform.scale(
                    scale: _scaleAnimation.value,
                    alignment: Alignment.center,
                    child: Opacity(
                      opacity: _opacityAnimation.value,
                      child: _buildPopupContent(),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPopupContent() {
    // Market Mood와 동일한 크기 계산
    final baseSize = widget.statusIconSize * 4.2;
    
    return IntrinsicWidth(
      child: Container(
        constraints: BoxConstraints(
          minWidth: baseSize,
          maxWidth: baseSize * 2.5,
          minHeight: baseSize,
        ),
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.08),
              blurRadius: 16,
              offset: const Offset(0, 6),
              spreadRadius: 2,
            ),
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.04),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
          border: Border.all(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.12),
            width: 0.8,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(14),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildStatsContent(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatsContent() {
    final stats = widget.ref.read(wsStatsProvider);
    
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ⏰ 시간 정보
        _buildSectionTitle('시간 정보', Icons.access_time),
        const SizedBox(height: 4),
        
        _buildStatRow(
          icon: Icons.link,
          label: '현재 연결',
          value: stats.connectTime != null && stats.uptime != null
              ? _formatDuration(stats.uptime!)
              : '미연결',
          isHighlight: stats.connectTime != null,
        ),
        
        if (stats.lastStateChangeTime != null)
          _buildStatRow(
            icon: Icons.schedule,
            label: '마지막 변경',
            value: _formatTimeAgo(stats.lastStateChangeTime!),
          ),
        
        const SizedBox(height: 8),
        
        // 🔄 연결 통계
        _buildSectionTitle('연결 통계', Icons.analytics),
        const SizedBox(height: 4),
        
        _buildStatRow(
          icon: Icons.refresh,
          label: '재연결',
          value: '${stats.reconnectCount}회',
          isWarning: stats.reconnectCount > 5,
        ),
        
        _buildStatRow(
          icon: Icons.play_arrow,
          label: '총 세션',
          value: '${stats.totalSessions}회',
        ),
        
        if (stats.connectionAttempts > 0)
          _buildStatRow(
            icon: Icons.trending_up,
            label: '성공률',
            value: '${stats.connectionSuccessRate.toStringAsFixed(1)}%',
            isHighlight: stats.connectionSuccessRate > 90,
            isWarning: stats.connectionSuccessRate < 70,
          ),
        
        const SizedBox(height: 8),
        
        // 📱 앱 생명주기
        _buildSectionTitle('앱 생명주기', Icons.timeline),
        const SizedBox(height: 4),
        
        _buildStatRow(
          icon: Icons.hourglass_full,
          label: '누적 시간',
          value: _formatDuration(stats.cumulativeConnectTime),
        ),
        
        if (stats.totalSessions > 0)
          _buildStatRow(
            icon: Icons.timer_outlined,
            label: '평균 세션',
            value: _formatDuration(stats.averageSessionDuration),
          ),
      ],
    );
  }

  Widget _buildSectionTitle(String title, IconData icon) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          icon,
          size: 11,
          color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
        ),
        const SizedBox(width: 4),
        Flexible(
          child: Text(
            title,
            style: TextStyle(
              fontSize: 9,
              fontWeight: FontWeight.w700,
              color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
              letterSpacing: 0.3,
            ),
            overflow: TextOverflow.ellipsis,
          ),
        ),
      ],
    );
  }

  Widget _buildStatRow({
    required IconData icon,
    required String label,
    required String value,
    bool isError = false,
    bool isHighlight = false,
    bool isWarning = false,
  }) {
    Color getColor() {
      if (isError) return Theme.of(context).colorScheme.error;
      if (isHighlight) return Theme.of(context).colorScheme.primary;
      if (isWarning) return Theme.of(context).colorScheme.tertiary;
      return Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6);
    }

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 1),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      decoration: BoxDecoration(
        color: isHighlight 
            ? Theme.of(context).colorScheme.primary.withValues(alpha: 0.08)
            : isWarning
            ? Theme.of(context).colorScheme.tertiary.withValues(alpha: 0.08)
            : Colors.transparent,
        borderRadius: BorderRadius.circular(6),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 11,
            color: getColor(),
          ),
          const SizedBox(width: 5),
          Text(
            '$label: ',
            style: TextStyle(
              fontSize: 9,
              fontWeight: FontWeight.w500,
              color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
            ),
          ),
          Flexible(
            child: Text(
              value,
              style: TextStyle(
                fontSize: 9,
                fontWeight: FontWeight.w600,
                color: getColor(),
                letterSpacing: 0.2,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  String _formatTimeAgo(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inSeconds < 60) {
      return '방금 전';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}분 전';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}시간 전';
    } else {
      return '${difference.inDays}일 전';
    }
  }

  String _formatDuration(Duration duration) {
    if (duration == Duration.zero) return '없음';
    
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    
    if (duration.inHours > 0) {
      final hours = twoDigits(duration.inHours);
      final minutes = twoDigits(duration.inMinutes.remainder(60));
      final seconds = twoDigits(duration.inSeconds.remainder(60));
      return '$hours:$minutes:$seconds';
    } else if (duration.inMinutes > 0) {
      final minutes = duration.inMinutes;
      final seconds = twoDigits(duration.inSeconds.remainder(60));
      return '$minutes분 $seconds초';
    } else {
      return '${duration.inSeconds}초';
    }
  }
}\n\n// ====== lib/main.dart ======\n
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // 🆕 SystemChrome 추가
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'core/config/app_config.dart';
import 'core/services/hive_service.dart';
import 'core/bridge/signal_bus.dart';
import 'core/di/app_providers.dart';
import 'app.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // 1) 환경 설정 (Hive 제외)
  await AppConfig.init(envPath: '.env');
  await Firebase.initializeApp();

  // 2) Hive 단일 초기화 🎯
  final hive = HiveService();
  await hive.init();

  // 3) SharedPreferences, SignalBus 준비
  final prefs = await SharedPreferences.getInstance();
  final signalBus = SignalBus();

  // 🆕 4) 초기 화면 회전 설정 적용
  await _applyInitialOrientationSettings(prefs);

  // 5) ProviderContainer 생성 및 오버라이드
  final container = ProviderContainer(
    observers: [AppProviderObserver()],
    overrides: [
      hiveServiceProvider.overrideWithValue(hive), // 🎯 NEW
      sharedPreferencesProvider.overrideWithValue(prefs),
      signalBusProvider.overrideWithValue(signalBus),
    ],
  );

  // 6) 앱 실행
  runApp(
    UncontrolledProviderScope(
      container: container,
      child: ProviderInitializer(
        child: MyApp(navigatorKey: GlobalKey<NavigatorState>()),
      ),
    ),
  );
}

/// 🆕 초기 화면 회전 설정 적용
Future<void> _applyInitialOrientationSettings(SharedPreferences prefs) async {
  final isPortraitLocked = prefs.getBool('portraitLocked') ?? false;
  
  if (isPortraitLocked) {
    // 세로 모드만 허용
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  } else {
    // 모든 방향 허용
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  }
}\n\n// ====== lib/data/datasources/trade_cache_ds.dart ======\n
// lib/data/datasources/trade_cache_ds.dart

import 'package:hive/hive.dart';
import '../models/trade_dto.dart';
import '../../domain/entities/trade.dart';

/// Hive 기반 간단 거래 캐시 데이터소스
/// - HiveService에서 이미 열린 Box를 주입받아 사용
/// - Box 생명주기 관리는 HiveService가 담당
class TradeCacheDataSource {
  static const _maxCacheSize = 1000;

  /// 🎯 주입받은 Box (이미 열려있다는 전제)
  final Box<TradeDto> _box;
  
  /// 생성자: 이미 열린 Box를 주입받음
  TradeCacheDataSource(this._box);

  /// Trade를 DTO로 변환해 저장, 사이즈 초과 시 오래된 항목 제거
  Future<void> cacheTrade(Trade trade) async {
    final dto = TradeDto(
      market: trade.market,
      price: trade.price,
      volume: trade.volume,
      side: trade.side,
      changePrice: trade.changePrice,
      changeState: trade.changeState,
      timestampMs: trade.timestampMs,
      sequentialId: trade.sequentialId,
    );
    
    await _box.put(trade.sequentialId, dto);
    
    // 최대 캐시 사이즈 관리
    if (_box.length > _maxCacheSize) {
      final toRemove = _box.keys.take(_box.length - _maxCacheSize);
      await _box.deleteAll(toRemove);
    }
  }

  /// 캐시된 Trade 전부 반환
  List<Trade> getCachedTrades() =>
      _box.values.map((dto) => dto.toEntity()).toList();

  /// 캐시 클리어
  Future<void> clearCache() => _box.clear();

  // 🗑️ Box lifecycle 관리 메서드들 제거:
  // - init() : HiveService가 담당
  // - dispose() : HiveService가 담당
}\n\n// ====== lib/data/datasources/trade_remote_ds.dart ======\n
// lib/data/datasources/trade_remote_ds.dart

import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import '../../../core/bridge/signal_bus.dart';
import '../../../core/event/app_event.dart';
import '../../../core/network/websocket/trade_ws_client.dart';
import '../models/trade_dto.dart';
import '../../domain/entities/trade.dart';

/// Fetches a live trade stream; on error falls back to synthetic data.
/// 🆕 브로드캐스트 지원으로 여러 Repository가 동일한 스트림 구독 가능
class TradeRemoteDataSource {
  final TradeWsClient _ws;
  final SignalBus _signalBus;
  final bool _useTestData;

  // 🆕 브로드캐스트 시스템
  StreamController<Trade>? _masterController;
  StreamSubscription<List<Map<String, dynamic>>>? _wsSub;
  bool _disposed = false;
  List<String>? _currentMarkets; // 현재 구독 중인 마켓들
  int _subscriberCount = 0; // 구독자 수 추적

  TradeRemoteDataSource(
    this._ws,
    this._signalBus, {
    bool useTestData = false,
  }) : _useTestData = useTestData;

  /// 🆕 브로드캐스트 스트림 제공 - 여러 Repository가 구독 가능
  Stream<Trade> watch(List<String> markets) {
    if (_useTestData) return _testStream();

    // dispose 후 재사용 가능하도록 초기화
    if (_disposed) {
      debugPrint('TradeRemoteDataSource: resetting after dispose');
      _disposed = false;
    }

    // 🆕 동일한 마켓이면 기존 스트림 재사용
    if (_masterController != null && 
        _currentMarkets != null && 
        _marketsEqual(_currentMarkets!, markets)) {
      debugPrint('TradeRemoteDataSource: reusing existing broadcast stream for ${markets.length} markets');
      return _masterController!.stream;
    }

    // 🆕 새로운 마켓이면 기존 스트림 정리하고 새로 생성
    _cleanupMasterStream();
    _initializeMasterStream(markets);

    return _masterController!.stream;
  }

  /// 🆕 마스터 브로드캐스트 스트림 초기화
  void _initializeMasterStream(List<String> markets) {
    debugPrint('TradeRemoteDataSource: initializing master broadcast stream for ${markets.length} markets');
    
    _currentMarkets = List<String>.from(markets);
    
    _masterController = StreamController<Trade>.broadcast(
      onListen: () {
        _subscriberCount++;
        debugPrint('TradeRemoteDataSource: subscriber added (total: $_subscriberCount)');
        
        // 첫 번째 구독자일 때만 WebSocket 시작
        if (_subscriberCount == 1 && !_disposed) {
          _startWebSocket(markets);
        }
      },
      onCancel: () {
        _subscriberCount--;
        debugPrint('TradeRemoteDataSource: subscriber removed (remaining: $_subscriberCount)');
        
        // 모든 구독자가 떠나면 WebSocket 정리 (즉시는 아니고 잠시 대기)
        if (_subscriberCount <= 0) {
          Timer(const Duration(seconds: 5), () {
            if (_subscriberCount <= 0 && !_disposed) {
              debugPrint('TradeRemoteDataSource: no subscribers, cleaning up WebSocket');
              _cleanupWebSocket();
            }
          });
        }
      },
    );
  }

  /// 🆕 WebSocket 연결 시작
  Future<void> _startWebSocket(List<String> markets) async {
    if (_disposed) return;

    try {
      debugPrint('TradeRemoteDataSource: starting WebSocket for ${markets.length} markets');
      
      await _ws.connect(markets);
      _wsSub = _ws.stream.listen(
        (rawBatch) {
          // controller가 닫혔거나 disposed면 처리 안함
          if (_disposed || _masterController == null || _masterController!.isClosed) {
            debugPrint('TradeRemoteDataSource: skipping data - disposed or closed');
            return;
          }

          for (final item in rawBatch) {
            final dto = TradeDto.tryParse(item);
            if (dto == null) continue;
            final entity = dto.toEntity();
            
            // 🆕 마스터 컨트롤러에 브로드캐스트
            if (!_disposed && _masterController != null && !_masterController!.isClosed) {
              _masterController!.add(entity);
            }

            // dispatch as AppEvent with metadata
            final event = AppEvent.now(dto.toMap());
            _signalBus.fireTradeEvent(event);
          }
        },
        onError: (error, stackTrace) {
          debugPrint('WebSocket error: $error');
          if (!_disposed && _masterController != null && !_masterController!.isClosed) {
            _masterController!.addStream(_testStream());
          }
        },
        onDone: () {
          debugPrint('WebSocket done');
          if (!_disposed && _masterController != null && !_masterController!.isClosed) {
            _masterController!.addStream(_testStream());
          }
        },
        cancelOnError: false,
      );
    } catch (e) {
      debugPrint('WS connection failed: $e');
      if (!_disposed && _masterController != null && !_masterController!.isClosed) {
        _masterController!.addStream(_testStream());
      }
    }
  }

  /// 🆕 WebSocket만 정리 (컨트롤러는 유지)
  void _cleanupWebSocket() {
    debugPrint('TradeRemoteDataSource: cleaning up WebSocket');
    _wsSub?.cancel();
    _wsSub = null;
  }

  /// 🆕 마스터 스트림 완전 정리
  void _cleanupMasterStream() {
    debugPrint('TradeRemoteDataSource: cleaning up master stream');
    
    _cleanupWebSocket();
    
    if (_masterController != null && !_masterController!.isClosed) {
      _masterController!.close();
    }
    _masterController = null;
    _currentMarkets = null;
    _subscriberCount = 0;
  }

  /// 🆕 마켓 리스트 비교 헬퍼
  bool _marketsEqual(List<String> a, List<String> b) {
    if (a.length != b.length) return false;
    final setA = Set<String>.from(a);
    final setB = Set<String>.from(b);
    return setA.containsAll(setB) && setB.containsAll(setA);
  }

  /// Synthetic fallback stream for dev/test.
  Stream<Trade> _testStream() async* {
    final rnd = Random();
    const symbols = [
      'KRW-BTC', 'KRW-ETH', 'KRW-XRP',
      'KRW-DOGE', 'KRW-SOL', 'KRW-ADA',
      'KRW-LINK', 'KRW-DOT', 'KRW-AVAX',
      'KRW-MATIC',
    ];

    while (!_disposed) {
      await Future.delayed(const Duration(milliseconds: 500));
      if (_disposed) break;
      
      final nowMs = DateTime.now().millisecondsSinceEpoch;
      final dto = TradeDto(
        market: symbols[rnd.nextInt(symbols.length)],
        price: (rnd.nextDouble() * 1000).roundToDouble(),
        volume: rnd.nextDouble(),
        side: rnd.nextBool() ? 'BID' : 'ASK',
        changePrice: 0.0,
        changeState: 'EVEN',
        timestampMs: nowMs,
        sequentialId: 'test-$nowMs-${rnd.nextInt(1000)}',
      );
      yield dto.toEntity();
      _signalBus.fireTradeEvent(AppEvent.now(dto.toMap()));
    }
  }

  /// Clean up resources when no longer needed.
  Future<void> dispose() async {
    if (_disposed) return;
    
    _disposed = true;
    
    debugPrint('TradeRemoteDataSource: disposing...');
    
    // 모든 리소스 정리
    _cleanupMasterStream();
    
    debugPrint('TradeRemoteDataSource: disposed');
    
    // do not dispose shared ws client here
  }
}\n\n// ====== lib/data/datasources/market_mood_remote_ds.dart ======\n
// lib/data/datasources/market_mood_remote_ds.dart
// 🌐 Data Layer: 원격 데이터 소스 (안정성이 검증된 Timer 방식으로 복원)

import 'dart:async';
import '../../core/network/api_client_coingecko.dart';
import '../../core/utils/logger.dart';
import '../../data/models/market_mood_dto.dart';

/// 🌐 마켓무드 원격 데이터 소스
class MarketMoodRemoteDataSource {
  final CoinGeckoApiClient _apiClient;
  Timer? _globalDataTimer;
  StreamController<CoinGeckoGlobalDataDto>? _globalDataController;

  MarketMoodRemoteDataSource(this._apiClient);

  Stream<CoinGeckoGlobalDataDto> getGlobalMarketDataStream() {
    // 이미 스트림이 활성화된 경우 재사용
    if (_globalDataController != null && !_globalDataController!.isClosed) {
      return _globalDataController!.stream;
    }
    
    _globalDataController = StreamController<CoinGeckoGlobalDataDto>.broadcast();
    
    Future<void> fetch() async {
      try {
        final responseDto = await _apiClient.getGlobalMarketData();
        final dataDto = responseDto.data;

        if (_globalDataController != null && !_globalDataController!.isClosed) {
          _globalDataController!.add(dataDto);
          log.d('📊 글로벌 마켓 데이터 수신 성공 (Timer): ${dataDto.totalVolumeUsd.toStringAsFixed(0)}B USD');
        }
      } catch (e, st) {
        if (_globalDataController != null && !_globalDataController!.isClosed) {
          _globalDataController!.addError(e, st);
          log.e('❌ 글로벌 마켓 데이터 조회 실패 (Timer): $e');
        }
      }
    }

    // 첫 호출
    fetch();

    // 30분마다 호출
    _globalDataTimer = Timer.periodic(const Duration(minutes: 30), (_) => fetch());

    _globalDataController!.onCancel = () {
      _globalDataTimer?.cancel();
      _globalDataTimer = null;
      log.d('🔄 글로벌 마켓 데이터 스트림 리스너 없음. 타이머 중지.');
    };

    return _globalDataController!.stream;
  }

  Future<CoinGeckoGlobalDataDto> getGlobalMarketData() async {
    final responseDto = await _apiClient.getGlobalMarketData();
    return responseDto.data;
  }

  Future<double> getUsdToKrwRate() async {
    return _apiClient.getUsdToKrwRate();
  }

  Future<bool> checkApiHealth() async {
    try {
      await getGlobalMarketData();
      return true;
    } catch (_) {
      return false;
    }
  }

  void dispose() {
    _globalDataTimer?.cancel();
    _globalDataTimer = null;
    _globalDataController?.close();
    _globalDataController = null;
    log.d('🧹 MarketMoodRemoteDataSource 정리 완료');
  }
}\n\n// ====== lib/data/datasources/settings_local_ds.dart ======\n
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/app_settings.dart';

class SettingsLocalDataSource {
 final SharedPreferences prefs;

 SettingsLocalDataSource(this.prefs);

 // 테마 모드 관리
 ThemeMode getThemeMode() {
   final themeName = prefs.getString('themeMode') ?? 'system';
   return switch (themeName) {
     'light' => ThemeMode.light,
     'dark' => ThemeMode.dark,
     _ => ThemeMode.system,
   };
 }

 Future<void> saveThemeMode(ThemeMode mode) async {
   await prefs.setString('themeMode', mode.name);
 }

 // 화면 항상 켜기 관리
 bool getKeepScreenOn() {
   return prefs.getBool('keepScreenOn') ?? false;
 }

 Future<void> saveKeepScreenOn(bool value) async {
   await prefs.setBool('keepScreenOn', value);
 }

 // 슬라이더 위치 관리
 SliderPosition getSliderPosition() {
   final raw = prefs.getString('sliderPosition') ?? 'top';
   return raw == 'bottom' ? SliderPosition.bottom : SliderPosition.top;
 }

 Future<void> saveSliderPosition(SliderPosition position) async {
   await prefs.setString('sliderPosition', position.name);
 }

 // 코인명 표시 방식 관리
 DisplayMode getDisplayMode() {
   final raw = prefs.getString('displayMode') ?? 'ticker';
   return switch (raw) {
     'korean' => DisplayMode.korean,
     'english' => DisplayMode.english,
     _ => DisplayMode.ticker,
   };
 }

 Future<void> saveDisplayMode(DisplayMode mode) async {
   await prefs.setString('displayMode', mode.name);
 }

 // 금액 표시 방식 관리
 AmountDisplayMode getAmountDisplayMode() {
   final raw = prefs.getString('amountDisplayMode') ?? 'number';
   return switch (raw) {
     'icon' => AmountDisplayMode.icon,
     _ => AmountDisplayMode.number,
   };
 }

 Future<void> saveAmountDisplayMode(AmountDisplayMode mode) async {
   await prefs.setString('amountDisplayMode', mode.name);
 }

 // 반짝임 효과 관리
 bool getBlinkEnabled() {
   return prefs.getBool('blinkEnabled') ?? true;
 }

 Future<void> saveBlinkEnabled(bool enabled) async {
   await prefs.setBool('blinkEnabled', enabled);
 }

 // 폰트 패밀리 관리
 FontFamily getFontFamily() {
   final raw = prefs.getString('fontFamily') ?? 'pretendard';
   for (final font in FontFamily.values) {
     if (font.name == raw) return font;
   }
   return FontFamily.pretendard;
 }

 Future<void> saveFontFamily(FontFamily font) async {
   await prefs.setString('fontFamily', font.name);
 }

 // 햅틱 피드백 관리 🆕
 bool getHapticEnabled() {
   return prefs.getBool('hapticEnabled') ?? true; // 기본값: 활성화
 }

 Future<void> saveHapticEnabled(bool enabled) async {
   await prefs.setBool('hapticEnabled', enabled);
 }

 // 화면 회전 잠금 관리 🆕
 bool getPortraitLocked() {
   return prefs.getBool('portraitLocked') ?? false; // 기본값: 자동 회전
 }

 Future<void> savePortraitLocked(bool locked) async {
   await prefs.setBool('portraitLocked', locked);
 }

 // 캐시 비우기
 Future<void> clearCache() async {
   final cacheKeys = [
     'coinData_cache',
     'priceHistory_cache',
     'chartData_cache',
     'marketData_cache',
     'imageCache_timestamp',
   ];

   for (final key in cacheKeys) {
     await prefs.remove(key);
   }
 }

 // 모든 설정 초기화
 Future<void> resetAllSettings() async {
   final settingKeys = [
     'themeMode',
     'keepScreenOn',
     'sliderPosition',
     'displayMode',
     'amountDisplayMode',
     'blinkEnabled',
     'fontFamily',
     'hapticEnabled',        // 🆕 추가
     'portraitLocked',       // 🆕 추가
   ];

   for (final key in settingKeys) {
     await prefs.remove(key);
   }
 }
}\n\n// ====== lib/data/datasources/market_mood_local_ds.dart ======\n
// lib/data/datasources/market_mood_local_ds.dart
// 💾 Data Layer: 로컬 데이터 소스 (Hive 기반, DI 패턴)

import 'package:hive_flutter/hive_flutter.dart';
import '../../core/services/hive_service.dart';
import '../../core/utils/logger.dart';
import '../models/market_mood_dto.dart'; // 🔥 TimestampedVolume이 여기 있음

/// 💾 마켓무드 로컬 데이터 소스
/// HiveService를 통한 볼륨 데이터 저장/조회, 환율 캐싱 (DI 패턴)
class MarketMoodLocalDataSource {
  final HiveService _hiveService;
  
  static const String _exchangeRateKey = 'exchange_rate';
  static const String _appStartTimeKey = 'app_start_time';

  MarketMoodLocalDataSource(this._hiveService);

  /// Volume Box 접근
  Box<TimestampedVolume> get _volumeBox => _hiveService.marketMoodVolumeBox;
  
  /// Cache Box 접근 
  Box get _cacheBox => _hiveService.marketMoodCacheBox;

  // ═══════════════════════════════════════════════════════════
  // 📈 볼륨 데이터 관리
  // ═══════════════════════════════════════════════════════════

  /// 볼륨 데이터 추가 (30분 슬롯)
  Future<void> addVolumeData(TimestampedVolume volume) async {
    try {
      // 30분 단위로 정규화된 키 생성
      final slotKey = _getSlotKey(volume.timestamp);
      
      await _volumeBox.put(slotKey, volume);
      log.d('📈 볼륨 데이터 저장: $slotKey -> ${volume.volumeUsd.toStringAsFixed(0)}B');
    } catch (e, st) {
      log.e('📈 볼륨 데이터 저장 실패', e, st);
      rethrow;
    }
  }

  /// N분 전 볼륨 데이터 조회
  Future<TimestampedVolume?> getVolumeNMinutesAgo(int minutes) async {
    try {
      final targetTime = DateTime.now().subtract(Duration(minutes: minutes));
      final slotKey = _getSlotKey(targetTime);
      
      final volume = _volumeBox.get(slotKey);
      if (volume != null) {
        log.d('📈 $minutes분 전 볼륨 조회 성공: ${volume.volumeUsd.toStringAsFixed(0)}B');
      } else {
        log.d('📈 $minutes분 전 볼륨 데이터 없음');
      }
      
      return volume;
    } catch (e, st) {
      log.e('📈 $minutes분 전 볼륨 조회 실패', e, st);
      return null;
    }
  }

  /// 특정 기간의 평균 볼륨 계산
  Future<double?> getAverageVolume(int days) async {
    try {
      final now = DateTime.now();
      final cutoffTime = now.subtract(Duration(days: days));
      
      final volumes = _volumeBox.values
          .where((volume) => volume.timestamp.isAfter(cutoffTime))
          .map((volume) => volume.volumeUsd)
          .toList();
      
      if (volumes.isEmpty) {
        log.d('📊 $days일 평균 볼륨: 데이터 없음');
        return null;
      }
      
      final average = volumes.reduce((a, b) => a + b) / volumes.length;
      log.d('📊 $days일 평균 볼륨: ${average.toStringAsFixed(0)}B (${volumes.length}개 데이터)');
      
      return average;
    } catch (e, st) {
      log.e('📊 $days일 평균 볼륨 계산 실패', e, st);
      return null;
    }
  }

  /// 수집된 데이터 개수 확인
  Future<int> getCollectedDataCount() async {
    try {
      final count = _volumeBox.length;
      log.d('📊 총 데이터 개수: $count');
      return count;
    } catch (e, st) {
      log.e('📊 데이터 개수 조회 실패', e, st);
      return 0;
    }
  }

  /// 누락된 30분 슬롯 확인 및 보정
  Future<void> checkAndFillMissingSlots() async {
    try {
      final appStartTime = getAppStartTime();
      final now = DateTime.now();
      final totalMinutes = now.difference(appStartTime).inMinutes;
      final expectedSlots = (totalMinutes / 30).floor();
      
      log.i('🔄 슬롯 체크: 예상 $expectedSlots개, 실제 ${_volumeBox.length}개');
      
      if (_volumeBox.length < expectedSlots) {
        final missing = expectedSlots - _volumeBox.length;
        log.w('⚠️ $missing개 슬롯 누락 감지');
        // 실제 보정 로직은 필요 시 구현
      }
    } catch (e, st) {
      log.e('🔄 슬롯 체크 실패', e, st);
    }
  }

  // ═══════════════════════════════════════════════════════════
  // 💱 환율 캐싱
  // ═══════════════════════════════════════════════════════════

  /// 환율 캐시 저장
  Future<void> cacheExchangeRate(double rate) async {
    try {
      await _cacheBox.put(_exchangeRateKey, {
        'rate': rate,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      });
      log.d('💱 환율 캐시 저장: $rate KRW');
    } catch (e, st) {
      log.e('💱 환율 캐시 저장 실패', e, st);
      rethrow;
    }
  }

  /// 캐시된 환율 조회 (12시간 유효)
  Future<double?> getCachedExchangeRate() async {
    try {
      final cached = _cacheBox.get(_exchangeRateKey);
      if (cached == null) return null;
      
      final timestamp = DateTime.fromMillisecondsSinceEpoch(cached['timestamp']);
      final rate = cached['rate'] as double;
      
      // 12시간 이내인지 확인 (Provider와 동일한 캐시 정책)
      if (DateTime.now().difference(timestamp).inHours < 12) {
        log.d('💱 캐시된 환율 사용: $rate KRW');
        return rate;
      } else {
        log.d('💱 캐시된 환율 만료');
        return null;
      }
    } catch (e, st) {
      log.e('💱 캐시된 환율 조회 실패', e, st);
      return null;
    }
  }

  // ═══════════════════════════════════════════════════════════
  // 🕰️ 시간 관리
  // ═══════════════════════════════════════════════════════════

  /// 앱 시작 시간 조회
  DateTime getAppStartTime() {
    try {
      final cached = _cacheBox.get(_appStartTimeKey);
      if (cached != null) {
        return cached as DateTime;
      }
      
      // 최초 실행 시 현재 시간으로 설정
      final now = DateTime.now();
      _cacheBox.put(_appStartTimeKey, now);
      log.i('🕰️ 앱 시작 시간 설정: ${now.toIso8601String()}');
      return now;
    } catch (e, st) {
      log.e('🕰️ 앱 시작 시간 조회 실패', e, st);
      return DateTime.now(); // fallback
    }
  }

  /// 30분 슬롯 키 생성 (정규화)
  String _getSlotKey(DateTime timestamp) {
    // 30분 단위로 정규화: 예) 14:23 -> 14:00, 14:47 -> 14:30
    final normalized = DateTime(
      timestamp.year,
      timestamp.month,
      timestamp.day,
      timestamp.hour,
      (timestamp.minute ~/ 30) * 30, // 30분 단위로 내림
    );
    
    return normalized.toIso8601String();
  }

  // ═══════════════════════════════════════════════════════════
  // 🔧 유틸리티
  // ═══════════════════════════════════════════════════════════

  /// 디버깅용 정보 반환
  Map<String, Object> getDebugInfo() {
    try {
      final volumeInfo = {
        'total_count': _volumeBox.length,
        'box_open': _volumeBox.isOpen,
        'first_entry': _volumeBox.isNotEmpty 
            ? _volumeBox.values.first.timestamp.toIso8601String() 
            : 'none',
        'last_entry': _volumeBox.isNotEmpty 
            ? _volumeBox.values.last.timestamp.toIso8601String() 
            : 'none',
      };
      
      final cacheInfo = {
        'cache_keys': _cacheBox.keys.toList(),
        'app_start_time': getAppStartTime().toIso8601String(),
        'has_exchange_rate': _cacheBox.containsKey(_exchangeRateKey),
        'box_open': _cacheBox.isOpen,
      };

      return {
        'volume_storage': volumeInfo,
        'cache_storage': cacheInfo,
        'hive_service': 'injected',
        'status': 'healthy',
      };
    } catch (e) {
      return {
        'status': 'error',
        'error': e.toString(),
      };
    }
  }

  /// 상태 로깅
  void logStatus() {
    final info = getDebugInfo();
    log.i('💾 MarketMoodLocalDataSource 상태: $info');
  }

  /// 리소스 정리
  Future<void> dispose() async {
    try {
      // HiveService가 Box 관리하므로 여기서는 정리 안함
      log.i('🧹 MarketMoodLocalDataSource 정리 완료');
    } catch (e, st) {
      log.e('🧹 리소스 정리 중 오류 발생', e, st);
    }
  }

  /// 개발용: 모든 데이터 삭제
  Future<void> clearAllData() async {
    try {
      await _volumeBox.clear();
      await _cacheBox.clear();
      log.w('🗑️ 모든 로컬 데이터 삭제 완료');
    } catch (e, st) {
      log.e('🗑️ 데이터 삭제 실패', e, st);
      rethrow;
    }
  }

  /// 개발용: 최근 N개 데이터만 유지
  Future<void> trimOldData({int keepCount = 100}) async {
    try {
      if (_volumeBox.length <= keepCount) return;

      final allEntries = _volumeBox.values.toList()
        ..sort((a, b) => b.timestamp.compareTo(a.timestamp)); // 최신순

      final toKeep = allEntries.take(keepCount).toList();
      
      await _volumeBox.clear();
      for (final volume in toKeep) {
        await addVolumeData(volume);
      }
      
      log.i('🧹 오래된 데이터 정리: ${allEntries.length} -> $keepCount개');
    } catch (e, st) {
      log.e('🧹 데이터 정리 실패', e, st);
      rethrow;
    }
  }
}\n\n// ====== lib/data/datasources/analysis_isolate_manager.dart ======\n
\n\n// ====== lib/data/repositories/signal_repository_impl.dart ======\n
import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import '../../core/config/app_config.dart';
import '../../core/utils/logger.dart';
import '../../domain/entities/signal.dart';
import '../../domain/entities/trade.dart';
import '../../domain/repositories/signal_repository.dart';
import '../datasources/trade_remote_ds.dart';
import '../processors/trade_aggregator.dart';
import '../../core/utils/pattern_detector.dart';
import '../../core/utils/pattern_config.dart';
import '../../core/utils/market_data_context.dart';

/// 🚀 SignalRepositoryImpl V4.0 - 완전히 개선된 구조
/// 
/// 주요 개선사항:
/// - PatternDetector 의존성 주입 방식으로 변경
/// - MarketDataContext로 파라미터 지옥 해결
/// - 책임 분리 및 코드 단순화
/// - 테스트 가능한 구조
/// - 메모리 효율성 개선
class SignalRepositoryImpl implements SignalRepository {
  final TradeRemoteDataSource _remote;
  final TradeAggregator _aggregator;
  final PatternDetector _patternDetector;
  final PatternConfig _patternConfig;

  // 📊 마켓별 데이터 컨텍스트 관리
  final Map<String, MarketDataContext> _marketContexts = {};

  // 🎯 신호 관리 시스템
  final Map<PatternType, List<Signal>> _signalLists = {};
  final Map<PatternType, bool> _patternEnabled = {};
  final Set<String> _seenIds = {};

  // 🎯 패턴별 스트림 컨트롤러
  final Map<PatternType, StreamController<List<Signal>>> _patternControllers = {};
  final StreamController<List<Signal>> _allSignalsController = 
      StreamController<List<Signal>>.broadcast();

  // 🔥 스트림 관리
  Stream<Trade>? _signalStream;
  StreamSubscription<Trade>? _signalSubscription;

  // 🚀 배치 처리 및 정리 타이머
  Timer? _batchUpdateTimer;
  Timer? _cleanupTimer;

  // 📊 성능 모니터링
  final Map<PatternType, int> _signalCounts = {};
  final Map<PatternType, DateTime?> _lastSignalTimes = {};
  int _totalProcessedTrades = 0;
  DateTime? _lastProcessingTime;

  // ==========================================================================
  // 초기화
  // ==========================================================================

  SignalRepositoryImpl(
    this._remote, {
    PatternDetector? patternDetector,
    PatternConfig? patternConfig,
  }) : _aggregator = TradeAggregator(),
       _patternDetector = patternDetector ?? PatternDetector(),
       _patternConfig = patternConfig ?? PatternConfig() {
    _initializePatterns();
    _startCleanupTimer();
    log.i('🚀 SignalRepository V4.0 초기화 완료 - 개선된 구조');
  }

  void _initializePatterns() {
    for (final pattern in PatternType.values) {
      _signalLists[pattern] = [];
      _patternEnabled[pattern] = true;
      _signalCounts[pattern] = 0;
      _patternControllers[pattern] = StreamController<List<Signal>>.broadcast();
    }

    if (kDebugMode) {
      log.i('🎯 패턴 초기화 완료: ${PatternType.values.length}개 패턴');
    }
  }

  /// 🧹 메모리 정리 타이머 시작
  void _startCleanupTimer() {
    _cleanupTimer = Timer.periodic(const Duration(minutes: 5), (_) {
      _cleanupMarketContexts();
      _cleanupSeenIds();
    });
  }

  /// 🧹 마켓 컨텍스트 정리 (온라인 지표 포함)
  void _cleanupMarketContexts() {
    final now = DateTime.now();
    int removedMarkets = 0;

    _marketContexts.removeWhere((market, context) {
      // 🆕 온라인 지표 포함 데이터 품질 검사
      final quality = context.getDataQuality(onlineMetrics: _patternDetector.metrics);
      final isHealthy = quality['overall'] != 'POOR';
      
      // 최근 활동 확인
      final hasRecentActivity = context.shortestPriceWindow.timestamps.isNotEmpty &&
          now.difference(context.shortestPriceWindow.timestamps.last).inMinutes < 30;
      
      if (!isHealthy || !hasRecentActivity) {
        // 🆕 온라인 지표도 함께 정리
        context.cleanup(force: true, onlineMetrics: _patternDetector.metrics);
        removedMarkets++;
        return true;
      }
      
      return false;
    });

    if (kDebugMode && removedMarkets > 0) {
      log.d('🧹 마켓 컨텍스트 정리: $removedMarkets개 비활성 시장 제거 (온라인 지표 포함)');
    }
  }

  /// 🧹 중복 감지 ID 정리
  void _cleanupSeenIds() {
    if (_seenIds.length > AppConfig.signalCacheSize) {
      final excess = _seenIds.length - AppConfig.signalCacheSize;
      final toRemove = _seenIds.take(excess).toList();
      _seenIds.removeAll(toRemove);
    }
  }

  // ==========================================================================
  // 🔥 핵심: 브로드캐스트 스트림 초기화
  // ==========================================================================

  void _initializeSignalStream(List<String> markets) {
    if (_signalStream != null) return;

    log.i('SignalRepositoryImpl V4.0: 신호 스트림 초기화 - ${markets.length}개 시장');

    _signalStream = _remote.watch(markets).asBroadcastStream();

    _signalSubscription = _signalStream!.listen(
      _processRawTradeForSignal,
      onError: (error, stackTrace) {
        log.e('Signal stream error: $error', stackTrace);
      },
      onDone: () {
        log.i('Signal stream done');
      },
    );
  }

  // ==========================================================================
  // 📊 마켓 데이터 컨텍스트 관리
  // ==========================================================================

  /// 마켓 데이터 컨텍스트 생성 또는 조회
  MarketDataContext _getOrCreateMarketContext(String market) {
    return _marketContexts.putIfAbsent(
      market,
      () => MarketDataContext.empty(market),
    );
  }

  /// 모든 타임프레임 윈도우 업데이트 (온라인 지표 연동)
  void _updateMarketContext(Trade trade, DateTime timestamp) {
    final context = _getOrCreateMarketContext(trade.market);
    
    // 거래 간격 계산
    final interval = context.intervalWindow != null && 
                    context.intervalWindow!.timestamps.isNotEmpty
        ? timestamp.difference(context.intervalWindow!.timestamps.last).inSeconds.toDouble()
        : 10.0;
    
    // 매수 비율 (간단한 추정)
    final buyRatio = trade.isBuy ? 1.0 : 0.0;
    
    // 🔥 온라인 지표와 함께 모든 윈도우 업데이트
    context.updateWithOnlineMetrics(
      price: trade.price,
      volume: trade.total,
      timestamp: timestamp,
      buyRatio: buyRatio,
      interval: max(interval, 1.0),
      onlineMetrics: _patternDetector.metrics, // 온라인 지표 연동
    );
  }

  // ==========================================================================
  // 📥 원시 거래 데이터 처리
  // ==========================================================================

  void _processRawTradeForSignal(Trade trade) {
    try {
      final key = '${trade.market}/${trade.sequentialId}';

      if (!_seenIds.add(key)) return;

      _aggregator.processTrade(
        {
          'market': trade.market,
          'price': trade.price,
          'volume': trade.volume,
          'timestamp': trade.timestampMs,
          'isBuy': trade.isBuy,
          'sequential_id': trade.sequentialId,
        },
        onTradeProcessed: _handleAggregatedTrade,
      );
    } catch (e, stackTrace) {
      log.w('_processRawTradeForSignal error: $e', stackTrace);
    }
  }

  void _handleAggregatedTrade(Map<String, dynamic> aggregatedTrade) {
    try {
      final trade = Trade(
        market: aggregatedTrade['market'] as String,
        price: aggregatedTrade['price'] as double,
        volume: aggregatedTrade['volume'] as double,
        side: (aggregatedTrade['isBuy'] as bool) ? 'BID' : 'ASK',
        changePrice: 0.0,
        changeState: 'EVEN',
        timestampMs: aggregatedTrade['timestamp'] as int,
        sequentialId: aggregatedTrade['sequential_id'] as String? ?? '',
      );

      final now = DateTime.fromMillisecondsSinceEpoch(trade.timestampMs);
      _updateMarketContext(trade, now);
      _analyzePatterns(trade, now);
    } catch (e, stackTrace) {
      log.w('_handleAggregatedTrade error: $e', stackTrace);
    }
  }

  // ==========================================================================
  // 🎯 패턴 분석 (단순화된 로직)
  // ==========================================================================

  /// 🎯 메인 패턴 분석 로직
  void _analyzePatterns(Trade trade, DateTime now) {
    try {
      final context = _getOrCreateMarketContext(trade.market);
      final detectedSignals = <Signal>[];

      // 🔥 각 패턴에 대해 감지 수행
      for (final pattern in PatternType.values) {
        if (!(_patternEnabled[pattern] ?? false)) continue;

        try {
          // 🚀 개선된 패턴 감지 (단일 메서드, 명확한 파라미터)
          final signal = _patternDetector.detectPattern(
            patternType: pattern,
            trade: trade,
            timestamp: now,
            context: context,
          );

          if (signal != null) {
            detectedSignals.add(signal);
            _signalCounts[pattern] = (_signalCounts[pattern] ?? 0) + 1;
            _lastSignalTimes[pattern] = now;
          }
        } catch (e, stackTrace) {
          log.w('Pattern analysis error: ${pattern.name} - $e', stackTrace);
        }
      }

      // 신호 추가
      for (final signal in detectedSignals) {
        _addSignal(signal.patternType, signal);
      }

      if (detectedSignals.isNotEmpty) {
        _scheduleBatchUpdate();
      }

      _totalProcessedTrades++;
      _lastProcessingTime = now;
    } catch (e, stackTrace) {
      log.e('_analyzePatterns error: $e', stackTrace);
    }
  }

  // ==========================================================================
  // 🚀 시그널 추가 및 관리
  // ==========================================================================

  void _addSignal(PatternType pattern, Signal signal) {
    final signalList = _signalLists[pattern];
    if (signalList == null) return;

    // 중복 신호 체크 (5분 이내)
    final cutoff = signal.detectedAt.subtract(const Duration(minutes: 5));
    final isDuplicate = signalList.any((existingSignal) =>
        existingSignal.market == signal.market &&
        existingSignal.detectedAt.isAfter(cutoff));

    if (isDuplicate) return;

    signalList.insert(0, signal);

    // 최대 신호 개수 제한
    if (signalList.length > AppConfig.maxSignalsPerPattern) {
      signalList.removeLast();
    }

    if (kDebugMode) {
      final confidence = signal.patternDetails['finalConfidence'] ?? 
                       signal.patternDetails['confidence'] ?? 0.0;
      log.i('🚨 V4.0 신호 감지: ${signal.patternType.displayName} - ${signal.market} '
          '(${signal.changePercent.toStringAsFixed(2)}%, 신뢰도: ${(confidence * 100).toStringAsFixed(1)}%)');
    }
  }

  /// 🚀 배치 업데이트 스케줄링
  void _scheduleBatchUpdate() {
    if (_batchUpdateTimer?.isActive != true) {
      _batchUpdateTimer = Timer(AppConfig.signalBatchInterval, _updateSignalStreams);
    }
  }

  /// 📊 모든 시그널 스트림 배치 업데이트
  void _updateSignalStreams() {
    try {
      for (final entry in _signalLists.entries) {
        final pattern = entry.key;
        final signals = List<Signal>.from(entry.value);

        final controller = _patternControllers[pattern];
        if (controller != null && !controller.isClosed) {
          controller.add(signals);
        }
      }

      final allSignals = _signalLists.values.expand((list) => list).toList();
      allSignals.sort((a, b) => b.detectedAt.compareTo(a.detectedAt));
      final recentSignals = allSignals.take(50).toList();

      if (!_allSignalsController.isClosed) {
        _allSignalsController.add(recentSignals);
      }

      if (kDebugMode && allSignals.isNotEmpty) {
        log.d('🚀 V4.0 신호 스트림 업데이트: ${allSignals.length}개 총 신호');
      }
    } catch (e, stackTrace) {
      log.w('_updateSignalStreams error: $e', stackTrace);
    }
  }

  // ==========================================================================
  // SignalRepository 인터페이스 구현
  // ==========================================================================

  @override
  Stream<List<Signal>> watchSignalsByPattern(
    PatternType patternType,
    List<String> markets,
  ) {
    _initializeSignalStream(markets);
    return _patternControllers[patternType]?.stream ?? const Stream.empty();
  }

  @override
  Stream<List<Signal>> watchAllSignals(List<String> markets) {
    _initializeSignalStream(markets);
    return _allSignalsController.stream;
  }

  @override
  void updatePatternThreshold(PatternType patternType, double threshold) {
    // 설정 업데이트 로직 (구체적인 키에 따라 다를 수 있음)
    try {
      _patternConfig.updatePatternConfig(patternType, 'priceChangePercent', threshold);
      log.i('V4.0: 패턴 임계값 업데이트 - ${patternType.name}: $threshold');
    } catch (e) {
      log.w('패턴 임계값 업데이트 실패: $e');
    }
  }

  @override
  double getPatternThreshold(PatternType patternType) {
    return _patternConfig.getConfigValue(patternType, 'priceChangePercent');
  }

  @override
  void setPatternEnabled(PatternType patternType, bool enabled) {
    _patternEnabled[patternType] = enabled;
    log.i('패턴 ${patternType.name} ${enabled ? '활성화' : '비활성화'}');
  }

  @override
  bool isPatternEnabled(PatternType patternType) {
    return _patternEnabled[patternType] ?? false;
  }

  @override
  void clearSignals(PatternType? patternType) {
    if (patternType != null) {
      _signalLists[patternType]?.clear();
      _patternControllers[patternType]?.add([]);
      _signalCounts[patternType] = 0;
    } else {
      for (final pattern in PatternType.values) {
        _signalLists[pattern]?.clear();
        _patternControllers[pattern]?.add([]);
        _signalCounts[pattern] = 0;
      }
      _patternDetector.clearAllCooldowns();
    }
    _scheduleBatchUpdate();
  }

  // ==========================================================================
  // 🆕 V4.0 확장 기능들
  // ==========================================================================

  /// 패턴 설정 업데이트
  @override
  void updatePatternConfig(PatternType pattern, String key, double value) {
    _patternConfig.updatePatternConfig(pattern, key, value);
  }

  /// 패턴별 통계 정보
  @override
  Future<Map<String, dynamic>> getPatternStats(PatternType type) async {
    final signals = _signalLists[type] ?? [];
    final lastSignal = _lastSignalTimes[type];

    return {
      'patternType': type.name,
      'totalSignals': _signalCounts[type] ?? 0,
      'recentSignals': signals.length,
      'lastSignalTime': lastSignal?.toIso8601String(),
      'isEnabled': _patternEnabled[type] ?? false,
      'cooldownStatus': _patternDetector.getCooldownStatus(),
      'config': _patternConfig.getPatternConfig(type),
    };
  }

  /// 시스템 헬스 체크 (온라인 지표 포함)
  @override
  Future<Map<String, dynamic>> getSystemHealth() async {
    final now = DateTime.now();
    final uptime = _lastProcessingTime != null
        ? now.difference(_lastProcessingTime!).inMinutes
        : 0;

    final patternStats = <String, dynamic>{};
    for (final pattern in PatternType.values) {
      patternStats[pattern.name] = await getPatternStats(pattern);
    }

    // 🆕 온라인 지표 포함 마켓 컨텍스트 상태
    final marketStats = <String, dynamic>{};
    for (final entry in _marketContexts.entries) {
      final quality = entry.value.getDataQuality(onlineMetrics: _patternDetector.metrics);
      marketStats[entry.key] = {
        'quality': quality['overall'],
        'score': quality['overallScore'],
        'timeframes': entry.value.availableTimeframes.length,
        'onlineMetrics': quality['onlineMetrics'], // 온라인 지표 상태 포함
      };
    }

    // 🆕 전체 온라인 지표 시스템 건강성
    final onlineMetricsHealth = _patternDetector.metrics.getSystemHealth();

    return {
      'version': '4.1-Online',
      'status': 'healthy',
      'uptime': uptime,
      'totalProcessedTrades': _totalProcessedTrades,
      'lastProcessingTime': _lastProcessingTime?.toIso8601String(),
      'activePatterns': _patternEnabled.values.where((enabled) => enabled).length,
      'trackedMarkets': _marketContexts.length,
      'patternStats': patternStats,
      'marketStats': marketStats,
      'onlineMetricsSystem': onlineMetricsHealth, // 온라인 지표 시스템 전체 상태
      'improvements': [
        'Online RSI/MACD Integration',
        'Stream Gap Auto-Recovery', 
        'O(1) Indicator Calculation',
        'Real Divergence Detection',
        'Dependency Injection Architecture',
        'Fixed Parameter Hell',
        'Enhanced Memory Management',
        'Testable Structure',
      ],
    };
  }

  /// 마켓별 데이터 품질 조회 (온라인 지표 포함)
  @override
  Map<String, dynamic> getMarketDataQuality() {
    final qualityReport = <String, dynamic>{};

    for (final entry in _marketContexts.entries) {
      // 🆕 온라인 지표 포함 품질 검사
      qualityReport[entry.key] = entry.value.getDataQuality(
        onlineMetrics: _patternDetector.metrics
      );
    }

    // 🆕 온라인 지표 건강성 요약
    final onlineHealth = _patternDetector.metrics.getSystemHealth();

    return {
      'totalMarkets': _marketContexts.length,
      'markets': qualityReport,
      'healthyMarkets': qualityReport.values
          .where((q) => q['overall'] == 'EXCELLENT' || q['overall'] == 'GOOD')
          .length,
      'onlineMetricsSummary': {
        'totalMarkets': onlineHealth['totalMarkets'],
        'healthyMarkets': onlineHealth['healthyMarkets'],
        'staleMarkets': onlineHealth['staleMarkets'],
      },
    };
  }

  /// 패턴 설정 프리셋 적용
  @override
  void applyPatternPreset(String presetName) {
    switch (presetName.toLowerCase()) {
      case 'conservative':
        _patternConfig.applyConservativePreset();
        break;
      case 'aggressive':
        _patternConfig.applyAggressivePreset();
        break;
      case 'balanced':
        _patternConfig.applyBalancedPreset();
        break;
      default:
        throw ArgumentError('Unknown preset: $presetName');
    }

    log.i('패턴 프리셋 적용: $presetName');
  }

  /// 설정 내보내기/가져오기
  @override
  Map<String, dynamic> exportConfiguration() {
    return {
      'version': '4.0',
      'timestamp': DateTime.now().toIso8601String(),
      'patternConfig': _patternConfig.exportConfig(),
      'patternEnabled': _patternEnabled.map((k, v) => MapEntry(k.name, v)),
      'systemSettings': {
        'maxSignalsPerPattern': AppConfig.maxSignalsPerPattern,
        'signalCacheSize': AppConfig.signalCacheSize,
        'batchInterval': AppConfig.signalBatchInterval.inMilliseconds,
      },
    };
  }

  @override
  void importConfiguration(Map<String, dynamic> config) {
    try {
      // 패턴 설정 가져오기
      if (config['patternConfig'] != null) {
        _patternConfig.importConfig(config['patternConfig']);
      }

      // 패턴 활성화 상태 가져오기
      if (config['patternEnabled'] != null) {
        final enabledMap = config['patternEnabled'] as Map<String, dynamic>;
        for (final pattern in PatternType.values) {
          if (enabledMap.containsKey(pattern.name)) {
            _patternEnabled[pattern] = enabledMap[pattern.name] as bool;
          }
        }
      }

      log.i('설정 가져오기 완료');
    } catch (e, stackTrace) {
      log.e('설정 가져오기 실패: $e', stackTrace);
      rethrow;
    }
  }

  /// 성능 메트릭스 스트림 (온라인 지표 포함)
  @override
  Stream<Map<String, dynamic>> watchPerformanceMetrics() {
    return Stream.periodic(const Duration(seconds: 10), (_) {
      final onlineMetricsHealth = _patternDetector.metrics.getSystemHealth();
      
      return {
        'timestamp': DateTime.now().toIso8601String(),
        'version': '4.1-Online',
        'totalProcessedTrades': _totalProcessedTrades,
        'signalCounts': Map.from(_signalCounts),
        'activeMarkets': _marketContexts.length,
        'cooldownStatus': _patternDetector.getCooldownStatus(),
        'memoryUsage': {
          'totalSignals': _signalLists.values.fold(0, (sum, list) => sum + list.length),
          'seenIdsCount': _seenIds.length,
          'marketContexts': _marketContexts.length,
        },
        'onlineMetrics': {
          'totalMarkets': onlineMetricsHealth['totalMarkets'],
          'healthyMarkets': onlineMetricsHealth['healthyMarkets'],
          'staleMarkets': onlineMetricsHealth['staleMarkets'],
        },
        'architecture': 'V4.1 - Online Indicators + Dependency Injection + Clean Structure',
      };
    });
  }

  // ==========================================================================
  // 리소스 정리
  // ==========================================================================

  @override
  Future<void> dispose() async {
    log.i('SignalRepositoryImpl V4.0: dispose() 시작');

    _batchUpdateTimer?.cancel();
    _cleanupTimer?.cancel();

    _aggregator.flushTrades(onTradeProcessed: (_) {});

    await _signalSubscription?.cancel();
    _signalStream = null;

    // 스트림 컨트롤러 정리
    for (final controller in _patternControllers.values) {
      await controller.close();
    }
    await _allSignalsController.close();

    // 마켓 컨텍스트 정리 (온라인 지표 포함)
    for (final context in _marketContexts.values) {
      context.cleanup(force: true, onlineMetrics: _patternDetector.metrics);
    }
    _marketContexts.clear();

    // 신호 및 캐시 정리
    _signalLists.clear();
    _signalCounts.clear();
    _lastSignalTimes.clear();
    _seenIds.clear();

    // PatternDetector 정리 (온라인 지표 포함)
    _patternDetector.dispose();

    log.i('SignalRepositoryImpl V4.1: dispose() 완료 - 온라인 지표 포함');
  }
}\n\n// ====== lib/data/repositories/settings_repository_impl.dart ======\n
import 'package:flutter/material.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/repositories/settings_repository.dart';
import '../datasources/settings_local_ds.dart';

class SettingsRepositoryImpl implements SettingsRepository {
 final SettingsLocalDataSource dataSource;

 SettingsRepositoryImpl(this.dataSource);

 @override
 Future<AppSettings> getSettings() async {
   return AppSettings(
     themeMode: dataSource.getThemeMode(),
     keepScreenOn: dataSource.getKeepScreenOn(),
     sliderPosition: dataSource.getSliderPosition(),
     displayMode: dataSource.getDisplayMode(),
     amountDisplayMode: dataSource.getAmountDisplayMode(),
     blinkEnabled: dataSource.getBlinkEnabled(),
     fontFamily: dataSource.getFontFamily(),
     isHapticEnabled: dataSource.getHapticEnabled(),        // 🆕 추가
     isPortraitLocked: dataSource.getPortraitLocked(),      // 🆕 추가
   );
 }

 @override
 Future<void> updateThemeMode(ThemeMode mode) async {
   await dataSource.saveThemeMode(mode);
 }

 @override
 Future<void> updateKeepScreenOn(bool value) async {
   await dataSource.saveKeepScreenOn(value);
 }

 @override
 Future<void> updateSliderPosition(SliderPosition position) async {
   await dataSource.saveSliderPosition(position);
 }

 @override
 Future<void> updateDisplayMode(DisplayMode mode) async {
   await dataSource.saveDisplayMode(mode);
 }

 @override
 Future<void> updateAmountDisplayMode(AmountDisplayMode mode) async {
   await dataSource.saveAmountDisplayMode(mode);
 }

 @override
 Future<void> updateBlinkEnabled(bool enabled) async {
   await dataSource.saveBlinkEnabled(enabled);
 }

 @override
 Future<void> updateFontFamily(FontFamily font) async {
   await dataSource.saveFontFamily(font);
 }

 @override
 Future<void> updateHapticEnabled(bool enabled) async {    // 🆕 추가
   await dataSource.saveHapticEnabled(enabled);
 }

 @override
 Future<void> updatePortraitLocked(bool locked) async {    // 🆕 추가
   await dataSource.savePortraitLocked(locked);
 }

 @override
 Future<void> clearCache() async {
   await dataSource.clearCache();
 }

 @override
 Future<void> resetSettings() async {
   await dataSource.resetAllSettings();
 }
}\n\n// ====== lib/data/repositories/surge_repository_impl.dart ======\n
import 'dart:async';
import 'package:flutter/foundation.dart';
import '../../../core/config/app_config.dart';
import '../../domain/entities/trade.dart';
import '../../domain/entities/surge.dart';
import '../../domain/repositories/surge_repository.dart';
import '../datasources/trade_remote_ds.dart';

/// 🚀 급등/급락 데이터 클래스
class SurgeData {
  double? basePrice;      // 시간대 시작 가격
  double currentPrice = 0; // 현재 가격 (계속 업데이트)
  double changePercent = 0; // 변동률 (계속 재계산)

  SurgeData({this.basePrice, this.currentPrice = 0, this.changePercent = 0});

  void updatePrice(double price) {
    basePrice ??= price;
    currentPrice = price;
    changePercent = basePrice != null && basePrice! > 0 
        ? ((currentPrice - basePrice!) / basePrice!) * 100 
        : 0.0;
  }

  void reset(double price) {
    basePrice = price;
    currentPrice = price;
    changePercent = 0.0;
  }
}

/// ♻️ 100ms 배치 시스템 + 정확한 리셋 타이밍을 적용한 급등/급락 Repository
class SurgeRepositoryImpl implements SurgeRepository {
  final TradeRemoteDataSource _remote;

  // 📊 급등/급락 상태 관리 (실시간 변동률)
  final Map<String, Map<String, SurgeData>> _surgeByTimeFrame = {};
  final Set<String> _seenIds = {};
  
  // 🎯 급등/급락 스트림 컨트롤러들 (시간대별)
  final Map<String, StreamController<Map<String, SurgeData>>> _surgeControllers = {};
  
  // 🕐 시간대별 리셋 시간 추적
  final Map<String, DateTime> _timeFrameStartTimes = {};
  
  // 🔥 핵심: 브로드캐스트 스트림 관리
  Stream<Trade>? _surgeStream;
  StreamSubscription<Trade>? _surgeSubscription;
  
  // 🆕 배치 처리를 위한 타이머
  Timer? _batchUpdateTimer;
  
  // 🆕 dispose 상태 관리
  bool _disposed = false;

  // 성능 최적화 상수
  static const int _maxMarketsPerTimeFrame = 200; // 🆕 메모리 제한 추가
  static const int _maxCacheSize = 1000;
  // 🆕 배치 업데이트 주기 (100ms)
  static const Duration _batchUpdateInterval = Duration(milliseconds: 100);

  SurgeRepositoryImpl(this._remote) {
    _initializeSurgeTracking();
  }

  // ═══════════════════════════════════════════════════════════════════════════════
  // SURGE 전용 메서드들
  // ═══════════════════════════════════════════════════════════════════════════════

  /// 급등/급락 추적 초기화
  void _initializeSurgeTracking() {
    for (final timeFrameMinutes in AppConfig.timeFrames) {
      final timeFrameStr = '${timeFrameMinutes}m';
      
      // 빈 급등/급락 맵 초기화
      _surgeByTimeFrame[timeFrameStr] = <String, SurgeData>{};
      
      // 스트림 컨트롤러 생성
      _surgeControllers[timeFrameStr] = StreamController<Map<String, SurgeData>>.broadcast();
      
      // 시작 시간 설정
      _timeFrameStartTimes[timeFrameStr] = DateTime.now();
      
      // 🚀 정확한 리셋 타이밍 스케줄링 (Volume과 동일)
      _scheduleNextReset(timeFrameStr, timeFrameMinutes);
    }
    
    if (kDebugMode) {
      debugPrint('🚀 Surge tracking initialized for ${AppConfig.timeFrames.length} timeframes');
    }
  }

  /// 🚀 정확한 리셋 타이밍 스케줄링 (Volume과 동일한 패턴)
  void _scheduleNextReset(String timeFrame, int minutes) {
    final now = DateTime.now();
    final startTime = _timeFrameStartTimes[timeFrame]!;
    final nextReset = startTime.add(Duration(minutes: minutes));
    final delay = nextReset.difference(now);
    
    if (delay.isNegative) {
      // 이미 지난 시간이면 즉시 리셋 후 다음 주기 예약
      _resetTimeFrame(timeFrame);
      _timeFrameStartTimes[timeFrame] = now;
      _scheduleNextReset(timeFrame, minutes);
    } else {
      Timer(delay, () {
        _resetTimeFrame(timeFrame);
        _timeFrameStartTimes[timeFrame] = DateTime.now();
        _scheduleNextReset(timeFrame, minutes); // 재귀 예약
      });
    }
  }

  /// 브로드캐스트 스트림 초기화 (TradeRepository와 독립적)
  void _initializeSurgeStream(List<String> markets) {
    if (_surgeStream != null) return;
    
    debugPrint('SurgeRepositoryImpl: initializing surge stream for ${markets.length} markets');
    
    _surgeStream = _remote.watch(markets).asBroadcastStream();
    
    _surgeSubscription = _surgeStream!.listen(
      _processRawTradeForSurge,
      onError: (error, stackTrace) {
        debugPrint('Surge stream error: $error');
        debugPrint('StackTrace: $stackTrace');
      },
      onDone: () {
        debugPrint('Surge stream done');
      },
    );
  }

  /// Map<String, SurgeData>를 Surge 리스트로 변환 (정렬 포함)
  List<Surge> _createSurgeList(Map<String, SurgeData> surgeMap, String timeFrame) {
    final now = DateTime.now();
    final startTime = _timeFrameStartTimes[timeFrame] ?? now;
    
    final surgeList = surgeMap.entries
        .where((entry) => entry.value.basePrice != null && entry.value.changePercent != 0)
        .map((entry) => Surge(
              market: entry.key,
              changePercent: entry.value.changePercent,
              basePrice: entry.value.basePrice!,
              currentPrice: entry.value.currentPrice,
              lastUpdatedMs: now.millisecondsSinceEpoch,
              timeFrame: timeFrame,
              timeFrameStartMs: startTime.millisecondsSinceEpoch,
            ))
        .toList();

    // 🚀 변동률 실제값 기준으로 정렬 (급등이 위에, 급락이 아래에)
    surgeList.sort((a, b) => b.changePercent.compareTo(a.changePercent));
    
    return surgeList;
  }

  @override
  Stream<List<Surge>> watchSurgeByTimeFrame(String timeFrame, List<String> markets) {
    debugPrint('SurgeRepositoryImpl: watchSurgeByTimeFrame() - timeFrame: $timeFrame');
    
    _initializeSurgeStream(markets);
    
    return _surgeControllers[timeFrame]?.stream
        .map((surgeMap) => _createSurgeList(surgeMap, timeFrame))
        ?? const Stream.empty();
  }

  /// 📥 원시 거래 데이터를 변동률로 계산하고 업데이트 예약
  void _processRawTradeForSurge(Trade trade) {
    try {
      final key = '${trade.market}/${trade.sequentialId}';
      if (!_seenIds.add(key)) return;

      if (_seenIds.length > _maxCacheSize) {
        final removeCount = (_seenIds.length / 4).ceil();
        final toRemove = _seenIds.take(removeCount).toList();
        _seenIds.removeAll(toRemove);
      }

      // 🚀 변동률 계산 후, 즉시 업데이트 대신 '업데이트 예약'
      _calculateSurgeAndScheduleUpdate(trade);
      
    } catch (e, stackTrace) {
      debugPrint('_processRawTradeForSurge error: $e');
      debugPrint('StackTrace: $stackTrace');
    }
  }

  /// 🚀 거래 데이터를 받아 변동률 계산 후, 배치 업데이트 예약
  void _calculateSurgeAndScheduleUpdate(Trade trade) {
    final market = trade.market;
    final currentPrice = trade.price;
    
    for (final timeFrameStr in _surgeByTimeFrame.keys) {
      final surgeMap = _surgeByTimeFrame[timeFrameStr]!;
      
      // 🆕 크기 제한 (상위 200개만 유지) - Volume과 동일한 패턴
      if (surgeMap.length > _maxMarketsPerTimeFrame) {
        final sorted = surgeMap.entries.toList()
          ..sort((a, b) => b.value.changePercent.abs().compareTo(a.value.changePercent.abs()));
        surgeMap.clear();
        surgeMap.addAll(Map.fromEntries(sorted.take(_maxMarketsPerTimeFrame)));
      }
      
      final surgeData = surgeMap[market] ??= SurgeData();
      surgeData.updatePrice(currentPrice);
    }
    
    // 🚀 즉시 UI 업데이트 대신, 배치 업데이트 예약
    _scheduleBatchUpdate();
  }

  /// 🆕 배치 업데이트 스케줄링
  void _scheduleBatchUpdate() {
    // 이미 예약된 타이머가 있으면 취소 (디바운싱)
    _batchUpdateTimer?.cancel();
    
    // 지정된 시간(100ms) 후에 업데이트 실행
    _batchUpdateTimer = Timer(_batchUpdateInterval, _performBatchUpdate);
  }

  /// 🚀 모든 시간대의 급등/급락 스트림을 '배치' 업데이트 (타이머에 의해 호출됨)
  void _performBatchUpdate() {
    // 🆕 dispose 가드 추가
    if (_disposed) return;
    
    try {
      for (final entry in _surgeByTimeFrame.entries) {
        final timeFrameStr = entry.key;
        final surgeMap = Map<String, SurgeData>.from(entry.value);
        
        final controller = _surgeControllers[timeFrameStr];
        if (controller != null && !controller.isClosed) {
          controller.add(surgeMap);
        }
      }
      
      if (kDebugMode) {
        final totalMarkets = _surgeByTimeFrame.values.isNotEmpty 
            ? _surgeByTimeFrame.values.first.length 
            : 0;
        if (totalMarkets > 0) {
          debugPrint('🚀🚀 Surge batch update: $totalMarkets markets (every 100ms)');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('_performBatchUpdate error: $e');
      debugPrint('StackTrace: $stackTrace');
    }
  }

  /// 특정 시간대 리셋
  void _resetTimeFrame(String timeFrameStr) {
    // 🚀 변동률 리셋: 현재 가격을 새로운 basePrice로 설정
    final surgeMap = _surgeByTimeFrame[timeFrameStr];
    if (surgeMap != null) {
      for (final surgeData in surgeMap.values) {
        surgeData.reset(surgeData.currentPrice);
      }
    }
    
    // 🚀 리셋 후에도 즉시 UI에 반영되도록 배치 업데이트 함수 직접 호출
    _performBatchUpdate(); 
  }

  @override
  void resetTimeFrame(String timeFrame) {
    debugPrint('🔄 Manual reset timeFrame: $timeFrame');
    _resetTimeFrame(timeFrame);
  }

  @override
  void resetAllTimeFrames() {
    debugPrint('🔄 Manual reset all timeFrames');
    for (final timeFrameStr in _surgeByTimeFrame.keys) {
      final surgeMap = _surgeByTimeFrame[timeFrameStr];
      if (surgeMap != null) {
        for (final surgeData in surgeMap.values) {
          surgeData.reset(surgeData.currentPrice);
        }
      }
    }
    // 🚀 리셋 후에도 즉시 UI에 반영되도록 배치 업데이트 함수 직접 호출
    _performBatchUpdate();
  }

  @override
  DateTime? getNextResetTime(String timeFrame) {
    final startTime = _timeFrameStartTimes[timeFrame];
    if (startTime == null) return null;
    
    final timeFrameMinutes = int.tryParse(timeFrame.replaceAll('m', ''));
    if (timeFrameMinutes == null) return null;
    
    return startTime.add(Duration(minutes: timeFrameMinutes));
  }

  @override
  List<String> getActiveTimeFrames() {
    return AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  }

  @override
  bool isTimeFrameActive(String timeFrame) {
    return getActiveTimeFrames().contains(timeFrame);
  }

  @override
  Future<void> dispose() async {
    debugPrint('SurgeRepositoryImpl: dispose() called');
    
    // 🆕 dispose 상태 먼저 설정
    _disposed = true;
    
    // 🆕 배치 타이머 정리
    _batchUpdateTimer?.cancel();
    
    await _surgeSubscription?.cancel();
    _surgeStream = null;
    
    for (final controller in _surgeControllers.values) {
      await controller.close();
    }
    
    debugPrint('SurgeRepositoryImpl: dispose completed');
  }
}\n\n// ====== lib/data/repositories/signal_repository_impl copy.dart ======\n
\n\n// ====== lib/data/repositories/market_mood_repository_impl.dart ======\n
// lib/data/repositories/market_mood_repository_impl.dart
// 🏗️ Data Layer: Repository 구현체 (Domain 인터페이스 완전 매칭)

import 'dart:async';
import 'package:rxdart/rxdart.dart';
import '../../core/utils/logger.dart';
import '../../domain/entities/market_mood.dart';
import '../../domain/repositories/market_mood_repository.dart';
import '../datasources/market_mood_local_ds.dart';
import '../datasources/market_mood_remote_ds.dart';
import '../models/market_mood_dto.dart';

/// 🏗️ 마켓무드 Repository 구현체
/// Remote + Local DataSource를 통합하여 Domain Entity로 변환하여 제공
class MarketMoodRepositoryImpl implements MarketMoodRepository {
  final MarketMoodRemoteDataSource _remoteDataSource;
  final MarketMoodLocalDataSource _localDataSource;

  // [리팩토링] 수동 스트림 관리가 필요 없으므로 변수 삭제
  // StreamController<MarketMoodData>? _marketDataController;
  // StreamSubscription? _remoteSubscription;

  MarketMoodRepositoryImpl(this._remoteDataSource, this._localDataSource);

  // ═══════════════════════════════════════════════════════════
  // 🌐 원격 데이터 (CoinGecko API)
  // ═══════════════════════════════════════════════════════════

  @override
  Stream<MarketMoodData> getMarketDataStream() {
    // [리팩토링] listen-add 대신, stream 연산자를 사용한 선언적 방식으로 변경
    return _remoteDataSource
        .getGlobalMarketDataStream()
        .doOnData((globalDataDto) async {
          try {
            final volumeDto = TimestampedVolume(
              timestamp: DateTime.fromMillisecondsSinceEpoch(globalDataDto.updatedAt * 1000),
              volumeUsd: globalDataDto.totalVolumeUsd,
            );
            await _localDataSource.addVolumeData(volumeDto);
            log.d('📊 스트림 데이터 로컬 저장 완료');
          } catch (e, st) {
            log.e('📊 스트림 데이터 로컬 저장 실패', e, st);
          }
        })
        .map((globalDataDto) {
          log.d('📊 DTO -> Entity 변환 완료');
          return MarketMoodData(
            totalMarketCapUsd: globalDataDto.totalMarketCapUsd,
            totalVolumeUsd: globalDataDto.totalVolumeUsd,
            btcDominance: globalDataDto.btcDominance,
            marketCapChange24h: globalDataDto.marketCapChangePercentage24hUsd,
            updatedAt: DateTime.fromMillisecondsSinceEpoch(globalDataDto.updatedAt * 1000),
          );
        });
  }

  @override
  Future<MarketMoodData?> getCurrentMarketData() async {
    try {
      // [수정] remoteDataSource는 이제 DTO를 반환
      final dataDto = await _remoteDataSource.getGlobalMarketData();
      
      final marketData = MarketMoodData(
        totalMarketCapUsd: dataDto.totalMarketCapUsd,
        totalVolumeUsd: dataDto.totalVolumeUsd,
        btcDominance: dataDto.btcDominance,
        marketCapChange24h: dataDto.marketCapChangePercentage24hUsd,
        updatedAt: DateTime.fromMillisecondsSinceEpoch(dataDto.updatedAt * 1000),
      );
      
      log.d('📊 현재 마켓 데이터 조회 성공');
      return marketData;
    } catch (e, st) {
      log.e('📊 현재 마켓 데이터 조회 실패', e, st);
      return null;
    }
  }

  @override
  Future<double> getExchangeRate() async {
    try {
      final cachedRate = await _localDataSource.getCachedExchangeRate();
      if (cachedRate != null) {
        return cachedRate;
      }
      final rate = await _remoteDataSource.getUsdToKrwRate();
      await _localDataSource.cacheExchangeRate(rate);
      return rate;
    } catch (e, st) {
      log.e('💱 환율 조회 실패, 기본값 사용', e, st);
      return 1400.0;
    }
  }

  @override
  Future<void> refreshExchangeRate() async {
    try {
      log.i('💱 환율 수동 새로고침 시작');
      final rate = await _remoteDataSource.getUsdToKrwRate();
      await _localDataSource.cacheExchangeRate(rate);
      log.i('💱 환율 새로고침 완료: $rate KRW');
    } catch (e, st) {
      log.e('💱 환율 새로고침 실패', e, st);
      rethrow;
    }
  }

  // ═══════════════════════════════════════════════════════════
  // 💾 로컬 데이터 (볼륨 버퍼) - Domain Entity 사용
  // ═══════════════════════════════════════════════════════════

  @override
  Future<void> addVolumeData(VolumeData volume) async {
    try {
      final volumeDto = TimestampedVolume.fromEntity(volume);
      await _localDataSource.addVolumeData(volumeDto);
    } catch (e, st) {
      log.e('📈 볼륨 데이터 추가 실패', e, st);
      rethrow;
    }
  }

  @override
  Future<VolumeData?> getVolumeNMinutesAgo(int minutes) async {
    try {
      final volumeDto = await _localDataSource.getVolumeNMinutesAgo(minutes);
      return volumeDto?.toEntity();
    } catch (e, st) {
      log.e('📈 $minutes분 전 볼륨 조회 실패', e, st);
      return null;
    }
  }

  @override
  Future<double?> getAverageVolume(int days) async {
    return _localDataSource.getAverageVolume(days);
  }

  @override
  Future<int> getCollectedDataCount() async {
    return _localDataSource.getCollectedDataCount();
  }

  @override
  DateTime getAppStartTime() {
    return _localDataSource.getAppStartTime();
  }

  // ═══════════════════════════════════════════════════════════
  // 🧹 관리 기능
  // ═══════════════════════════════════════════════════════════

  @override
  Future<void> syncMissingData() async {
    await _localDataSource.checkAndFillMissingSlots();
  }

  @override
  Future<void> clearOldData() async {
    await _localDataSource.trimOldData(keepCount: 336); // 7일 * 48슬롯/일
  }

  @override
  Future<Map<String, dynamic>> getSystemHealth() async {
    final localInfo = _localDataSource.getDebugInfo();
    final remoteHealth = await _remoteDataSource.checkApiHealth();
    final dataCount = await getCollectedDataCount();
    final appStartTime = getAppStartTime();
    final elapsedMinutes = DateTime.now().difference(appStartTime).inMinutes;

    return {
      'status': 'healthy',
      'local_storage': localInfo,
      'remote_api': {'healthy': remoteHealth, 'status': remoteHealth ? 'ok' : 'error'},
      'data_count': dataCount,
      'app_start_time': appStartTime.toIso8601String(),
      'elapsed_minutes': elapsedMinutes,
      'last_check': DateTime.now().toIso8601String(),
    };
  }

  @override
  Future<void> logCurrentStatus() async {
    final health = await getSystemHealth();
    _localDataSource.logStatus();
    log.i('📊 마켓무드 시스템 상태: $health');
  }

  // ═══════════════════════════════════════════════════════════
  // 🛠️ 개발/테스트용 기능
  // ═══════════════════════════════════════════════════════════

  @override
  Future<void> injectTestVolumeData(List<VolumeData> testData) async {
    if (testData.isEmpty) return;
    for (final volume in testData) {
      await addVolumeData(volume);
    }
  }

  // ═══════════════════════════════════════════════════════════
  // 🧹 리소스 정리
  // ═══════════════════════════════════════════════════════════

  @override
  Future<void> dispose() async {
    log.i('🧹 MarketMoodRepository 리소스 정리 시작');
    _remoteDataSource.dispose();
    await _localDataSource.dispose();
    log.i('🧹 MarketMoodRepository 리소스 정리 완료');
  }
}\n\n// ====== lib/data/repositories/volume_repository_impl.dart ======\n
// lib/data/repositories/volume_repository_impl.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import '../../../core/config/app_config.dart';
import '../../domain/entities/trade.dart';
import '../../domain/entities/volume.dart'; // 🆕 Volume 엔티티 import
import '../../domain/repositories/volume_repository.dart';
import '../datasources/trade_remote_ds.dart';

/// 볼륨 전용 Repository - 브로드캐스트 스트림으로 TradeRemoteDataSource 공유
class VolumeRepositoryImpl implements VolumeRepository {
 final TradeRemoteDataSource _remote;

 // 📊 볼륨 상태 관리 (실시간 누적)
 final Map<String, Map<String, double>> _volumeByTimeFrame = {};
 final Set<String> _seenIds = {};
 
 // 🎯 볼륨 스트림 컨트롤러들 (시간대별)
 final Map<String, StreamController<Map<String, double>>> _volumeControllers = {};
 
 // 🕐 시간대별 리셋 시간 추적
 final Map<String, DateTime> _timeFrameStartTimes = {};
 
 // 🔥 핵심: 브로드캐스트 스트림 관리
 Stream<Trade>? _volumeStream;
 StreamSubscription<Trade>? _volumeSubscription;
 
 // 🚀 배치 처리를 위한 타이머
 Timer? _batchUpdateTimer;
 
 // 성능 최적화 상수
 static const int _maxMarketsPerTimeFrame = 200; // 🔧 메모리 제한 추가
 static const int _maxCacheSize = 1000;
 static const Duration _batchUpdateInterval = Duration(milliseconds: 100); // 🚀 배치 처리 추가

 VolumeRepositoryImpl(this._remote) {
   // 🆕 볼륨 관련 초기화
   _initializeVolumeTracking();
 }

 // ═══════════════════════════════════════════════════════════════════════════════
 // 🆕 VOLUME 전용 메서드들
 // ═══════════════════════════════════════════════════════════════════════════════

 /// 볼륨 추적 초기화
 void _initializeVolumeTracking() {
   for (final timeFrameMinutes in AppConfig.timeFrames) {
     final timeFrameStr = '${timeFrameMinutes}m';
     
     // 빈 볼륨 맵 초기화
     _volumeByTimeFrame[timeFrameStr] = <String, double>{};
     
     // 스트림 컨트롤러 생성
     _volumeControllers[timeFrameStr] = StreamController<Map<String, double>>.broadcast();
     
     // 시작 시간 설정
     _timeFrameStartTimes[timeFrameStr] = DateTime.now();
     
     // 🚀 정확한 리셋 타이밍 스케줄링
     _scheduleNextReset(timeFrameStr, timeFrameMinutes);
   }
   
   if (kDebugMode) {
     debugPrint('🎯 Volume tracking initialized for ${AppConfig.timeFrames.length} timeframes');
   }
 }

 /// 🚀 정확한 리셋 타이밍 스케줄링
 void _scheduleNextReset(String timeFrame, int minutes) {
   final now = DateTime.now();
   final startTime = _timeFrameStartTimes[timeFrame]!;
   final nextReset = startTime.add(Duration(minutes: minutes));
   final delay = nextReset.difference(now);
   
   if (delay.isNegative) {
     // 이미 지난 시간이면 즉시 리셋 후 다음 주기 예약
     _resetTimeFrame(timeFrame);
     _timeFrameStartTimes[timeFrame] = now;
     _scheduleNextReset(timeFrame, minutes);
   } else {
     Timer(delay, () {
       _resetTimeFrame(timeFrame);
       _timeFrameStartTimes[timeFrame] = DateTime.now();
       _scheduleNextReset(timeFrame, minutes); // 재귀 예약
     });
   }
 }

 /// 🔥 핵심: 브로드캐스트 스트림 초기화 (TradeRepository와 독립적)
 void _initializeVolumeStream(List<String> markets) {
   if (_volumeStream != null) return; // 이미 초기화됨
   
   debugPrint('VolumeRepositoryImpl: initializing volume stream for ${markets.length} markets');
   
   // 🎯 TradeRemoteDataSource 브로드캐스트 스트림 구독
   _volumeStream = _remote.watch(markets).asBroadcastStream();
   
   // 🎯 볼륨 전용 구독 (원시 데이터 바로 처리)
   _volumeSubscription = _volumeStream!.listen(
     _processRawTradeForVolume,
     onError: (error, stackTrace) {
       debugPrint('Volume stream error: $error');
       debugPrint('StackTrace: $stackTrace');
     },
     onDone: () {
       debugPrint('Volume stream done');
     },
   );
 }

 /// Map<String, double>을 Volume 리스트로 변환 (정렬 포함)
 List<Volume> _createVolumeList(Map<String, double> volumeMap, String timeFrame) {
   final now = DateTime.now();
   final startTime = _timeFrameStartTimes[timeFrame] ?? now;
   
   final volumeList = volumeMap.entries
       .where((entry) => entry.value > 0) // 볼륨이 0보다 큰 것만
       .map((entry) => Volume(
             market: entry.key,
             totalVolume: entry.value,
             lastUpdatedMs: now.millisecondsSinceEpoch,
             timeFrame: timeFrame,
             timeFrameStartMs: startTime.millisecondsSinceEpoch,
           ))
       .toList();

   // 볼륨 순으로 정렬 (높은 순)
   volumeList.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
   
   return volumeList;
 }

 @override
 Stream<List<Volume>> watchVolumeByTimeFrame(String timeFrame, List<String> markets) {
   debugPrint('VolumeRepositoryImpl: watchVolumeByTimeFrame() - timeFrame: $timeFrame');
   
   // 볼륨 스트림 초기화
   _initializeVolumeStream(markets);
   
   // 해당 시간대의 볼륨 스트림 반환 (Volume 리스트로)
   return _volumeControllers[timeFrame]?.stream
       .map((volumeMap) => _createVolumeList(volumeMap, timeFrame))
       ?? const Stream.empty();
 }

 /// 📥 원시 거래 데이터를 볼륨으로 누적 (배치 처리)
 void _processRawTradeForVolume(Trade trade) {
   try {
     final key = '${trade.market}/${trade.sequentialId}';

     // 중복 처리 방지
     if (!_seenIds.add(key)) return;

     // 메모리 관리
     if (_seenIds.length > _maxCacheSize) {
       final removeCount = (_seenIds.length / 4).ceil();
       final toRemove = _seenIds.take(removeCount).toList();
       _seenIds.removeAll(toRemove);
     }

     // 🚀 볼륨 배치 누적
     _accumulateVolume(trade);
     
   } catch (e, stackTrace) {
     debugPrint('_processRawTradeForVolume error: $e');
     debugPrint('StackTrace: $stackTrace');
   }
 }

 /// 🔧 거래 데이터를 받을 때마다 볼륨 누적 (배치 처리)
 void _accumulateVolume(Trade trade) {
   final market = trade.market;
   final totalAmount = trade.total;
   
   // 모든 시간대에 동시 누적
   for (final timeFrameStr in _volumeByTimeFrame.keys) {
     final volumeMap = _volumeByTimeFrame[timeFrameStr]!;
     
     // 🔧 크기 제한 (상위 200개만 유지)
     if (volumeMap.length > _maxMarketsPerTimeFrame) {
       final sorted = volumeMap.entries.toList()
         ..sort((a, b) => b.value.compareTo(a.value));
       volumeMap.clear();
       volumeMap.addAll(Map.fromEntries(sorted.take(_maxMarketsPerTimeFrame)));
     }
     
     volumeMap[market] = (volumeMap[market] ?? 0.0) + totalAmount;
   }
   
   // 🚀 배치 스케줄링으로 변경
   _scheduleBatchUpdate();
 }

 /// 🚀 배치 업데이트 스케줄링 (Trade와 동일한 패턴)
 void _scheduleBatchUpdate() {
   _batchUpdateTimer?.cancel();
   _batchUpdateTimer = Timer(_batchUpdateInterval, () {
     _updateVolumeStreams();
   });
 }

 /// 🔧 모든 시간대의 볼륨 스트림 배치 업데이트
 void _updateVolumeStreams() {
   try {
     for (final entry in _volumeByTimeFrame.entries) {
       final timeFrameStr = entry.key;
       final volumeMap = Map<String, double>.from(entry.value);
       
       // 해당 시간대 스트림에 데이터 전송
       final controller = _volumeControllers[timeFrameStr];
       if (controller != null && !controller.isClosed) {
         controller.add(volumeMap);
       }
     }
     
     if (kDebugMode) {
       final totalMarkets = _volumeByTimeFrame.values.isNotEmpty 
           ? _volumeByTimeFrame.values.first.length 
           : 0;
       if (totalMarkets > 0) {
         debugPrint('🚀 Volume streams updated (batch): $totalMarkets markets');
       }
     }
   } catch (e, stackTrace) {
     debugPrint('_updateVolumeStreams error: $e');
     debugPrint('StackTrace: $stackTrace');
   }
 }

 /// 특정 시간대 리셋
 void _resetTimeFrame(String timeFrameStr) {
   _volumeByTimeFrame[timeFrameStr]?.clear();
   _updateVolumeStreams(); // 리셋 후 빈 데이터 전송
 }

 @override
 void resetTimeFrame(String timeFrame) {
   debugPrint('🔄 Manual reset timeFrame: $timeFrame');
   _resetTimeFrame(timeFrame);
 }

 @override
 void resetAllTimeFrames() {
   debugPrint('🔄 Manual reset all timeFrames');
   for (final timeFrameStr in _volumeByTimeFrame.keys) {
     _volumeByTimeFrame[timeFrameStr]?.clear();
   }
   _updateVolumeStreams();
 }

 @override
 DateTime? getNextResetTime(String timeFrame) {
   final startTime = _timeFrameStartTimes[timeFrame];
   if (startTime == null) return null;
   
   final timeFrameMinutes = int.tryParse(timeFrame.replaceAll('m', ''));
   if (timeFrameMinutes == null) return null;
   
   return startTime.add(Duration(minutes: timeFrameMinutes));
 }

 @override
 List<String> getActiveTimeFrames() {
   return AppConfig.timeFrames.map((tf) => '${tf}m').toList();
 }

 @override
 bool isTimeFrameActive(String timeFrame) {
   return getActiveTimeFrames().contains(timeFrame);
 }

 @override
 Future<void> dispose() async {
   debugPrint('VolumeRepositoryImpl: dispose() called');
   
   // 🚀 배치 타이머 정리 추가
   _batchUpdateTimer?.cancel();
   
   // 볼륨 구독 정리
   await _volumeSubscription?.cancel();
   _volumeStream = null;
   
   // 볼륨 컨트롤러들 정리
   for (final controller in _volumeControllers.values) {
     await controller.close();
   }
   
   debugPrint('VolumeRepositoryImpl: dispose completed');
 }
}\n\n// ====== lib/data/repositories/trade_repository_impl.dart ======\n
// lib/data/repositories/trade_repository_impl.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import '../../../core/config/app_config.dart';
import '../../domain/entities/trade.dart';
import '../../domain/repositories/trade_repository.dart';
import '../datasources/trade_cache_ds.dart';
import '../datasources/trade_remote_ds.dart';
import '../processors/trade_aggregator.dart';

/// 예전 프로젝트 방식의 효율적인 배치 처리를 적용한 Repository
class TradeRepositoryImpl implements TradeRepository {
 final TradeRemoteDataSource _remote;
 final TradeCacheDataSource _cache;
 final TradeAggregator _aggregator;

 // 📊 내부 상태 관리 (예전 프로젝트 TradeNotifier 방식)
 final Map<double, List<Trade>> _filterLists = {};
 final Set<String> _seenIds = {};
 
 // 🎯 배치 처리를 위한 컨트롤러들
 final StreamController<List<Trade>> _filteredController = StreamController<List<Trade>>.broadcast();
 final StreamController<Trade> _aggregatedController = StreamController<Trade>.broadcast();
 
 // 🔥 핵심: 단일 스트림 관리
 Stream<Trade>? _masterStream;
 StreamSubscription<Trade>? _masterSubscription;
 Timer? _periodicFlushTimer;
 Timer? _batchUpdateTimer;
 
 // 🎯 동적 임계값 관리
 double _currentThreshold = 20000000.0; // 기본값: 2천만원
 
 // 🆕 구간/누적 모드 관리
 bool _isRangeMode = false; // false: 누적 모드(기본), true: 구간 모드
 
 // 성능 최적화 상수
 static const int _maxTrades = 200;
 static const int _maxCacheSize = 1000;
 static const Duration _batchUpdateInterval = Duration(milliseconds: 100);

 TradeRepositoryImpl(this._remote, this._cache)
     : _aggregator = TradeAggregator() {
   
   // 필터 리스트 초기화
   for (final filter in AppConfig.tradeFilters) {
     _filterLists[filter] = [];
   }
   
   // 주기적 플러시 타이머
   _periodicFlushTimer = Timer.periodic(
     AppConfig.globalResetInterval,
     (_) => _aggregator.flushTrades(onTradeProcessed: _handleProcessedTrade),
   );
 }

 /// 🔥 핵심: 마스터 스트림 초기화 (한 번만 호출)
 void _initializeMasterStream(List<String> markets) {
   if (_masterStream != null) return; // 이미 초기화됨
   
   debugPrint('TradeRepositoryImpl: initializing master stream for ${markets.length} markets');
   
   // 🎯 단일 스트림 생성 (브로드캐스트로 다른 Repository도 구독 가능)
   _masterStream = _remote.watch(markets).asBroadcastStream();
   
   // 🎯 단일 구독으로 모든 데이터 처리
   _masterSubscription = _masterStream!.listen(
     _processRawTrade,
     onError: (error, stackTrace) {
       debugPrint('Master stream error: $error');
       debugPrint('StackTrace: $stackTrace');
     },
     onDone: () {
       debugPrint('Master stream done');
     },
   );
 }

 @override
 Stream<Trade> watchTrades(List<String> markets) {
   debugPrint('TradeRepositoryImpl: watchTrades() - ${markets.length} markets');
   
   // 마스터 스트림 초기화
   _initializeMasterStream(markets);
   
   // 마스터 스트림 반환 (추가 구독 없음)
   return _masterStream!;
 }

 @override
 Stream<List<Trade>> watchFilteredTrades(double threshold, List<String> markets) {
   debugPrint('TradeRepositoryImpl: watchFilteredTrades() - threshold: $threshold');
   
   // 🎯 수정: 임계값 업데이트
   _currentThreshold = threshold;
   
   // 마스터 스트림 초기화
   _initializeMasterStream(markets);
   
   // 임계값이 변경되었으므로 즉시 재필터링
   _scheduleBatchUpdate();
   
   // 배치 처리된 결과 스트림 반환
   return _filteredController.stream;
 }

 @override
 Stream<Trade> watchAggregatedTrades() {
   return _aggregatedController.stream;
 }

 /// 🎯 새로 추가: 동적 임계값 업데이트
 @override
 void updateThreshold(double threshold) {
   if (_currentThreshold != threshold) {
     _currentThreshold = threshold;
     debugPrint('🎯 Threshold updated to: ${threshold.toStringAsFixed(0)}');
     
     // 즉시 재필터링 실행
     _scheduleBatchUpdate();
   }
 }

 /// 🆕 구간/누적 모드 업데이트
 @override
 void updateRangeMode(bool isRangeMode) {
   if (_isRangeMode != isRangeMode) {
     _isRangeMode = isRangeMode;
     debugPrint('🔄 Range mode updated to: ${isRangeMode ? "구간" : "누적"}');
     
     // 즉시 재필터링 실행
     _scheduleBatchUpdate();
   }
 }
 
 /// 📥 원시 거래 데이터 처리 (예전 프로젝트 방식)
 void _processRawTrade(Trade trade) async {
   try {
     final key = '${trade.market}/${trade.sequentialId}';

     // 중복 처리 방지
     if (!_seenIds.add(key)) return;

     // 메모리 관리
     if (_seenIds.length > _maxCacheSize) {
       final removeCount = (_seenIds.length / 4).ceil();
       final toRemove = _seenIds.take(removeCount).toList();
       _seenIds.removeAll(toRemove);
     }

     // 캐시 저장
     await _cache.cacheTrade(trade);

     // 🔄 Aggregator를 통한 거래 처리
     _aggregator.processTrade(
       {
         'market': trade.market,
         'price': trade.price,
         'volume': trade.volume,
         'timestamp': trade.timestampMs,
         'isBuy': trade.isBuy,
         'sequential_id': trade.sequentialId,
       },
       onTradeProcessed: _handleProcessedTrade,
     );
     
   } catch (e, stackTrace) {
     debugPrint('_processRawTrade error: $e');
     debugPrint('StackTrace: $stackTrace');
   }
 }
 
 /// 🎯 집계된 거래 처리 및 필터링 (핵심 로직)
 void _handleProcessedTrade(Map<String, dynamic> processedTrade) {
   try {
     // Trade 엔티티로 변환
     final trade = Trade(
       market: processedTrade['market'] as String,
       price: processedTrade['price'] as double,
       volume: processedTrade['volume'] as double,
       side: (processedTrade['isBuy'] as bool) ? 'BID' : 'ASK',
       changePrice: 0.0,
       changeState: 'EVEN',
       timestampMs: processedTrade['timestamp'] as int,
       sequentialId: processedTrade['sequential_id'] as String,
     );
     
     // 집계된 거래 스트림에 추가
     if (!_aggregatedController.isClosed) {
       _aggregatedController.add(trade);
     }
     
     final total = trade.total;
     
     // 📋 각 필터에 해당하는 거래 추가
     for (final filter in AppConfig.tradeFilters) {
       if (total >= filter) {
         final list = _filterLists[filter]!;
         list.insert(0, trade);
         
         // 최대 거래 수 유지
         if (list.length > _maxTrades) {
           list.removeLast();
         }
       }
     }
     
     // 🚀 배치 업데이트 스케줄링 (과도한 UI 업데이트 방지)
     _scheduleBatchUpdate();
     
   } catch (e, stackTrace) {
     debugPrint('_handleProcessedTrade error: $e');
     debugPrint('StackTrace: $stackTrace');
   }
 }
 
 /// ⏰ 배치 업데이트 스케줄링 (예전 프로젝트의 _updateFilteredTrades 방식)
 void _scheduleBatchUpdate() {
   // 이미 스케줄된 업데이트가 있으면 리셋
   _batchUpdateTimer?.cancel();
   
   _batchUpdateTimer = Timer(_batchUpdateInterval, () {
     _updateFilteredTrades();
   });
 }
 
 /// 📊 필터링된 거래 목록 업데이트 (UI 업데이트) - 🆕 구간/누적 로직 추가
 void _updateFilteredTrades() {
   try {
     final threshold = _currentThreshold;
     
     final merged = <Trade>[];
     final seen = <String>{};

     if (_isRangeMode) {
       // 🆕 구간 모드: 현재 임계값 ~ 다음 임계값까지만
       final nextThreshold = _getNextThreshold(threshold);
       
       for (final filter in AppConfig.tradeFilters.where((f) => f >= threshold)) {
         for (final trade in _filterLists[filter] ?? <Trade>[]) {
           final id = '${trade.sequentialId}-${trade.timestampMs}';
           final total = trade.total;
           
           // 🎯 구간 필터링: threshold <= total < nextThreshold
           if (total >= threshold && total < nextThreshold && seen.add(id)) {
             merged.add(trade);
           }
         }
       }
       
       if (kDebugMode) {
         debugPrint('🔄 Range mode: ${threshold.toStringAsFixed(0)} ~ ${nextThreshold.toStringAsFixed(0)}');
       }
     } else {
       // 🔄 누적 모드: 현재 임계값 이상 모든 거래 (기존 방식)
       for (final filter in AppConfig.tradeFilters.where((f) => f >= threshold)) {
         for (final trade in _filterLists[filter] ?? <Trade>[]) {
           final id = '${trade.sequentialId}-${trade.timestampMs}';
           if (trade.total >= threshold && seen.add(id)) {
             merged.add(trade);
           }
         }
       }
       
       if (kDebugMode) {
         debugPrint('📈 Cumulative mode: ${threshold.toStringAsFixed(0)} 이상');
       }
     }

     // 시간순 정렬 (최신 순)
     merged.sort((a, b) => b.timestampMs.compareTo(a.timestampMs));
     
     // 최대 거래 수로 제한
     final result = merged.take(_maxTrades).toList();
     
     // 🚀 UI에 업데이트 전송
     if (!_filteredController.isClosed) {
       _filteredController.add(result);
       
       if (kDebugMode && result.isNotEmpty) {
         final modeText = _isRangeMode ? "구간" : "누적";
         debugPrint('🎯 Batch update ($modeText): ${result.length} filtered trades');
       }
     }
     
   } catch (e, stackTrace) {
     debugPrint('_updateFilteredTrades error: $e');
     debugPrint('StackTrace: $stackTrace');
   }
 }

 /// 🆕 다음 임계값 찾기 (구간 모드용)
 double _getNextThreshold(double currentThreshold) {
   final sortedFilters = AppConfig.tradeFilters.toList()..sort();
   
   for (int i = 0; i < sortedFilters.length; i++) {
     if (sortedFilters[i] == currentThreshold) {
       // 다음 임계값이 있으면 반환, 없으면 무한대
       return i + 1 < sortedFilters.length 
           ? sortedFilters[i + 1] 
           : double.infinity;
     }
   }
   
   // 현재 임계값이 리스트에 없으면 그보다 큰 첫 번째 값 반환
   for (final filter in sortedFilters) {
     if (filter > currentThreshold) {
       return filter;
     }
   }
   
   return double.infinity;
 }

 @override
 Future<void> dispose() async {
   debugPrint('TradeRepositoryImpl: dispose() called');
   
   // 타이머들 정리
   _periodicFlushTimer?.cancel();
   _batchUpdateTimer?.cancel();
   
   // 마스터 구독 정리
   await _masterSubscription?.cancel();
   _masterStream = null;
   
   // 컨트롤러들 정리
   await _filteredController.close();
   await _aggregatedController.close();
   
   // 데이터소스 정리 (remote만)
   await _remote.dispose();
   
   // Aggregator 플러시
   _aggregator.flushTrades(onTradeProcessed: (_) {});
 }
}\n\n// ====== lib/data/models/market_mood_dto.g.dart ======\n
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'market_mood_dto.dart';

// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class TimestampedVolumeAdapter extends TypeAdapter<TimestampedVolume> {
  @override
  final int typeId = 1;

  @override
  TimestampedVolume read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return TimestampedVolume(
      timestamp: fields[0] as DateTime,
      volumeUsd: fields[1] as double,
    );
  }

  @override
  void write(BinaryWriter writer, TimestampedVolume obj) {
    writer
      ..writeByte(2)
      ..writeByte(0)
      ..write(obj.timestamp)
      ..writeByte(1)
      ..write(obj.volumeUsd);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TimestampedVolumeAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}

class CoinGeckoGlobalDataDtoAdapter
    extends TypeAdapter<CoinGeckoGlobalDataDto> {
  @override
  final int typeId = 2;

  @override
  CoinGeckoGlobalDataDto read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return CoinGeckoGlobalDataDto(
      totalMarketCapUsd: fields[0] as double,
      totalVolumeUsd: fields[1] as double,
      btcDominance: fields[2] as double,
      marketCapChangePercentage24hUsd: fields[3] as double,
      updatedAt: fields[4] as int,
    );
  }

  @override
  void write(BinaryWriter writer, CoinGeckoGlobalDataDto obj) {
    writer
      ..writeByte(5)
      ..writeByte(0)
      ..write(obj.totalMarketCapUsd)
      ..writeByte(1)
      ..write(obj.totalVolumeUsd)
      ..writeByte(2)
      ..write(obj.btcDominance)
      ..writeByte(3)
      ..write(obj.marketCapChangePercentage24hUsd)
      ..writeByte(4)
      ..write(obj.updatedAt);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CoinGeckoGlobalDataDtoAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}

class CoinGeckoGlobalResponseDtoAdapter
    extends TypeAdapter<CoinGeckoGlobalResponseDto> {
  @override
  final int typeId = 3;

  @override
  CoinGeckoGlobalResponseDto read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return CoinGeckoGlobalResponseDto(
      data: fields[0] as CoinGeckoGlobalDataDto,
    );
  }

  @override
  void write(BinaryWriter writer, CoinGeckoGlobalResponseDto obj) {
    writer
      ..writeByte(1)
      ..writeByte(0)
      ..write(obj.data);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CoinGeckoGlobalResponseDtoAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
\n\n// ====== lib/data/models/market_mood_dto.dart ======\n
// lib/data/models/market_mood_dto.dart
// 🌐 Data Layer: 통합 DTO 모델 (Trade 스타일)

import 'dart:convert';
import 'package:hive/hive.dart';
import '../../core/utils/date_time.dart'; // DateTime extension
import '../../core/utils/logger.dart';
import '../../domain/entities/market_mood.dart';

part 'market_mood_dto.g.dart';

/// 📈 인트라데이 볼륨 데이터 (30분 단위) - Hive 모델
@HiveType(typeId: 1) // TradeDto가 typeId: 0 사용하므로 1 사용
class TimestampedVolume extends HiveObject {
  @HiveField(0)
  final DateTime timestamp;

  @HiveField(1)
  final double volumeUsd;

  TimestampedVolume({
    required this.timestamp,
    required this.volumeUsd,
  });

  /// Domain Entity로 변환
  VolumeData toEntity() => VolumeData(
    timestamp: timestamp,
    volumeUsd: volumeUsd,
  );

  /// Domain Entity에서 생성
  factory TimestampedVolume.fromEntity(VolumeData entity) => TimestampedVolume(
    timestamp: entity.timestamp,
    volumeUsd: entity.volumeUsd,
  );

  /// JSON 직렬화용 맵 변환
  Map<String, dynamic> toMap() => {
    'timestamp': timestamp.toIso8601String(),
    'volumeUsd': volumeUsd,
  };

  /// JSON 문자열 직렬화
  String toJson() => json.encode(toMap());

  /// JSON 파싱
  static TimestampedVolume? tryParse(Map<String, dynamic> m) {
    try {
      if (m.isEmpty) return null;

      final timestampStr = m['timestamp']?.toString() ?? '';
      final volumeUsd = (m['volumeUsd'] as num?)?.toDouble() ?? 0.0;

      if (timestampStr.isEmpty) return null;

      return TimestampedVolume(
        timestamp: DateTime.parse(timestampStr),
        volumeUsd: volumeUsd,
      );
    } catch (e) {
      log.w('TimestampedVolume.tryParse error: $e');
      return null;
    }
  }

  /// JSON 문자열로부터 객체 생성
  factory TimestampedVolume.fromJson(String src) =>
      tryParse(json.decode(src) as Map<String, dynamic>) ??
      TimestampedVolume(
        timestamp: DateTime.now(),
        volumeUsd: 0.0,
      );

  /// DateTime extension 활용
  String get formattedTime => timestamp.yyyyMMddhhmm();
  String get timeAgoText => timestamp.timeAgo();
  String get shortTime => timestamp.hhmmss();

  @override
  String toString() => 'TimestampedVolume($formattedTime, ${volumeUsd.toStringAsFixed(2)}B)';
}

/// 🌐 CoinGecko 글로벌 마켓 데이터 DTO
@HiveType(typeId: 2)
class CoinGeckoGlobalDataDto extends HiveObject {
  @HiveField(0)
  final double totalMarketCapUsd;

  @HiveField(1)
  final double totalVolumeUsd;

  @HiveField(2)
  final double btcDominance;

  @HiveField(3)
  final double marketCapChangePercentage24hUsd;

  @HiveField(4)
  final int updatedAt;

  CoinGeckoGlobalDataDto({
    required this.totalMarketCapUsd,
    required this.totalVolumeUsd,
    required this.btcDominance,
    required this.marketCapChangePercentage24hUsd,
    required this.updatedAt,
  });

  /// Domain Entity로 변환
  MarketMoodData toEntity() => MarketMoodData(
    totalMarketCapUsd: totalMarketCapUsd,
    totalVolumeUsd: totalVolumeUsd,
    btcDominance: btcDominance,
    marketCapChange24h: marketCapChangePercentage24hUsd,
    updatedAt: DateTime.fromMillisecondsSinceEpoch(updatedAt * 1000),
  );

  /// JSON 직렬화용 맵 변환
  Map<String, dynamic> toMap() => {
    'total_market_cap_usd': totalMarketCapUsd,
    'total_volume_usd': totalVolumeUsd,
    'btc_dominance': btcDominance,
    'market_cap_change_percentage_24h_usd': marketCapChangePercentage24hUsd,
    'updated_at': updatedAt,
  };

  /// JSON 문자열 직렬화
  String toJson() => json.encode(toMap());

  /// JSON 파싱 (CoinGecko API 응답 형태)
  static CoinGeckoGlobalDataDto? tryParse(Map<String, dynamic> m) {
    try {
      if (m.isEmpty) return null;

      double parseDouble(dynamic v) {
        if (v is num) return v.toDouble();
        final str = v?.toString().trim() ?? '';
        return str.isNotEmpty ? double.tryParse(str) ?? 0.0 : 0.0;
      }

      int parseInt(dynamic v) {
        if (v is int) return v;
        final str = v?.toString().trim() ?? '';
        return str.isNotEmpty ? int.tryParse(str) ?? DateTime.now().millisecondsSinceEpoch ~/ 1000
            : DateTime.now().millisecondsSinceEpoch ~/ 1000;
      }

      final totalMarketCap = m['total_market_cap'] as Map<String, dynamic>?;
      final totalVolume = m['total_volume'] as Map<String, dynamic>?;
      final marketCapPercentage = m['market_cap_percentage'] as Map<String, dynamic>?;

      return CoinGeckoGlobalDataDto(
        totalMarketCapUsd: parseDouble(totalMarketCap?['usd']),
        totalVolumeUsd: parseDouble(totalVolume?['usd']),
        btcDominance: parseDouble(marketCapPercentage?['btc']),
        marketCapChangePercentage24hUsd: parseDouble(m['market_cap_change_percentage_24h_usd']),
        updatedAt: parseInt(m['updated_at']),
      );
    } catch (e) {
      log.w('CoinGeckoGlobalDataDto.tryParse error: $e');
      return null;
    }
  }

  factory CoinGeckoGlobalDataDto.fromJson(String src) =>
      tryParse(json.decode(src) as Map<String, dynamic>) ??
      CoinGeckoGlobalDataDto(
        totalMarketCapUsd: 0.0,
        totalVolumeUsd: 0.0,
        btcDominance: 0.0,
        marketCapChangePercentage24hUsd: 0.0,
        updatedAt: DateTime.now().millisecondsSinceEpoch ~/ 1000,
      );

  @override
  String toString() => 'CoinGeckoGlobalDataDto(volume: ${totalVolumeUsd.toStringAsFixed(0)}B USD)';
}

/// 🌐 CoinGecko 글로벌 마켓 응답 래퍼 DTO
@HiveType(typeId: 3)
class CoinGeckoGlobalResponseDto extends HiveObject {
  @HiveField(0)
  final CoinGeckoGlobalDataDto data;

  CoinGeckoGlobalResponseDto({
    required this.data,
  });

  Map<String, dynamic> toMap() => {
    'data': data.toMap(),
  };

  String toJson() => json.encode(toMap());

  static CoinGeckoGlobalResponseDto? tryParse(Map<String, dynamic> m) {
    try {
      if (m.isEmpty) return null;
      final dataMap = m['data'] as Map<String, dynamic>?;
      if (dataMap == null) return null;
      final data = CoinGeckoGlobalDataDto.tryParse(dataMap);
      if (data == null) return null;
      return CoinGeckoGlobalResponseDto(data: data);
    } catch (e) {
      log.w('CoinGeckoGlobalResponseDto.tryParse error: $e');
      return null;
    }
  }

  factory CoinGeckoGlobalResponseDto.fromJson(Map<String, dynamic> json) {
     final parsed = tryParse(json);
     if(parsed != null) return parsed;
     
     return CoinGeckoGlobalResponseDto(
        data: CoinGeckoGlobalDataDto(
          totalMarketCapUsd: 0.0,
          totalVolumeUsd: 0.0,
          btcDominance: 0.0,
          marketCapChangePercentage24hUsd: 0.0,
          updatedAt: DateTime.now().millisecondsSinceEpoch ~/ 1000,
        ),
      );
  }

  @override
  String toString() => 'CoinGeckoGlobalResponseDto(data: $data)';
}\n\n// ====== lib/data/models/trade_dto.g.dart ======\n
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'trade_dto.dart';

// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class TradeDtoAdapter extends TypeAdapter<TradeDto> {
  @override
  final int typeId = 0;

  @override
  TradeDto read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return TradeDto(
      market: fields[0] as String,
      price: fields[1] as double,
      volume: fields[2] as double,
      side: fields[3] as String,
      changePrice: fields[4] as double,
      changeState: fields[5] as String,
      timestampMs: fields[6] as int,
      sequentialId: fields[7] as String,
    );
  }

  @override
  void write(BinaryWriter writer, TradeDto obj) {
    writer
      ..writeByte(8)
      ..writeByte(0)
      ..write(obj.market)
      ..writeByte(1)
      ..write(obj.price)
      ..writeByte(2)
      ..write(obj.volume)
      ..writeByte(3)
      ..write(obj.side)
      ..writeByte(4)
      ..write(obj.changePrice)
      ..writeByte(5)
      ..write(obj.changeState)
      ..writeByte(6)
      ..write(obj.timestampMs)
      ..writeByte(7)
      ..write(obj.sequentialId);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TradeDtoAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
\n\n// ====== lib/data/models/volume_dto.dart ======\n
\n\n// ====== lib/data/models/pattern_data_dto.dart ======\n
\n\n// ====== lib/data/models/trade_dto.dart ======\n
// lib/data/models/trade_dto.dart

import 'dart:convert';
import 'package:hive/hive.dart';
import '../../domain/entities/trade.dart';
import '../../core/utils/logger.dart';

part 'trade_dto.g.dart';

@HiveType(typeId: 0)
class TradeDto {
  @HiveField(0)
  final String market;

  @HiveField(1)
  final double price;

  @HiveField(2)
  final double volume;

  @HiveField(3)
  final String side;

  @HiveField(4)
  final double changePrice;

  @HiveField(5)
  final String changeState;

  @HiveField(6)
  final int timestampMs;

  @HiveField(7)
  final String sequentialId;

  TradeDto({
    required this.market,
    required this.price,
    required this.volume,
    required this.side,
    required this.changePrice,
    required this.changeState,
    required this.timestampMs,
    required this.sequentialId,
  });

  Trade toEntity() => Trade(
        market: market,
        price: price,
        volume: volume,
        side: side,
        changePrice: changePrice,
        changeState: changeState,
        timestampMs: timestampMs,
        sequentialId: sequentialId,
      );

  /// JSON 직렬화용 맵 변환 (camelCase 키 사용으로 시스템 통일)
  Map<String, dynamic> toMap() => {
        'market': market,
        'price': price,
        'volume': volume,
        'side': side,
        'changePrice': changePrice,
        'changeState': changeState,
        'timestampMs': timestampMs,
        'sequentialId': sequentialId,
      };

  /// JSON 문자열 직렬화
  String toJson() => json.encode(toMap());

  /// JSON 파싱 (여러 키 네이밍 지원)
  static TradeDto? tryParse(Map<String, dynamic> m) {
    try {
      if (m.isEmpty) return null;
      log.d('TradeDto.tryParse: ${m.toString().substring(0, m.toString().length.clamp(0, 100))}');

      String parseString(dynamic v, [String fallback = '']) =>
          v != null ? v.toString() : fallback;

      double parseDouble(dynamic v) {
        if (v is num) return v.toDouble();
        final str = v?.toString().trim() ?? '';
        return str.isNotEmpty ? double.tryParse(str) ?? 0.0 : 0.0;
      }

      int parseInt(dynamic v) {
        if (v is int) return v;
        final str = v?.toString().trim() ?? '';
        return str.isNotEmpty ? int.tryParse(str) ?? DateTime.now().millisecondsSinceEpoch
                              : DateTime.now().millisecondsSinceEpoch;
      }

      final market = parseString(m['market'] ?? m['symbol'] ?? m['code'], 'UNKNOWN');
      final price = parseDouble(m['price'] ?? m['trade_price']);
      final volume = parseDouble(m['volume'] ?? m['trade_volume']);
      final side = parseString(m['side'] ?? m['ask_bid'], 'UNKNOWN');

      final changePrice = parseDouble(m['changePrice'] ?? m['change_price']);
      final changeState = parseString(m['changeState'] ?? m['change_state'], 'EVEN');
      final timestamp = parseInt(m['timestampMs'] ?? m['timestamp_ms'] ?? m['timestamp']);
      final sequentialId = parseString(
        m['sequentialId'] ?? m['sequential_id'] ?? m['sid'], 
        timestamp.toString(),
      );

      return TradeDto(
        market: market,
        price: price,
        volume: volume,
        side: side,
        changePrice: changePrice,
        changeState: changeState,
        timestampMs: timestamp,
        sequentialId: sequentialId,
      );
    } catch (e) {
      log.w('TradeDto.tryParse error: $e');
      return null;
    }
  }

  /// JSON 문자열로부터 객체 생성
  factory TradeDto.fromJson(String src) =>
      tryParse(json.decode(src) as Map<String, dynamic>) ??
      TradeDto(
        market: 'ERROR',
        price: 0.0,
        volume: 0.0,
        side: 'UNKNOWN',
        changePrice: 0.0,
        changeState: 'UNKNOWN',
        timestampMs: DateTime.now().millisecondsSinceEpoch,
        sequentialId: 'ERROR',
      );
}
\n\n// ====== lib/data/processors/volume_aggregator.dart ======\n
\n\n// ====== lib/data/processors/trade_aggregator.dart ======\n
// lib/features/trade/data/utils/trade_aggregator.dart
import 'package:flutter/foundation.dart';
import '../../../core/config/app_config.dart';

/// 예전 프로젝트와 같이 효율적으로 작동하는 거래 집계기
class TradeAggregator {
  final Map<String, Map<String, dynamic>> _lastTrades = {};
  final int mergeWindow = AppConfig.mergeWindowMs;

  /// 거래 처리 및 병합 로직
  void processTrade(
    Map<String, dynamic> trade, {
    required Function(Map<String, dynamic>) onTradeProcessed,
  }) {
    try {
      // 안전한 null 체크와 타입 캐스팅
      final market = trade['market'] as String? ?? '';
      final price = trade['price'] as double? ?? 0.0;
      final volume = trade['volume'] as double? ?? 0.0;
      final timestamp = trade['timestamp'] as int? ?? 0;
      final isBuy = trade['isBuy'] as bool? ?? true;
      final sequentialId = trade['sequential_id'] as String? ?? '';

      // 유효하지 않은 데이터는 처리하지 않음
      if (market.isEmpty || price <= 0 || volume <= 0 || timestamp <= 0) {
        if (kDebugMode) {
          debugPrint('TradeAggregator: Invalid trade data, skipping: market=$market, price=$price, volume=$volume, timestamp=$timestamp');
        }
        return;
      }

      final total = price * volume;

      if (_lastTrades.containsKey(market)) {
        final lastTrade = _lastTrades[market]!;
        final lastTs = lastTrade['timestamp'] as int;

        // 시간 윈도우 내의 거래면 병합
        if (timestamp - lastTs <= mergeWindow) {
          final lastTotal = lastTrade['total'] as double;
          final lastVolume = lastTrade['volume'] as double;
          final newTotal = lastTotal + total;
          final newVolume = lastVolume + volume;

          // 가중 평균 가격 계산
          final avgPrice = newTotal / newVolume;

          // 병합된 거래 정보 업데이트
          lastTrade['price'] = avgPrice;
          lastTrade['volume'] = newVolume;
          lastTrade['total'] = newTotal;
          lastTrade['timestamp'] = timestamp; // 최신 시간으로 업데이트
          lastTrade['sequential_id'] = sequentialId;
          lastTrade['isBuy'] = isBuy; // 최신 거래의 방향 사용

          if (kDebugMode) {
            debugPrint(
              'Merged trade: $market, total: ${newTotal.toStringAsFixed(0)}, avg_price: ${avgPrice.toStringAsFixed(2)}',
            );
          }
        } else {
          // 시간 윈도우를 벗어나면 이전 거래 처리하고 새 거래로 교체
          onTradeProcessed(Map<String, dynamic>.from(lastTrade));
          _lastTrades[market] = {
            'market': market,
            'price': price,
            'volume': volume,
            'total': total,
            'timestamp': timestamp,
            'isBuy': isBuy,
            'sequential_id': sequentialId,
          };
        }
      } else {
        // 새로운 마켓의 첫 거래
        final newTrade = {
          'market': market,
          'price': price,
          'volume': volume,
          'total': total,
          'timestamp': timestamp,
          'isBuy': isBuy,
          'sequential_id': sequentialId,
        };
        _lastTrades[market] = newTrade;
        // 🔥 중요: 첫 거래도 바로 처리하여 UI에 반영
        onTradeProcessed(Map<String, dynamic>.from(newTrade));
      }
    } catch (e, stackTrace) {
      if (kDebugMode) {
        debugPrint('TradeAggregator processTrade error: $e');
        debugPrint('StackTrace: $stackTrace');
      }
    }
  }

  /// 대기 중인 모든 거래를 플러시
  void flushTrades({
    required Function(Map<String, dynamic>) onTradeProcessed,
  }) {
    try {
      final tradesCount = _lastTrades.length;
      for (final trade in _lastTrades.values) {
        onTradeProcessed(Map<String, dynamic>.from(trade));
      }
      _lastTrades.clear();
      
      if (kDebugMode) {
        debugPrint('TradeAggregator: $tradesCount trades flushed');
      }
    } catch (e, stackTrace) {
      if (kDebugMode) {
        debugPrint('TradeAggregator flushTrades error: $e');
        debugPrint('StackTrace: $stackTrace');
      }
    }
  }

  /// 특정 마켓의 대기 중인 거래 가져오기 (디버깅용)
  Map<String, dynamic>? getPendingTrade(String market) {
    return _lastTrades[market] != null
        ? Map<String, dynamic>.from(_lastTrades[market]!)
        : null;
  }

  /// 현재 대기 중인 거래 수
  int get pendingTradesCount => _lastTrades.length;

  /// 모든 대기 거래 클리어 (테스트/디버그용)
  void clear() {
    _lastTrades.clear();
  }
}\n\n// ====== lib/data/processors/pattern_analyzer.dart ======\n
\n\n// ====== lib/data/processors/pattern_strategy.dart ======\n
\n\n// ====== lib/data/processors/streaming_market_buffer.dart ======\n
\n\n// ====== lib/data/factories/signal_stream_factory.dart ======\n
\n\n// ====== lib/domain/repositories/surge_repository.dart ======\n
// lib/domain/repositories/surge_repository.dart
import '../entities/surge.dart';

/// 급등/급락 데이터의 시간대별 변동률 추적 및 리셋을 관리하는 Repository
abstract class SurgeRepository {
  /// 시간대별 변동률 스트림 제공 (Surge 엔티티 리스트)
  /// [timeFrame]: 시간대 (예: "1m", "5m", "15m")
  /// [markets]: 모니터링할 마켓 코드 리스트
  /// Returns: Surge 엔티티 리스트 (변동률 절댓값 순 정렬)
  Stream<List<Surge>> watchSurgeByTimeFrame(String timeFrame, List<String> markets);
  
  /// 특정 시간대 수동 리셋
  /// [timeFrame]: 리셋할 시간대
  void resetTimeFrame(String timeFrame);
  
  /// 모든 시간대 수동 리셋
  void resetAllTimeFrames();
  
  /// 다음 리셋 예정 시간 조회
  /// [timeFrame]: 시간대
  /// Returns: 다음 리셋 시간 (null이면 리셋 정보 없음)
  DateTime? getNextResetTime(String timeFrame);
  
  /// 활성화된 시간대 목록 조회
  /// Returns: 사용 가능한 시간대 리스트 (예: ["1m", "5m", "15m"])
  List<String> getActiveTimeFrames();
  
  /// 특정 시간대가 활성화되어 있는지 확인
  /// [timeFrame]: 확인할 시간대
  /// Returns: 활성화 여부
  bool isTimeFrameActive(String timeFrame);
  
  /// 리소스 해제
  Future<void> dispose();
}\n\n// ====== lib/domain/repositories/market_mood_repository.dart ======\n
// lib/domain/repositories/market_mood_repository.dart
// 🎯 Domain Layer: Repository 인터페이스 (클린 아키텍처 준수)

import '../entities/market_mood.dart';

/// 📊 마켓무드 저장소 인터페이스
/// Data Layer에서 구현해야 할 계약을 정의 (Domain → Data 의존성 제거)
abstract class MarketMoodRepository {
  // ═══════════════════════════════════════════════════════════
  // 📡 원격 데이터 (CoinGecko API)
  // ═══════════════════════════════════════════════════════════

  /// 글로벌 마켓 데이터 스트림 (30분 주기)
  Stream<MarketMoodData> getMarketDataStream();

  /// 현재 마켓 데이터 한 번 조회
  Future<MarketMoodData?> getCurrentMarketData();

  /// 현재 USD/KRW 환율 조회 (캐시 포함)
  Future<double> getExchangeRate();

  /// 환율 수동 새로고침
  Future<void> refreshExchangeRate();

  // ═══════════════════════════════════════════════════════════
  // 💾 로컬 데이터 (Hive 볼륨 버퍼)
  // ═══════════════════════════════════════════════════════════

  /// 볼륨 데이터 추가 (30분마다)
  Future<void> addVolumeData(VolumeData volume);

  /// N분 전 볼륨 데이터 조회
  Future<VolumeData?> getVolumeNMinutesAgo(int minutes);

  /// 특정 기간의 평균 볼륨 계산
  Future<double?> getAverageVolume(int days);

  /// 수집된 데이터 개수 확인
  Future<int> getCollectedDataCount();

  /// 앱 시작 시간 조회
  DateTime getAppStartTime();

  // ═══════════════════════════════════════════════════════════
  // 🧹 관리 기능
  // ═══════════════════════════════════════════════════════════

  /// 백그라운드 복귀 시 누락된 슬롯 보정
  Future<void> syncMissingData();

  /// 오래된 데이터 정리
  Future<void> clearOldData();

  /// 시스템 헬스체크
  Future<Map<String, dynamic>> getSystemHealth();

  /// 현재 상태 로깅
  Future<void> logCurrentStatus();

  // ═══════════════════════════════════════════════════════════
  // 🛠️ 개발/테스트용 기능
  // ═══════════════════════════════════════════════════════════

  /// 테스트 데이터 주입
  Future<void> injectTestVolumeData(List<VolumeData> testData);

  // ═══════════════════════════════════════════════════════════
  // 🧹 리소스 정리
  // ═══════════════════════════════════════════════════════════

  /// 리소스 정리 및 스트림 종료
  Future<void> dispose();
}\n\n// ====== lib/domain/repositories/momentary_repository.dart ======\n
\n\n// ====== lib/domain/repositories/settings_repository.dart ======\n
import 'package:flutter/material.dart';
import '../entities/app_settings.dart';

abstract class SettingsRepository {
 /// 현재 앱 설정 가져오기
 Future<AppSettings> getSettings();

 /// 테마 모드 업데이트
 Future<void> updateThemeMode(ThemeMode mode);

 /// 화면 항상 켜기 설정 업데이트
 Future<void> updateKeepScreenOn(bool value);

 /// 슬라이더 위치 업데이트
 Future<void> updateSliderPosition(SliderPosition position);

 /// 코인명 표시 방식 업데이트
 Future<void> updateDisplayMode(DisplayMode mode);

 /// 금액 표시 방식 업데이트
 Future<void> updateAmountDisplayMode(AmountDisplayMode mode);

 /// 반짝임 효과 업데이트
 Future<void> updateBlinkEnabled(bool enabled);

 /// 폰트 패밀리 업데이트
 Future<void> updateFontFamily(FontFamily font);

 /// 햅틱 피드백 설정 업데이트
 Future<void> updateHapticEnabled(bool enabled);    // 🆕 추가

 /// 화면 회전 잠금 설정 업데이트
 Future<void> updatePortraitLocked(bool locked);    // 🆕 추가

 /// 캐시 비우기
 Future<void> clearCache();

 /// 모든 설정 초기화
 Future<void> resetSettings();
}\n\n// ====== lib/domain/repositories/signal_repository.dart ======\n
import '../entities/signal.dart';

/// 🚀 Signal Repository 인터페이스 V4.1 - 온라인 지표 연동
/// 
/// 주요 개선사항:
/// - 온라인 지표 시스템 헬스 체크
/// - 패턴별 고급 설정 지원
/// - 시스템 성능 모니터링
/// - 설정 내보내기/가져오기
/// - 실시간 다이버전스 감지
abstract class SignalRepository {
  // ==========================================================================
  // 기본 시그널 스트림 (기존 호환성)
  // ==========================================================================
  
  /// 특정 패턴의 시그널 스트림 감시
  Stream<List<Signal>> watchSignalsByPattern(
    PatternType patternType,
    List<String> markets,
  );

  /// 모든 패턴의 시그널 스트림 감시
  Stream<List<Signal>> watchAllSignals(List<String> markets);

  // ==========================================================================
  // 패턴 설정 관리 (기존 + V4.1 확장)
  // ==========================================================================
  
  /// 패턴별 임계값 업데이트
  void updatePatternThreshold(PatternType patternType, double threshold);

  /// 현재 설정된 패턴별 임계값 조회
  double getPatternThreshold(PatternType patternType);

  /// 패턴별 활성화/비활성화 설정
  void setPatternEnabled(PatternType patternType, bool enabled);

  /// 패턴 활성화 상태 조회
  bool isPatternEnabled(PatternType patternType);

  /// 감지된 시그널 목록 초기화
  void clearSignals(PatternType? patternType);

  // ==========================================================================
  // 🆕 V4.1 온라인 지표 확장 기능
  // ==========================================================================
  
  /// 패턴별 고급 설정 업데이트 (zScoreThreshold, buyRatioMin 등)
  void updatePatternConfig(PatternType pattern, String key, double value);

  /// 패턴 프리셋 적용 (conservative, aggressive, balanced)
  void applyPatternPreset(String presetName);

  /// 패턴별 통계 정보 조회 (신호 개수, 마지막 감지 시간 등)
  Future<Map<String, dynamic>> getPatternStats(PatternType type);

  /// 전체 시스템 헬스 체크 (온라인 지표 포함)
  Future<Map<String, dynamic>> getSystemHealth();

  /// 마켓별 데이터 품질 조회 (온라인 지표 건강성 포함)
  Map<String, dynamic> getMarketDataQuality();

  /// 성능 메트릭스 실시간 모니터링
  Stream<Map<String, dynamic>> watchPerformanceMetrics();

  // ==========================================================================
  // 🆕 V4.1 설정 관리 (백테스팅, A/B 테스트 지원)
  // ==========================================================================
  
  /// 현재 설정 내보내기 (JSON 형태)
  Map<String, dynamic> exportConfiguration();

  /// 설정 가져오기 (백업 복원, 프리셋 적용)
  void importConfiguration(Map<String, dynamic> config);

  // ==========================================================================
  // 리소스 정리
  // ==========================================================================
  
  /// 리소스 정리 (온라인 지표 포함)
  Future<void> dispose();
}\n\n// ====== lib/domain/repositories/trade_repository.dart ======\n
// lib/domain/repositories/trade_repository.dart
import '../entities/trade.dart';

/// Provides streams of trade data and handles resource cleanup.
abstract class TradeRepository {
 /// Streams raw [Trade] events for the given list of market codes.
 Stream<Trade> watchTrades(List<String> markets);
 
 /// Streams lists of [Trade] filtered by a minimum total trade value.
 /// => markets 파라미터 추가
 Stream<List<Trade>> watchFilteredTrades(double threshold, List<String> markets);
 
 /// Streams aggregated [Trade] events over a merge window.
 Stream<Trade> watchAggregatedTrades();
 
 /// 🎯 새로 추가: 동적 임계값 업데이트
 void updateThreshold(double threshold);
 
 /// 🆕 새로 추가: 구간/누적 모드 업데이트
 void updateRangeMode(bool isRangeMode);
 
 /// Releases any held resources (e.g., WebSocket connections, Hive boxes).
 Future<void> dispose();
}\n\n// ====== lib/domain/repositories/volume_repository.dart ======\n
// lib/domain/repositories/volume_repository.dart

import '../entities/volume.dart'; // 🆕 Volume 엔티티 import

/// 볼륨 데이터의 시간대별 누적 및 리셋을 관리하는 Repository
abstract class VolumeRepository {
  /// 시간대별 거래량 스트림 제공 (Volume 엔티티 리스트)
  /// [timeFrame]: 시간대 (예: "1m", "5m", "15m")
  /// [markets]: 모니터링할 마켓 코드 리스트
  /// Returns: Volume 엔티티 리스트 (볼륨순 정렬)
  Stream<List<Volume>> watchVolumeByTimeFrame(String timeFrame, List<String> markets);
  
  /// 특정 시간대 수동 리셋
  /// [timeFrame]: 리셋할 시간대
  void resetTimeFrame(String timeFrame);
  
  /// 모든 시간대 수동 리셋
  void resetAllTimeFrames();
  
  /// 다음 리셋 예정 시간 조회
  /// [timeFrame]: 시간대
  /// Returns: 다음 리셋 시간 (null이면 리셋 정보 없음)
  DateTime? getNextResetTime(String timeFrame);
  
  /// 활성화된 시간대 목록 조회
  /// Returns: 사용 가능한 시간대 리스트 (예: ["1m", "5m", "15m"])
  List<String> getActiveTimeFrames();
  
  /// 특정 시간대가 활성화되어 있는지 확인
  /// [timeFrame]: 확인할 시간대
  /// Returns: 활성화 여부
  bool isTimeFrameActive(String timeFrame);
  
  /// 리소스 해제
  Future<void> dispose();
}\n\n// ====== lib/domain/usecases/signal_usecase.dart ======\n
import '../entities/signal.dart';
import '../repositories/signal_repository.dart';

/// 🚀 Signal UseCase V4.1 - 온라인 지표 비즈니스 로직
/// 
/// 주요 개선사항:
/// - V4.1 온라인 지표 시스템 연동
/// - 고급 패턴 설정 비즈니스 규칙
/// - 시스템 헬스 모니터링
/// - 백테스팅 지원
/// - 성능 최적화된 필터링
class SignalUseCase {
  final SignalRepository _repository;

  const SignalUseCase(this._repository);

  // ==========================================================================
  // 기본 시그널 스트림 (기존 호환성)
  // ==========================================================================

  /// 특정 패턴의 시그널 스트림 감시
  Stream<List<Signal>> watchSignalsByPattern(
    PatternType patternType,
    List<String> markets,
  ) {
    return _repository.watchSignalsByPattern(patternType, markets);
  }

  /// 모든 패턴의 시그널 스트림 감시
  Stream<List<Signal>> watchAllSignals(List<String> markets) {
    return _repository.watchAllSignals(markets);
  }

  // ==========================================================================
  // 패턴 설정 관리 (비즈니스 규칙 포함)
  // ==========================================================================

  /// 패턴별 임계값 업데이트 (비즈니스 규칙 검증)
  void updatePatternThreshold(PatternType patternType, double threshold) {
    // 기본 검증
    if (threshold <= 0) {
      throw ArgumentError('Threshold must be positive: $threshold');
    }

    // V4.1 패턴별 임계값 범위 검증 (완화된 기준 적용)
    switch (patternType) {
      case PatternType.surge:
        if (threshold < 0.1 || threshold > 50.0) {
          throw ArgumentError('Surge threshold must be between 0.1% and 50%: $threshold');
        }
        break;
      case PatternType.flashFire:
        if (threshold < 1.1 || threshold > 10.0) {
          throw ArgumentError('FlashFire threshold must be between 1.1x and 10x: $threshold');
        }
        break;
      case PatternType.stackUp:
        if (threshold < 2 || threshold > 10) {
          throw ArgumentError('StackUp threshold must be between 2 and 10: $threshold');
        }
        break;
      case PatternType.stealthIn:
        // V4.1 완화된 기준: 300만 ~ 1억
        if (threshold < 3000000 || threshold > 100000000) {
          throw ArgumentError('StealthIn threshold must be between 3M and 100M: $threshold');
        }
        break;
      case PatternType.blackHole:
        // V4.1 완화된 기준: 0.5% ~ 5%
        if (threshold < 0.5 || threshold > 5.0) {
          throw ArgumentError('BlackHole threshold must be between 0.5% and 5%: $threshold');
        }
        break;
      case PatternType.reboundShot:
        if (threshold < 0.5 || threshold > 20.0) {
          throw ArgumentError('ReboundShot threshold must be between 0.5% and 20%: $threshold');
        }
        break;
    }

    _repository.updatePatternThreshold(patternType, threshold);
  }

  /// 패턴별 임계값 조회
  double getPatternThreshold(PatternType patternType) {
    return _repository.getPatternThreshold(patternType);
  }

  /// 패턴 활성화/비활성화 설정
  void setPatternEnabled(PatternType patternType, bool enabled) {
    _repository.setPatternEnabled(patternType, enabled);
  }

  /// 패턴 활성화 상태 조회
  bool isPatternEnabled(PatternType patternType) {
    return _repository.isPatternEnabled(patternType);
  }

  /// 특정 패턴의 시그널 목록 초기화
  void clearPatternSignals(PatternType patternType) {
    _repository.clearSignals(patternType);
  }

  /// 모든 시그널 목록 초기화
  void clearAllSignals() {
    _repository.clearSignals(null);
  }

  // ==========================================================================
  // 🆕 V4.1 고급 패턴 설정 (비즈니스 규칙 포함)
  // ==========================================================================

  /// 고급 패턴 설정 업데이트 (비즈니스 규칙 검증)
  void updateAdvancedPatternConfig(PatternType pattern, String key, double value) {
    // 설정 키별 비즈니스 규칙 검증
    switch (key) {
      case 'zScoreThreshold':
        if (value < 0.5 || value > 5.0) {
          throw ArgumentError('Z-Score threshold must be between 0.5 and 5.0: $value');
        }
        break;
      case 'buyRatioMin':
        if (value < 0.0 || value > 1.0) {
          throw ArgumentError('Buy ratio must be between 0.0 and 1.0: $value');
        }
        break;
      case 'buyRatioMax':
        if (value < 0.0 || value > 1.0) {
          throw ArgumentError('Buy ratio max must be between 0.0 and 1.0: $value');
        }
        break;
      case 'cvThreshold':
        if (value < 0.001 || value > 0.5) {
          throw ArgumentError('CV threshold must be between 0.001 and 0.5: $value');
        }
        break;
      case 'rSquaredMin':
        if (value < 0.0 || value > 1.0) {
          throw ArgumentError('R-squared must be between 0.0 and 1.0: $value');
        }
        break;
      default:
        // 일반적인 양수 검증
        if (value < 0) {
          throw ArgumentError('Configuration value must be non-negative: $value');
        }
    }

    _repository.updatePatternConfig(pattern, key, value);
  }

  /// 패턴 프리셋 적용 (비즈니스 로직 검증)
  void applyPatternPreset(String presetName) {
    final validPresets = ['conservative', 'aggressive', 'balanced'];
    if (!validPresets.contains(presetName.toLowerCase())) {
      throw ArgumentError('Invalid preset name. Valid options: ${validPresets.join(', ')}');
    }

    _repository.applyPatternPreset(presetName);
  }

  // ==========================================================================
  // 🆕 V4.1 시스템 모니터링 및 분석
  // ==========================================================================

  /// 패턴별 성능 통계
  Future<PatternPerformanceStats> getPatternPerformance(PatternType pattern) async {
    final stats = await _repository.getPatternStats(pattern);
    final systemHealth = await _repository.getSystemHealth();
    
    return PatternPerformanceStats(
      patternType: pattern,
      totalSignals: stats['totalSignals'] ?? 0,
      recentSignals: stats['recentSignals'] ?? 0,
      lastSignalTime: stats['lastSignalTime'] != null 
          ? DateTime.parse(stats['lastSignalTime'])
          : null,
      isEnabled: stats['isEnabled'] ?? false,
      config: Map<String, double>.from(stats['config'] ?? {}),
      cooldownStatus: Map<String, dynamic>.from(stats['cooldownStatus'] ?? {}),
      onlineMetricsHealth: systemHealth['onlineMetricsSystem'],
    );
  }

  /// 전체 시스템 헬스 체크
  Future<SystemHealthReport> getSystemHealthReport() async {
    final health = await _repository.getSystemHealth();
    final dataQuality = _repository.getMarketDataQuality();
    
    return SystemHealthReport(
      version: health['version'] ?? 'Unknown',
      status: health['status'] ?? 'Unknown',
      uptime: health['uptime'] ?? 0,
      totalProcessedTrades: health['totalProcessedTrades'] ?? 0,
      activePatterns: health['activePatterns'] ?? 0,
      trackedMarkets: health['trackedMarkets'] ?? 0,
      onlineMetricsHealth: health['onlineMetricsSystem'],
      marketDataQuality: dataQuality,
      lastProcessingTime: health['lastProcessingTime'] != null 
          ? DateTime.parse(health['lastProcessingTime'])
          : null,
    );
  }

  /// 성능 메트릭스 스트림 (필터링 포함)
  Stream<PerformanceMetrics> watchFilteredPerformanceMetrics() {
    return _repository.watchPerformanceMetrics().map((raw) {
      return PerformanceMetrics(
        timestamp: DateTime.parse(raw['timestamp']),
        version: raw['version'] ?? 'Unknown',
        totalProcessedTrades: raw['totalProcessedTrades'] ?? 0,
        activeMarkets: raw['activeMarkets'] ?? 0,
        signalCounts: Map<String, int>.from(raw['signalCounts'] ?? {}),
        memoryUsage: Map<String, dynamic>.from(raw['memoryUsage'] ?? {}),
        onlineMetrics: Map<String, dynamic>.from(raw['onlineMetrics'] ?? {}),
        architecture: raw['architecture'] ?? 'Unknown',
      );
    });
  }

  // ==========================================================================
  // 시그널 분석 및 필터링 (개선된 로직)
  // ==========================================================================

  /// 시그널 통계 정보 계산 (V4.1 온라인 지표 포함)
  SignalStats calculateSignalStats(List<Signal> signals) {
    if (signals.isEmpty) {
      return const SignalStats(
        totalCount: 0,
        patternCounts: {},
        avgChangePercent: 0.0,
        maxChangePercent: 0.0,
        minChangePercent: 0.0,
        totalTradeAmount: 0.0,
        avgConfidence: 0.0,
        onlineMetricsCount: 0,
      );
    }

    final patternCounts = <PatternType, int>{};
    double totalChangePercent = 0.0;
    double maxChangePercent = signals.first.changePercent;
    double minChangePercent = signals.first.changePercent;
    double totalTradeAmount = 0.0;
    double totalConfidence = 0.0;
    int onlineMetricsCount = 0;

    for (final signal in signals) {
      // 패턴별 카운트
      patternCounts[signal.patternType] = 
          (patternCounts[signal.patternType] ?? 0) + 1;

      // 변화율 통계
      totalChangePercent += signal.changePercent;
      if (signal.changePercent > maxChangePercent) {
        maxChangePercent = signal.changePercent;
      }
      if (signal.changePercent < minChangePercent) {
        minChangePercent = signal.changePercent;
      }

      // 거래대금 합계
      totalTradeAmount += signal.tradeAmount;
      
      // V4.1 신뢰도 통계
      final confidence = signal.confidence ?? 0.0;
      totalConfidence += confidence;
      
      // V4.1 온라인 지표 기반 신호 카운트
      if (signal.hasOnlineMetrics) {
        onlineMetricsCount++;
      }
    }

    return SignalStats(
      totalCount: signals.length,
      patternCounts: patternCounts,
      avgChangePercent: totalChangePercent / signals.length,
      maxChangePercent: maxChangePercent,
      minChangePercent: minChangePercent,
      totalTradeAmount: totalTradeAmount,
      avgConfidence: totalConfidence / signals.length,
      onlineMetricsCount: onlineMetricsCount,
    );
  }

  /// 고급 시그널 필터링 (V4.1 확장)
  List<Signal> filterSignals(
    List<Signal> signals, {
    double? minChangePercent,
    double? maxChangePercent,
    double? minTradeAmount,
    double? maxTradeAmount,
    Set<PatternType>? patternTypes,
    Duration? timeWindow,
    double? minConfidence,
    bool? requireOnlineMetrics,
    Set<String>? markets,
  }) {
    return signals.where((signal) {
      // 기존 필터들
      if (minChangePercent != null && signal.changePercent < minChangePercent) {
        return false;
      }
      if (maxChangePercent != null && signal.changePercent > maxChangePercent) {
        return false;
      }
      if (minTradeAmount != null && signal.tradeAmount < minTradeAmount) {
        return false;
      }
      if (maxTradeAmount != null && signal.tradeAmount > maxTradeAmount) {
        return false;
      }
      if (patternTypes != null && !patternTypes.contains(signal.patternType)) {
        return false;
      }
      if (timeWindow != null) {
        final cutoff = DateTime.now().subtract(timeWindow);
        if (signal.detectedAt.isBefore(cutoff)) {
          return false;
        }
      }
      
      // V4.1 새로운 필터들
      if (minConfidence != null && (signal.confidence ?? 0.0) < minConfidence) {
        return false;
      }
      if (requireOnlineMetrics == true && !signal.hasOnlineMetrics) {
        return false;
      }
      if (markets != null && !markets.contains(signal.market)) {
        return false;
      }

      return true;
    }).toList();
  }

  // ==========================================================================
  // 🆕 V4.1 백테스팅 및 설정 관리
  // ==========================================================================

  /// 현재 설정 백업
  SignalConfiguration exportCurrentConfiguration() {
    final config = _repository.exportConfiguration();
    return SignalConfiguration.fromJson(config);
  }

  /// 설정 복원
  void importConfiguration(SignalConfiguration configuration) {
    _repository.importConfiguration(configuration.toJson());
  }

  /// 설정 비교 (A/B 테스트용)
  ConfigurationDiff compareConfigurations(
    SignalConfiguration configA,
    SignalConfiguration configB,
  ) {
    return ConfigurationDiff.compare(configA, configB);
  }

  // ==========================================================================
  // 리소스 정리
  // ==========================================================================

  /// 리소스 정리
  Future<void> dispose() async {
    await _repository.dispose();
  }
}

// ==========================================================================
// 🆕 V4.1 확장 데이터 클래스들
// ==========================================================================

/// V4.1 향상된 Signal 통계 정보
class SignalStats {
  final int totalCount;
  final Map<PatternType, int> patternCounts;
  final double avgChangePercent;
  final double maxChangePercent;
  final double minChangePercent;
  final double totalTradeAmount;
  final double avgConfidence;
  final int onlineMetricsCount;

  const SignalStats({
    required this.totalCount,
    required this.patternCounts,
    required this.avgChangePercent,
    required this.maxChangePercent,
    required this.minChangePercent,
    required this.totalTradeAmount,
    required this.avgConfidence,
    required this.onlineMetricsCount,
  });

  double get onlineMetricsRatio => 
      totalCount > 0 ? onlineMetricsCount / totalCount : 0.0;

   /// 🆕 V4.1 JSON 직렬화
  Map<String, dynamic> toJson() {
    return {
      'totalCount': totalCount,
      'patternCounts': patternCounts.map((k, v) => MapEntry(k.name, v)),
      'avgChangePercent': avgChangePercent,
      'maxChangePercent': maxChangePercent,
      'minChangePercent': minChangePercent,
      'totalTradeAmount': totalTradeAmount,
      'avgConfidence': avgConfidence,
      'onlineMetricsCount': onlineMetricsCount,
      'onlineMetricsRatio': onlineMetricsRatio,
    };
  }

  @override
  String toString() {
    return 'SignalStats(total: $totalCount, avg: ${avgChangePercent.toStringAsFixed(2)}%, '
        'confidence: ${(avgConfidence * 100).toStringAsFixed(1)}%, '
        'online: ${(onlineMetricsRatio * 100).toStringAsFixed(1)}%)';
  }
}

/// 패턴별 성능 통계
class PatternPerformanceStats {
  final PatternType patternType;
  final int totalSignals;
  final int recentSignals;
  final DateTime? lastSignalTime;
  final bool isEnabled;
  final Map<String, double> config;
  final Map<String, dynamic> cooldownStatus;
  final Map<String, dynamic>? onlineMetricsHealth;

  const PatternPerformanceStats({
    required this.patternType,
    required this.totalSignals,
    required this.recentSignals,
    this.lastSignalTime,
    required this.isEnabled,
    required this.config,
    required this.cooldownStatus,
    this.onlineMetricsHealth,
  });
}

/// 시스템 헬스 리포트
class SystemHealthReport {
  final String version;
  final String status;
  final int uptime;
  final int totalProcessedTrades;
  final int activePatterns;
  final int trackedMarkets;
  final Map<String, dynamic>? onlineMetricsHealth;
  final Map<String, dynamic> marketDataQuality;
  final DateTime? lastProcessingTime;

  const SystemHealthReport({
    required this.version,
    required this.status,
    required this.uptime,
    required this.totalProcessedTrades,
    required this.activePatterns,
    required this.trackedMarkets,
    this.onlineMetricsHealth,
    required this.marketDataQuality,
    this.lastProcessingTime,
  });

  bool get isHealthy => status == 'healthy';
}

/// 성능 메트릭스
class PerformanceMetrics {
  final DateTime timestamp;
  final String version;
  final int totalProcessedTrades;
  final int activeMarkets;
  final Map<String, int> signalCounts;
  final Map<String, dynamic> memoryUsage;
  final Map<String, dynamic> onlineMetrics;
  final String architecture;

  const PerformanceMetrics({
    required this.timestamp,
    required this.version,
    required this.totalProcessedTrades,
    required this.activeMarkets,
    required this.signalCounts,
    required this.memoryUsage,
    required this.onlineMetrics,
    required this.architecture,
  });
}

/// 설정 정보
class SignalConfiguration {
  final String version;
  final DateTime timestamp;
  final Map<String, dynamic> patternConfig;
  final Map<String, bool> patternEnabled;
  final Map<String, dynamic> systemSettings;

  const SignalConfiguration({
    required this.version,
    required this.timestamp,
    required this.patternConfig,
    required this.patternEnabled,
    required this.systemSettings,
  });

  factory SignalConfiguration.fromJson(Map<String, dynamic> json) {
    return SignalConfiguration(
      version: json['version'] ?? 'Unknown',
      timestamp: DateTime.parse(json['timestamp']),
      patternConfig: Map<String, dynamic>.from(json['patternConfig'] ?? {}),
      patternEnabled: Map<String, bool>.from(json['patternEnabled'] ?? {}),
      systemSettings: Map<String, dynamic>.from(json['systemSettings'] ?? {}),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'version': version,
      'timestamp': timestamp.toIso8601String(),
      'patternConfig': patternConfig,
      'patternEnabled': patternEnabled,
      'systemSettings': systemSettings,
    };
  }
}

/// 설정 비교 결과
class ConfigurationDiff {
  final List<String> changedPatterns;
  final List<String> changedSettings;
  final Map<String, dynamic> differences;

  const ConfigurationDiff({
    required this.changedPatterns,
    required this.changedSettings,
    required this.differences,
  });

  static ConfigurationDiff compare(
    SignalConfiguration configA,
    SignalConfiguration configB,
  ) {
    // 간단한 비교 로직 (실제로는 더 정교하게 구현)
    return const ConfigurationDiff(
      changedPatterns: [],
      changedSettings: [],
      differences: {},
    );
  }

  bool get hasChanges => changedPatterns.isNotEmpty || changedSettings.isNotEmpty;
}\n\n// ====== lib/domain/usecases/settings_usecase.dart ======\n
import 'package:flutter/material.dart';
import '../entities/app_settings.dart';
import '../repositories/settings_repository.dart';

/// 앱 설정 관련 비즈니스 로직
class SettingsUsecase {
 final SettingsRepository _repo;

 SettingsUsecase(this._repo);

 Future<AppSettings> getSettings() {
   return _repo.getSettings();
 }

 Future<void> updateThemeMode(ThemeMode mode) {
   return _repo.updateThemeMode(mode);
 }

 Future<void> updateKeepScreenOn(bool on) {
   return _repo.updateKeepScreenOn(on);
 }

 Future<void> updateSliderPosition(SliderPosition pos) {
   return _repo.updateSliderPosition(pos);
 }

 Future<void> updateDisplayMode(DisplayMode mode) {
   return _repo.updateDisplayMode(mode);
 }

 Future<void> updateAmountDisplayMode(AmountDisplayMode mode) {
   return _repo.updateAmountDisplayMode(mode);
 }

 Future<void> updateBlinkEnabled(bool enabled) {
   return _repo.updateBlinkEnabled(enabled);
 }

 Future<void> updateFontFamily(FontFamily font) {
   return _repo.updateFontFamily(font);
 }

 Future<void> updateHapticEnabled(bool enabled) {    // 🆕 추가
   return _repo.updateHapticEnabled(enabled);
 }

 Future<void> updatePortraitLocked(bool locked) {    // 🆕 추가
   return _repo.updatePortraitLocked(locked);
 }

 Future<void> clearCache() {
   return _repo.clearCache();
 }

 Future<void> resetSettings() {
   return _repo.resetSettings();
 }
}\n\n// ====== lib/domain/usecases/market_mood_usecase.dart ======\n
// lib/domain/usecases/market_mood_usecase.dart
// 🎯 Domain Layer: 비즈니스 로직 (순수 계산 알고리즘)

import 'dart:async';
import 'dart:math';
import '../entities/market_mood.dart';
import '../repositories/market_mood_repository.dart';

/// 💰 마켓 무드 계산기 (순수 비즈니스 로직)
class MarketMoodCalculator {
  static MarketMood calculateMoodByComparison(double current, double previous) {
    if (previous <= 0) return MarketMood.sideways;
    final changePercent = ((current - previous) / previous) * 100;
    
    // [수정] 요청하신 임계값 (10, 5, -5, -10)으로 변경
    if (changePercent >= 10) return MarketMood.bull;
    if (changePercent >= 5) return MarketMood.weakBull;
    if (changePercent >= -5) return MarketMood.sideways;
    if (changePercent >= -10) return MarketMood.bear;
    return MarketMood.deepBear;
  }

  static MarketMood calculateMoodByAbsolute(double volumeUsd) {
    if (volumeUsd >= 150e9) return MarketMood.bull;
    if (volumeUsd >= 100e9) return MarketMood.weakBull;
    if (volumeUsd >= 70e9) return MarketMood.sideways;
    if (volumeUsd >= 50e9) return MarketMood.bear;
    return MarketMood.deepBear;
  }
}

/// 🧮 볼륨 비교 계산기 (순수 계산 로직)
class VolumeComparator {
  final MarketMoodRepository _repository;

  VolumeComparator(this._repository);

  double _calculateChangePercent(double current, double previous) {
    if (previous <= 0) return 0.0;
    return ((current - previous) / previous) * 100;
  }

  double _calculateProgress(int targetMinutes) {
    final elapsed = DateTime.now().difference(_repository.getAppStartTime()).inMinutes;
    if (elapsed < targetMinutes) {
      return min(elapsed / targetMinutes, 1.0);
    }
    final cycleElapsed = (elapsed - targetMinutes) % targetMinutes;
    return cycleElapsed / targetMinutes;
  }

  double _calculateLongTermProgress(int targetMinutes) {
    final elapsed = DateTime.now().difference(_repository.getAppStartTime()).inMinutes;
    return min(elapsed / targetMinutes, 1.0);
  }

  Future<ComparisonResult> _compareGeneric({
    required double currentVolume,
    required int targetMinutes,
    required bool isLongTermAverage,
    required int daysForAverage,
  }) async {
    final elapsed = DateTime.now().difference(_repository.getAppStartTime()).inMinutes;

    if (isLongTermAverage) {
      if (elapsed < targetMinutes) {
        return ComparisonResult.collecting(_calculateLongTermProgress(targetMinutes));
      }
      final average = await _repository.getAverageVolume(daysForAverage);
      if (average == null) {
        return ComparisonResult.unavailable('샘플 부족');
      }
      return ComparisonResult.ready(_calculateChangePercent(currentVolume, average));
    }

    if (elapsed < targetMinutes) {
      return ComparisonResult.collecting(_calculateProgress(targetMinutes));
    }
    final past = await _repository.getVolumeNMinutesAgo(targetMinutes);
    if (past == null) {
      return ComparisonResult.collecting(_calculateProgress(targetMinutes));
    }
    return ComparisonResult.ready(_calculateChangePercent(currentVolume, past.volumeUsd));
  }

  Future<ComparisonResult> compare30Minutes(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 30, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare1Hour(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 60, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare2Hours(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 120, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare4Hours(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 240, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare8Hours(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 480, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare12Hours(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 720, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare24Hours(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 1440, isLongTermAverage: false, daysForAverage: 0);

  Future<ComparisonResult> compare3DayAverage(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 4320, isLongTermAverage: true, daysForAverage: 3);

  Future<ComparisonResult> compareWeeklyAverage(double currentVolume) =>
      _compareGeneric(currentVolume: currentVolume, targetMinutes: 10080, isLongTermAverage: true, daysForAverage: 7);

  /// [개선] 전체 비교 데이터 계산 (병렬 처리)
  Future<ComparisonData> calculateAll(double currentVolume) async {
    final results = await Future.wait([
      compare30Minutes(currentVolume),
      compare1Hour(currentVolume),
      compare2Hours(currentVolume),
      compare4Hours(currentVolume),
      compare8Hours(currentVolume),
      compare12Hours(currentVolume),
      compare24Hours(currentVolume),
      compare3DayAverage(currentVolume),
      compareWeeklyAverage(currentVolume),
    ]);

    return ComparisonData(
      thirtyMin: results[0],
      oneHour: results[1],
      twoHour: results[2],
      fourHour: results[3],
      eightHour: results[4],
      twelveHour: results[5],
      twentyFourHour: results[6],
      threeDayAverage: results[7],
      weeklyAverage: results[8],
    );
  }
}

/// 🎯 마켓무드 UseCase (전체 비즈니스 로직 조합) - Provider와 매칭
class MarketMoodUsecase {
  final MarketMoodRepository _repository;
  final VolumeComparator _comparator;

  MarketMoodUsecase(this._repository) : _comparator = VolumeComparator(_repository);

  Future<void> addVolumeData(double volumeUsd) async {
    final volumeData = VolumeData(
      timestamp: DateTime.now(),
      volumeUsd: volumeUsd,
    );
    await _repository.addVolumeData(volumeData);
  }

  /// [수정] 현재 마켓무드 계산 기준을 2시간으로 변경
  Future<MarketMood> calculateCurrentMood(double currentVolume) async {
    // 2시간 = 120분
    final twoHoursAgo = await _repository.getVolumeNMinutesAgo(120);
    
    if (twoHoursAgo != null) {
      return MarketMoodCalculator.calculateMoodByComparison(
        currentVolume, 
        twoHoursAgo.volumeUsd
      );
    }
    return MarketMoodCalculator.calculateMoodByAbsolute(currentVolume);
  }

  Future<ComparisonData> calculateVolumeComparison(double currentVolume) {
    return _comparator.calculateAll(currentVolume);
  }

  MarketMoodSystemState createSystemState({
    required MarketMoodData? marketData,
    required ComparisonData comparisonData,
    required MarketMood currentMood,
    required double exchangeRate,
    required bool isLoading,
    required bool hasError,
  }) {
    return MarketMoodSystemState(
      marketData: marketData,
      comparisonData: comparisonData,
      currentMood: currentMood,
      exchangeRate: exchangeRate,
      isLoading: isLoading,
      hasError: hasError,
    );
  }

  String generateMoodSummary(MarketMood mood) {
    switch (mood) {
      case MarketMood.bull: return '🚀 불장';
      case MarketMood.weakBull: return '🔥 약불장';
      case MarketMood.sideways: return '⚖️ 중간장';
      case MarketMood.bear: return '💧 물장';
      case MarketMood.deepBear: return '🧊 얼음장';
    }
  }

  Future<void> handleBackgroundResume() async {
    await _repository.syncMissingData();
  }

  Future<Map<String, dynamic>> getSystemHealth() async {
    return await _repository.getSystemHealth();
  }

  Future<void> logSystemStatus() async {
    await _repository.logCurrentStatus();
  }

  Future<int> getCollectedDataCount() async {
    return await _repository.getCollectedDataCount();
  }

  DateTime getAppStartTime() {
    return _repository.getAppStartTime();
  }

  Future<double> getExchangeRate() async {
    return await _repository.getExchangeRate();
  }

  Future<void> refreshExchangeRate() async {
    await _repository.refreshExchangeRate();
  }
}\n\n// ====== lib/domain/usecases/volume_usecase.dart ======\n
// lib/domain/usecases/volume_usecase.dart

import 'dart:async';
import '../../core/error/app_exception.dart';
import '../../core/extensions/result.dart';
import '../entities/volume.dart';
import '../repositories/volume_repository.dart';

/// Volume 관련 비즈니스 로직을 제공하는 UseCase
class VolumeUsecase {
  final VolumeRepository _repository;

  VolumeUsecase(this._repository);

  /// 시간대별 볼륨 랭킹 스트림 반환 (에러 처리 포함)
  Stream<Result<List<Volume>, AppException>> getVolumeRanking(
    String timeFrame,
    List<String> markets,
  ) {
    return _repository
        .watchVolumeByTimeFrame(timeFrame, markets)
        .transform(_wrapWithErrorHandling<List<Volume>>('Volume ranking failed'));
  }

  /// 특정 시간대 수동 리셋
  Result<void, AppException> resetTimeFrame(String timeFrame) {
    try {
      _repository.resetTimeFrame(timeFrame);
      return const Ok(null);
    } catch (e) {
      return Err(AppException('Reset timeframe failed: $e'));
    }
  }

  /// 모든 시간대 수동 리셋
  Result<void, AppException> resetAllTimeFrames() {
    try {
      _repository.resetAllTimeFrames();
      return const Ok(null);
    } catch (e) {
      return Err(AppException('Reset all timeframes failed: $e'));
    }
  }

  /// 다음 리셋 시간 조회
  Result<DateTime?, AppException> getNextResetTime(String timeFrame) {
    try {
      final resetTime = _repository.getNextResetTime(timeFrame);
      return Ok(resetTime);
    } catch (e) {
      return Err(AppException('Get reset time failed: $e'));
    }
  }

  /// 활성 시간대 목록 조회
  Result<List<String>, AppException> getActiveTimeFrames() {
    try {
      final timeFrames = _repository.getActiveTimeFrames();
      return Ok(timeFrames);
    } catch (e) {
      return Err(AppException('Get active timeframes failed: $e'));
    }
  }

  /// 시간대 유효성 검증
  Result<bool, AppException> validateTimeFrame(String timeFrame) {
    try {
      final isActive = _repository.isTimeFrameActive(timeFrame);
      return Ok(isActive);
    } catch (e) {
      return Err(AppException('Validate timeframe failed: $e'));
    }
  }

  /// 볼륨 데이터 유효성 검증 (비즈니스 로직)
  Result<List<Volume>, AppException> validateVolumeData(List<Volume> volumes) {
    try {
      // 비즈니스 규칙: 볼륨이 있는 것만, 중복 제거, 정렬 확인
      final validVolumes = volumes
          .where((v) => v.hasVolume && v.market.isNotEmpty)
          .toSet() // 중복 제거
          .toList();

      // 정렬 확인 (볼륨 내림차순)
      final isSorted = _isVolumeSorted(validVolumes);
      if (!isSorted) {
        validVolumes.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
      }

      return Ok(validVolumes);
    } catch (e) {
      return Err(AppException('Volume data validation failed: $e'));
    }
  }

  /// 시간대별 볼륨 비교 (비즈니스 로직)
  Result<Map<String, double>, AppException> compareVolumeAcrossTimeFrames(
    String market,
    List<String> timeFrames,
  ) {
    try {
      // 여러 시간대의 특정 코인 볼륨 비교
      // 실제 구현은 Repository에서 여러 스트림을 조합해야 함
      final comparison = <String, double>{};
      
      // TODO: 실제 구현 시 여러 timeFrame의 데이터를 조합
      // 현재는 단순 예시
      for (final tf in timeFrames) {
        comparison[tf] = 0.0; // 실제 데이터 조회 필요
      }
      
      return Ok(comparison);
    } catch (e) {
      return Err(AppException('Volume comparison failed: $e'));
    }
  }

  /// 헬퍼: 볼륨 정렬 확인
  bool _isVolumeSorted(List<Volume> volumes) {
    if (volumes.length <= 1) return true;
    
    for (int i = 0; i < volumes.length - 1; i++) {
      if (volumes[i].totalVolume < volumes[i + 1].totalVolume) {
        return false;
      }
    }
    return true;
  }

  /// 헬퍼: 에러 처리 변환기
  StreamTransformer<T, Result<T, AppException>> _wrapWithErrorHandling<T>(String errorMsg) {
    return StreamTransformer.fromHandlers(
      handleData: (data, sink) => sink.add(Ok(data)),
      handleError: (error, stack, sink) =>
          sink.add(Err(AppException('$errorMsg: $error'))),
    );
  }
}\n\n// ====== lib/domain/usecases/surge_usecase.dart ======\n
// lib/domain/usecases/surge_usecase.dart
import 'dart:async';
import '../../core/error/app_exception.dart';
import '../../core/extensions/result.dart';
import '../entities/surge.dart';
import '../repositories/surge_repository.dart';

/// Surge(급등/급락) 관련 비즈니스 로직을 제공하는 UseCase
class SurgeUsecase {
  final SurgeRepository _repository;

  SurgeUsecase(this._repository);

  /// 시간대별 급등/급락 랭킹 스트림 반환 (에러 처리 포함)
  Stream<Result<List<Surge>, AppException>> getSurgeRanking(
    String timeFrame,
    List<String> markets,
  ) {
    return _repository
        .watchSurgeByTimeFrame(timeFrame, markets)
        .transform(_wrapWithErrorHandling<List<Surge>>('Surge ranking failed'));
  }

  /// 특정 시간대 수동 리셋
  Result<void, AppException> resetTimeFrame(String timeFrame) {
    try {
      _repository.resetTimeFrame(timeFrame);
      return const Ok(null);
    } catch (e) {
      return Err(AppException('Reset timeframe failed: $e'));
    }
  }

  /// 모든 시간대 수동 리셋
  Result<void, AppException> resetAllTimeFrames() {
    try {
      _repository.resetAllTimeFrames();
      return const Ok(null);
    } catch (e) {
      return Err(AppException('Reset all timeframes failed: $e'));
    }
  }

  /// 다음 리셋 시간 조회
  Result<DateTime?, AppException> getNextResetTime(String timeFrame) {
    try {
      final resetTime = _repository.getNextResetTime(timeFrame);
      return Ok(resetTime);
    } catch (e) {
      return Err(AppException('Get reset time failed: $e'));
    }
  }

  /// 활성 시간대 목록 조회
  Result<List<String>, AppException> getActiveTimeFrames() {
    try {
      final timeFrames = _repository.getActiveTimeFrames();
      return Ok(timeFrames);
    } catch (e) {
      return Err(AppException('Get active timeframes failed: $e'));
    }
  }

  /// 시간대 유효성 검증
  Result<bool, AppException> validateTimeFrame(String timeFrame) {
    try {
      final isActive = _repository.isTimeFrameActive(timeFrame);
      return Ok(isActive);
    } catch (e) {
      return Err(AppException('Validate timeframe failed: $e'));
    }
  }

  /// 급등/급락 데이터 유효성 검증 (비즈니스 로직)
  Result<List<Surge>, AppException> validateSurgeData(List<Surge> surges) {
    try {
      // 비즈니스 규칙: 변동이 있는 것만, 중복 제거, 정렬 확인
      final validSurges = surges
          .where((s) => s.hasChange && s.market.isNotEmpty)
          .toSet() // 중복 제거
          .toList();

      // 정렬 확인 (변동률 절댓값 내림차순)
      final isSorted = _isSurgeSorted(validSurges);
      if (!isSorted) {
        validSurges.sort((a, b) => b.absChangePercent.compareTo(a.absChangePercent));
      }

      return Ok(validSurges);
    } catch (e) {
      return Err(AppException('Surge data validation failed: $e'));
    }
  }

  /// 급등/급락 필터링 (비즈니스 로직)
  Result<List<Surge>, AppException> filterSurgesByType(
    List<Surge> surges,
    SurgeFilterType filterType,
  ) {
    try {
      List<Surge> filtered;
      
      switch (filterType) {
        case SurgeFilterType.all:
          filtered = surges;
          break;
        case SurgeFilterType.risingOnly:
          filtered = surges.where((s) => s.isRising).toList();
          break;
        case SurgeFilterType.fallingOnly:
          filtered = surges.where((s) => s.isFalling).toList();
          break;
      }

      return Ok(filtered);
    } catch (e) {
      return Err(AppException('Surge filtering failed: $e'));
    }
  }

  /// 시간대별 급등/급락 비교 (비즈니스 로직)
  Result<Map<String, double>, AppException> compareSurgeAcrossTimeFrames(
    String market,
    List<String> timeFrames,
  ) {
    try {
      // 여러 시간대의 특정 코인 변동률 비교
      // 실제 구현은 Repository에서 여러 스트림을 조합해야 함
      final comparison = <String, double>{};
      
      // TODO: 실제 구현 시 여러 timeFrame의 데이터를 조합
      // 현재는 단순 예시
      for (final tf in timeFrames) {
        comparison[tf] = 0.0; // 실제 데이터 조회 필요
      }
      
      return Ok(comparison);
    } catch (e) {
      return Err(AppException('Surge comparison failed: $e'));
    }
  }

  /// 급등/급락 통계 계산 (비즈니스 로직)
  Result<SurgeStatistics, AppException> calculateSurgeStatistics(List<Surge> surges) {
    try {
      if (surges.isEmpty) {
        return Ok(SurgeStatistics.empty());
      }

      final risingCount = surges.where((s) => s.isRising).length;
      final fallingCount = surges.where((s) => s.isFalling).length;
      final maxRising = surges.where((s) => s.isRising).isNotEmpty 
          ? surges.where((s) => s.isRising).map((s) => s.changePercent).reduce((a, b) => a > b ? a : b)
          : 0.0;
      final maxFalling = surges.where((s) => s.isFalling).isNotEmpty 
          ? surges.where((s) => s.isFalling).map((s) => s.changePercent).reduce((a, b) => a < b ? a : b)
          : 0.0;

      return Ok(SurgeStatistics(
        totalCount: surges.length,
        risingCount: risingCount,
        fallingCount: fallingCount,
        maxRisingPercent: maxRising,
        maxFallingPercent: maxFalling,
      ));
    } catch (e) {
      return Err(AppException('Surge statistics calculation failed: $e'));
    }
  }

  /// 헬퍼: 급등/급락 정렬 확인
  bool _isSurgeSorted(List<Surge> surges) {
    if (surges.length <= 1) return true;
    
    for (int i = 0; i < surges.length - 1; i++) {
      if (surges[i].absChangePercent < surges[i + 1].absChangePercent) {
        return false;
      }
    }
    return true;
  }

  /// 헬퍼: 에러 처리 변환기
  StreamTransformer<T, Result<T, AppException>> _wrapWithErrorHandling<T>(String errorMsg) {
    return StreamTransformer.fromHandlers(
      handleData: (data, sink) => sink.add(Ok(data)),
      handleError: (error, stack, sink) =>
          sink.add(Err(AppException('$errorMsg: $error'))),
    );
  }
}

/// 급등/급락 필터 타입
enum SurgeFilterType {
  all,            // 전체 (급등 + 급락)
  risingOnly,     // 상승만
  fallingOnly,    // 하락만
}

/// 급등/급락 통계 데이터
class SurgeStatistics {
  final int totalCount;
  final int risingCount;
  final int fallingCount;
  final double maxRisingPercent;
  final double maxFallingPercent;

  const SurgeStatistics({
    required this.totalCount,
    required this.risingCount,
    required this.fallingCount,
    required this.maxRisingPercent,
    required this.maxFallingPercent,
  });

  factory SurgeStatistics.empty() {
    return const SurgeStatistics(
      totalCount: 0,
      risingCount: 0,
      fallingCount: 0,
      maxRisingPercent: 0.0,
      maxFallingPercent: 0.0,
    );
  }

  /// 급등 비율 (0.0 ~ 1.0)
  double get risingRatio => totalCount > 0 ? risingCount / totalCount : 0.0;
  
  /// 급락 비율 (0.0 ~ 1.0)
  double get fallingRatio => totalCount > 0 ? fallingCount / totalCount : 0.0;
  
  /// 급등 우세 여부
  bool get isRisingDominant => risingCount > fallingCount;
  
  /// 급락 우세 여부
  bool get isFallingDominant => fallingCount > risingCount;
}\n\n// ====== lib/domain/usecases/trade_usecase.dart ======\n
// lib/domain/usecases/trade_usecase.dart

import 'dart:async';
import '../../core/error/app_exception.dart';
import '../../core/extensions/result.dart';
import '../entities/trade.dart';
import '../repositories/trade_repository.dart';

/// Trade 관련 비즈니스 로직을 제공하는 UseCase
class TradeUsecase {
  final TradeRepository _repository;

  TradeUsecase(this._repository);

  /// threshold와 markets를 기준으로 필터링된 거래 목록 스트림 반환
  Stream<Result<List<Trade>, AppException>> filterTrades(
    double threshold,
    List<String> markets,
  ) {
    return _repository
        .watchFilteredTrades(threshold, markets)
        .transform(_wrap<List<Trade>>('Filter trades failed'));
  }

  /// 집계된 거래 스트림 반환
  Stream<Result<Trade, AppException>> aggregateTrades() {
    return _repository
        .watchAggregatedTrades()
        .transform(_wrap<Trade>('Aggregate trades failed'));
  }

  StreamTransformer<T, Result<T, AppException>> _wrap<T>(String errorMsg) {
    return StreamTransformer.fromHandlers(
      handleData: (data, sink) => sink.add(Ok(data)),
      handleError: (error, stack, sink) =>
          sink.add(Err(AppException('$errorMsg: $error'))),
    );
  }
}\n\n// ====== lib/domain/usecases/filter_params.dart ======\n
// ===== lib/domain/usecases/filter_params.dart =====
import '../entities/signal.dart'; // PatternType import 추가

class FilterParams {
  final double? minChangePercent;
  final double? maxChangePercent;
  final double? minTradeAmount;
  final double? maxTradeAmount;
  final Set<PatternType>? patternTypes; // ✅ 수정: 올바른 import
  final Duration? timeWindow;
  final double? minSeverityScore;

  const FilterParams({
    this.minChangePercent,
    this.maxChangePercent,
    this.minTradeAmount,
    this.maxTradeAmount,
    this.patternTypes, // ✅ 수정: 올바른 import
    this.timeWindow,
    this.minSeverityScore,
  });

  FilterParams copyWith({
    double? minChangePercent,
    double? maxChangePercent,
    double? minTradeAmount,
    double? maxTradeAmount,
    Set<PatternType>? patternTypes, // ✅ 수정: 올바른 import
    Duration? timeWindow,
    double? minSeverityScore,
  }) {
    return FilterParams(
      minChangePercent: minChangePercent ?? this.minChangePercent,
      maxChangePercent: maxChangePercent ?? this.maxChangePercent,
      minTradeAmount: minTradeAmount ?? this.minTradeAmount,
      maxTradeAmount: maxTradeAmount ?? this.maxTradeAmount,
      patternTypes: patternTypes ?? this.patternTypes,
      timeWindow: timeWindow ?? this.timeWindow,
      minSeverityScore: minSeverityScore ?? this.minSeverityScore,
    );
  }
}
\n\n// ====== lib/domain/entities/app_settings.dart ======\n
import 'package:flutter/material.dart';
import 'package:equatable/equatable.dart';

/// 슬라이더 위치를 표현하는 enum
enum SliderPosition { top, bottom }

/// 🆕 코인명 표시 방식을 표현하는 enum
enum DisplayMode {
 ticker, // BTC, ETH, XRP
 korean, // 비트코인, 이더리움, 리플
 english, // Bitcoin, Ethereum, Ripple
}

/// 💰 금액 표시 방식을 표현하는 enum
enum AmountDisplayMode {
 number, // 1,234만 (숫자)
 icon, // 💵 (아이콘)
}

/// 🔤 폰트 패밀리를 표현하는 enum (✨ pubspec.yaml 기준으로 정리)
enum FontFamily {
 // --- 기본 ---
 pretendard,
 // --- 전체 추가 폰트 ---
 dotGothic16,
 dynaPuff,
 gloriaHallelujah,
 gowunDodum,
 gugi,
 ibmPlexSansKRLight,
 inconsolata,
 kirangHaerang,
 nanumGothicCoding,
 notoSerifKR,
 novaMono,
 novaSquare,
 permanentMarker,
 pixelifySans,
 sunflowerLight,
 syneMono;

 // 실제 폰트명 매핑 (✨ pubspec.yaml 기준으로 정리)
 String get fontName {
   switch (this) {
     case FontFamily.pretendard: return 'Pretendard';
     case FontFamily.dotGothic16: return 'DotGothic16-Regular';
     case FontFamily.dynaPuff: return 'DynaPuff-VariableFont_wdth,wght';
     case FontFamily.gloriaHallelujah: return 'GloriaHallelujah-Regular';
     case FontFamily.gowunDodum: return 'GowunDodum-Regular';
     case FontFamily.gugi: return 'Gugi-Regular';
     case FontFamily.ibmPlexSansKRLight: return 'IBMPlexSansKR-Light';
     case FontFamily.inconsolata: return 'Inconsolata-VariableFont_wdth,wght';
     case FontFamily.kirangHaerang: return 'KirangHaerang-Regular';
     case FontFamily.nanumGothicCoding: return 'NanumGothicCoding-Regular';
     case FontFamily.notoSerifKR: return 'NotoSerifKR-VariableFont_wght';
     case FontFamily.novaMono: return 'NovaMono-Regular';
     case FontFamily.novaSquare: return 'NovaSquare-Regular';
     case FontFamily.permanentMarker: return 'PermanentMarker-Regular';
     case FontFamily.pixelifySans: return 'PixelifySans-VariableFont_wght';
     case FontFamily.sunflowerLight: return 'Sunflower-Light';
     case FontFamily.syneMono: return 'SyneMono-Regular';
   }
 }
}

class AppSettings extends Equatable {
 final ThemeMode themeMode;
 final bool keepScreenOn;
 final SliderPosition sliderPosition;
 final DisplayMode displayMode;
 final AmountDisplayMode amountDisplayMode;
 final bool blinkEnabled;
 final FontFamily fontFamily;
 final bool isHapticEnabled;      // 🆕 햅틱 피드백 설정
 final bool isPortraitLocked;     // 🆕 화면 회전 잠금 설정

 const AppSettings({
   this.themeMode = ThemeMode.system,
   this.keepScreenOn = false,
   this.sliderPosition = SliderPosition.top,
   this.displayMode = DisplayMode.ticker,
   this.amountDisplayMode = AmountDisplayMode.number,
   this.blinkEnabled = true,
   this.fontFamily = FontFamily.pretendard,
   this.isHapticEnabled = true,      // 🆕 기본값: 활성화
   this.isPortraitLocked = false,    // 🆕 기본값: 자동 회전
 });

 AppSettings copyWith({
   ThemeMode? themeMode,
   bool? keepScreenOn,
   SliderPosition? sliderPosition,
   DisplayMode? displayMode,
   AmountDisplayMode? amountDisplayMode,
   bool? blinkEnabled,
   FontFamily? fontFamily,
   bool? isHapticEnabled,           // 🆕 추가
   bool? isPortraitLocked,          // 🆕 추가
 }) =>
     AppSettings(
       themeMode: themeMode ?? this.themeMode,
       keepScreenOn: keepScreenOn ?? this.keepScreenOn,
       sliderPosition: sliderPosition ?? this.sliderPosition,
       displayMode: displayMode ?? this.displayMode,
       amountDisplayMode: amountDisplayMode ?? this.amountDisplayMode,
       blinkEnabled: blinkEnabled ?? this.blinkEnabled,
       fontFamily: fontFamily ?? this.fontFamily,
       isHapticEnabled: isHapticEnabled ?? this.isHapticEnabled,        // 🆕 추가
       isPortraitLocked: isPortraitLocked ?? this.isPortraitLocked,     // 🆕 추가
     );

 @override
 List<Object?> get props => [
   themeMode,
   keepScreenOn,
   sliderPosition,
   displayMode,
   amountDisplayMode,
   blinkEnabled,
   fontFamily,
   isHapticEnabled,      // 🆕 추가
   isPortraitLocked,     // 🆕 추가
 ];
}\n\n// ====== lib/domain/entities/momentary.dart ======\n
\n\n// ====== lib/domain/entities/trade.dart ======\n
import 'package:equatable/equatable.dart';

/// 순수 도메인 모델: 비즈니스 로직만 포함
class Trade extends Equatable {
  /// 시장 코드 (예: "KRW-BTC")
  final String market;

  /// 체결 단가
  final double price;

  /// 체결 수량
  final double volume;

  /// 'BID' 또는 'ASK'
  final String side;

  /// 가격 변동량
  final double changePrice;

  /// 변동 상태 ('RISE'/'FALL'/'EVEN')
  final String changeState;

  /// UTC 밀리초 타임스탬프
  final int timestampMs;

  /// 중복 제거용 고유 ID
  final String sequentialId;

  const Trade({
    required this.market,
    required this.price,
    required this.volume,
    required this.side,
    required this.changePrice,
    required this.changeState,
    required this.timestampMs,
    required this.sequentialId,
  });

  @override
  List<Object?> get props => [
        market,
        price,
        volume,
        side,
        changePrice,
        changeState,
        timestampMs,
        sequentialId,
      ];

  /// 총 체결 금액
  double get total => price * volume;

  /// 매수 여부
  bool get isBuy => side == 'BID';

  /// DateTime 변환
  DateTime get timestamp => DateTime.fromMillisecondsSinceEpoch(timestampMs);
}
\n\n// ====== lib/domain/entities/surge.dart ======\n
// lib/domain/entities/surge.dart
import 'package:equatable/equatable.dart';
import '../../core/config/app_config.dart';

/// 순수 도메인 모델: 급등/급락 데이터 비즈니스 로직
class Surge extends Equatable {
  /// 시장 코드 (예: "KRW-BTC")
  final String market;
  
  /// 해당 시간대 변동률 (퍼센트 기준)
  final double changePercent;
  
  /// 시간대 시작 가격
  final double basePrice;
  
  /// 현재 가격
  final double currentPrice;
  
  /// 마지막 업데이트 시간 (UTC 밀리초)
  final int lastUpdatedMs;
  
  /// 시간대 (예: "1m", "5m", "15m")
  final String timeFrame;
  
  /// 해당 시간대 시작 시간 (UTC 밀리초)
  final int timeFrameStartMs;

  const Surge({
    required this.market,
    required this.changePercent,
    required this.basePrice,
    required this.currentPrice,
    required this.lastUpdatedMs,
    required this.timeFrame,
    required this.timeFrameStartMs,
  });

  @override
  List<Object?> get props => [
    market,
    changePercent,
    basePrice,
    currentPrice,
    lastUpdatedMs,
    timeFrame,
    timeFrameStartMs,
  ];

  /// 마지막 업데이트 DateTime 변환
  DateTime get lastUpdated => DateTime.fromMillisecondsSinceEpoch(lastUpdatedMs);
  
  /// 시간대 시작 DateTime 변환
  DateTime get timeFrameStart => DateTime.fromMillisecondsSinceEpoch(timeFrameStartMs);
  
  /// 시간대 종료 예정 시간
  DateTime get timeFrameEnd {
    final duration = _getTimeFrameDuration();
    return timeFrameStart.add(duration);
  }
  
  /// 현재 시간대 남은 시간 (초)
  int get remainingSeconds {
    final now = DateTime.now();
    final remaining = timeFrameEnd.difference(now).inSeconds;
    return remaining > 0 ? remaining : 0;
  }
  
  /// 현재 시간대 남은 시간 포맷 (예: "3:42", "12:18")
  String get remainingTimeFormatted {
    final remaining = remainingSeconds;
    if (remaining <= 0) return "00:00";
    
    final hours = remaining ~/ 3600;
    final minutes = (remaining % 3600) ~/ 60;
    final seconds = remaining % 60;
    
    if (hours > 0) {
      return "${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}";
    } else {
      return "${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}";
    }
  }
  
  /// 시간대별 Duration 계산 (AppConfig.timeFrames 활용)
  Duration _getTimeFrameDuration() {
    // timeFrame에서 분 단위 추출 ("15m" → 15)
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    if (minutes != null && AppConfig.timeFrames.contains(minutes)) {
      return Duration(minutes: minutes);
    }
    return const Duration(minutes: 15); // 기본값
  }
  
  /// 변동이 유의미한지 체크 (0이 아님)
  bool get hasChange => changePercent != 0;
  
  /// 급등인지 체크 (양수)
  bool get isRising => changePercent > 0;
  
  /// 급락인지 체크 (음수)
  bool get isFalling => changePercent < 0;
  
  /// 변동률 절댓값
  double get absChangePercent => changePercent.abs();
  
  /// 코인 티커만 추출 (KRW- 제거)
  String get ticker => market.replaceFirst('KRW-', '');
  
  /// 변동률 포맷팅 (예: "+12.34%", "-5.67%")
  String get formattedChangePercent {
    final sign = changePercent >= 0 ? '+' : '';
    return '$sign${changePercent.toStringAsFixed(2)}%';
  }
  
  /// 복사본 생성 (불변성 유지)
  Surge copyWith({
    String? market,
    double? changePercent,
    double? basePrice,
    double? currentPrice,
    int? lastUpdatedMs,
    String? timeFrame,
    int? timeFrameStartMs,
  }) {
    return Surge(
      market: market ?? this.market,
      changePercent: changePercent ?? this.changePercent,
      basePrice: basePrice ?? this.basePrice,
      currentPrice: currentPrice ?? this.currentPrice,
      lastUpdatedMs: lastUpdatedMs ?? this.lastUpdatedMs,
      timeFrame: timeFrame ?? this.timeFrame,
      timeFrameStartMs: timeFrameStartMs ?? this.timeFrameStartMs,
    );
  }
}\n\n// ====== lib/domain/entities/volume.dart ======\n
// lib/domain/entities/volume.dart

import 'package:equatable/equatable.dart';
import '../../core/config/app_config.dart';

/// 순수 도메인 모델: 볼륨 데이터 비즈니스 로직
class Volume extends Equatable {
  /// 시장 코드 (예: "KRW-BTC")
  final String market;
  
  /// 해당 시간대 총 거래량 (원화 기준)
  final double totalVolume;
  
  /// 마지막 업데이트 시간 (UTC 밀리초)
  final int lastUpdatedMs;
  
  /// 시간대 (예: "1m", "5m", "15m")
  final String timeFrame;
  
  /// 해당 시간대 시작 시간 (UTC 밀리초)
  final int timeFrameStartMs;

  const Volume({
    required this.market,
    required this.totalVolume,
    required this.lastUpdatedMs,
    required this.timeFrame,
    required this.timeFrameStartMs,
  });

  @override
  List<Object?> get props => [
    market,
    totalVolume,
    lastUpdatedMs,
    timeFrame,
    timeFrameStartMs,
  ];

  /// 마지막 업데이트 DateTime 변환
  DateTime get lastUpdated => DateTime.fromMillisecondsSinceEpoch(lastUpdatedMs);
  
  /// 시간대 시작 DateTime 변환
  DateTime get timeFrameStart => DateTime.fromMillisecondsSinceEpoch(timeFrameStartMs);
  
  /// 시간대 종료 예정 시간
  DateTime get timeFrameEnd {
    final duration = _getTimeFrameDuration();
    return timeFrameStart.add(duration);
  }
  
  /// 현재 시간대 남은 시간 (초)
  int get remainingSeconds {
    final now = DateTime.now();
    final remaining = timeFrameEnd.difference(now).inSeconds;
    return remaining > 0 ? remaining : 0;
  }
  
  /// 현재 시간대 남은 시간 포맷 (예: "3:42", "12:18")
  String get remainingTimeFormatted {
    final remaining = remainingSeconds;
    if (remaining <= 0) return "00:00";
    
    final hours = remaining ~/ 3600;
    final minutes = (remaining % 3600) ~/ 60;
    final seconds = remaining % 60;
    
    if (hours > 0) {
      return "${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}";
    } else {
      return "${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}";
    }
  }
  
  /// 시간대별 Duration 계산 (AppConfig.timeFrames 활용)
  Duration _getTimeFrameDuration() {
    // timeFrame에서 분 단위 추출 ("15m" → 15)
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    if (minutes != null && AppConfig.timeFrames.contains(minutes)) {
      return Duration(minutes: minutes);
    }
    return const Duration(minutes: 15); // 기본값
  }
  
  /// 볼륨이 유의미한지 체크 (0보다 큼)
  bool get hasVolume => totalVolume > 0;
  
  /// 코인 티커만 추출 (KRW- 제거)
  String get ticker => market.replaceFirst('KRW-', '');
  
  /// 복사본 생성 (불변성 유지)
  Volume copyWith({
    String? market,
    double? totalVolume,
    int? lastUpdatedMs,
    String? timeFrame,
    int? timeFrameStartMs,
  }) {
    return Volume(
      market: market ?? this.market,
      totalVolume: totalVolume ?? this.totalVolume,
      lastUpdatedMs: lastUpdatedMs ?? this.lastUpdatedMs,
      timeFrame: timeFrame ?? this.timeFrame,
      timeFrameStartMs: timeFrameStartMs ?? this.timeFrameStartMs,
    );
  }
}\n\n// ====== lib/domain/entities/signal.dart ======\n
// lib/domain/entities/signal.dart

/// 🚀 Signal Entity V4.1 - 온라인 지표 연동
/// 
/// 주요 개선사항:
/// - 온라인 RSI/MACD 정보 포함
/// - 다이버전스 감지 결과
/// - 신뢰도 동적 조정
/// - 스트림 건강성 정보
/// - 패턴별 고급 메타데이터

/// Signal 패턴 타입 정의 (V4.1 확장)
enum PatternType {
  surge,       // 1. 급등 (1분 전 대비 0.4% 상승)
  flashFire,   // 2. 불티🔥 (3분 거래대금 급증)
  stackUp,     // 3. 스택업💰 (1분씩 연속 증가)
  stealthIn,   // 4. 침투자👣 (소량 지속 유입) - 완화됨
  blackHole,   // 5. 블랙홀🕳️ (거래대금↑ 가격변동↓) - 완화됨
  reboundShot, // 6. 쇼트터치⚡ (급락 후 반등)
}

extension PatternTypeExtension on PatternType {
  String get displayName {
    switch (this) {
      case PatternType.surge:
        return '급등';
      case PatternType.flashFire:
        return '불티🔥';
      case PatternType.stackUp:
        return '스택업💰';
      case PatternType.stealthIn:
        return '침투자👣';
      case PatternType.blackHole:
        return '블랙홀🕳️';
      case PatternType.reboundShot:
        return '쇼트터치⚡';
    }
  }

  String get description {
    switch (this) {
      case PatternType.surge:
        return '1분 전 대비 0.4% 이상 상승 (V4.1)';
      case PatternType.flashFire:
        return '3분 거래대금 급증 + RSI 확인';
      case PatternType.stackUp:
        return '연속 매집 + MACD 모멘텀';
      case PatternType.stealthIn:
        return '은밀한 유입 (완화된 기준)';
      case PatternType.blackHole:
        return '이상 체결 (완화된 기준)';
      case PatternType.reboundShot:
        return '과매도 반등 + 온라인 지표';
    }
  }

  /// V4.1 패턴별 기본 임계값 (완화됨)
  double get defaultThreshold {
    switch (this) {
      case PatternType.surge:
        return 0.4; // 0.4% 상승 (기존 1.1%에서 완화)
      case PatternType.flashFire:
        return 2.0; // 2배 급증
      case PatternType.stackUp:
        return 2.0; // 2연속 (기존 3에서 완화)
      case PatternType.stealthIn:
        return 5000000.0; // 500만원 (기존 2000만에서 대폭 완화)
      case PatternType.blackHole:
        return 2.0; // 2% 이하 변동 (기존 1%에서 완화)
      case PatternType.reboundShot:
        return 1.5; // 1.5% 급락 후 반등
    }
  }

  /// 패턴별 시간 윈도우 (분)
  int get timeWindowMinutes {
    switch (this) {
      case PatternType.surge:
        return 1; // 1분
      case PatternType.flashFire:
        return 1; // 1분 (V4.1 단축)
      case PatternType.stackUp:
        return 1; // 1분
      case PatternType.stealthIn:
        return 5; // 5분
      case PatternType.blackHole:
        return 5; // 5분 (V4.1 확장)
      case PatternType.reboundShot:
        return 1; // 1분
    }
  }

  /// V4.1 패턴별 기본 쿨다운 시간 (초)
  int get defaultCooldownSeconds {
    switch (this) {
      case PatternType.surge:
        return 3; // 빠른 감지
      case PatternType.flashFire:
        return 2; // 가장 빠름
      case PatternType.stackUp:
        return 4; // 중간
      case PatternType.stealthIn:
        return 8; // 느림 (은밀함 특성)
      case PatternType.blackHole:
        return 10; // 가장 느림 (안정성 특성)
      case PatternType.reboundShot:
        return 5; // 중간
    }
  }

  /// V4.1 패턴별 신뢰도 기본값
  double get defaultConfidence {
    switch (this) {
      case PatternType.surge:
        return 0.8; // 높음
      case PatternType.flashFire:
        return 0.85; // 매우 높음
      case PatternType.stackUp:
        return 0.75; // 중간
      case PatternType.stealthIn:
        return 0.7; // 낮음 (은밀함)
      case PatternType.blackHole:
        return 0.8; // 높음 (안정성)
      case PatternType.reboundShot:
        return 0.9; // 매우 높음 (명확함)
    }
  }
}

/// 🆕 V4.1 온라인 지표 정보
class OnlineIndicatorInfo {
  final double? rsi;
  final double? macd;
  final double? macdSignal;
  final double? macdHistogram;
  final bool isStale;
  final DateTime lastUpdate;

  const OnlineIndicatorInfo({
    this.rsi,
    this.macd,
    this.macdSignal,
    this.macdHistogram,
    required this.isStale,
    required this.lastUpdate,
  });

  /// RSI/MACD가 유효한지 체크
  bool get hasValidData => !isStale && (rsi != null || macd != null);

  /// RSI 과매수/과매도 상태
  String get rsiState {
    if (rsi == null) return 'N/A';
    if (rsi! >= 70) return 'Overbought';
    if (rsi! <= 30) return 'Oversold';
    return 'Neutral';
  }

  /// MACD 신호 상태
  String get macdState {
    if (macd == null || macdSignal == null) return 'N/A';
    if (macd! > macdSignal!) return 'Bullish';
    if (macd! < macdSignal!) return 'Bearish';
    return 'Neutral';
  }

  Map<String, dynamic> toJson() {
    return {
      'rsi': rsi,
      'macd': macd,
      'macdSignal': macdSignal,
      'macdHistogram': macdHistogram,
      'isStale': isStale,
      'lastUpdate': lastUpdate.toIso8601String(),
      'rsiState': rsiState,
      'macdState': macdState,
    };
  }
}

/// 🆕 V4.1 다이버전스 정보
class DivergenceInfo {
  final bool isBullish;
  final bool isBearish;
  final double strength;
  final String source; // 'online-rsi', 'online-macd' 등

  const DivergenceInfo({
    required this.isBullish,
    required this.isBearish,
    required this.strength,
    required this.source,
  });

  /// 다이버전스 타입
  String get type {
    if (isBullish) return 'Bullish';
    if (isBearish) return 'Bearish';
    return 'None';
  }

  /// 신뢰도 (강도 기반)
  String get confidenceLevel {
    if (strength >= 0.8) return 'Very High';
    if (strength >= 0.6) return 'High';
    if (strength >= 0.4) return 'Medium';
    if (strength >= 0.2) return 'Low';
    return 'Very Low';
  }

  Map<String, dynamic> toJson() {
    return {
      'isBullish': isBullish,
      'isBearish': isBearish,
      'strength': strength,
      'source': source,
      'type': type,
      'confidenceLevel': confidenceLevel,
    };
  }
}

/// 🚀 Signal 감지 결과 엔티티 V4.1
class Signal {
  final String market;
  final String name;
  final double currentPrice;
  final double changePercent;
  final double volume;
  final double tradeAmount;
  final DateTime detectedAt;
  final PatternType patternType;
  final Map<String, dynamic> patternDetails;

  const Signal({
    required this.market,
    required this.name,
    required this.currentPrice,
    required this.changePercent,
    required this.volume,
    required this.tradeAmount,
    required this.detectedAt,
    required this.patternType,
    required this.patternDetails,
  });

  /// 거래 총액 계산
  double get total => currentPrice * volume;

  /// 코인 티커만 추출 (KRW- 제거)
  String get ticker => market.replaceFirst('KRW-', '');

  /// 🆕 V4.1 신뢰도 (동적 조정된 최종 신뢰도)
  double? get confidence {
    final finalConf = patternDetails['finalConfidence'] as double?;
    final originalConf = patternDetails['confidence'] as double?;
    return finalConf ?? originalConf;
  }

  /// 🆕 V4.1 온라인 지표 정보 조회
  OnlineIndicatorInfo? get onlineIndicators {
    final rsi = patternDetails['rsi'] as double?;
    final macd = patternDetails['macd'] as double?;
    final macdSignal = patternDetails['macdSignal'] as double?;
    final macdHistogram = patternDetails['macdHistogram'] as double?;
    
    if (rsi == null && macd == null) return null;
    
    return OnlineIndicatorInfo(
      rsi: rsi,
      macd: macd,
      macdSignal: macdSignal,
      macdHistogram: macdHistogram,
      isStale: false, // Signal 생성시점에는 최신
      lastUpdate: detectedAt,
    );
  }

  /// 🆕 V4.1 다이버전스 정보 조회
  DivergenceInfo? get divergence {
    final divData = patternDetails['divergence'] as Map<String, dynamic>?;
    if (divData == null) return null;
    
    return DivergenceInfo(
      isBullish: divData['isBullish'] as bool? ?? false,
      isBearish: divData['isBearish'] as bool? ?? false,
      strength: (divData['strength'] as num?)?.toDouble() ?? 0.0,
      source: divData['source'] as String? ?? 'unknown',
    );
  }

  /// 🆕 온라인 지표 기반 신호인지 체크
  bool get hasOnlineMetrics {
    return onlineIndicators?.hasValidData ?? false;
  }

  /// 🆕 V4.1 버전 정보
  String? get version => patternDetails['version'] as String?;

  /// 패턴별 특화 정보 getter들
  
  /// Surge 전용: 기준가 (1분 전 가격)
  double? get basePrice => patternDetails['basePrice'] as double?;
  
  /// FlashFire 전용: 급증 배율
  double? get surgeMultiplier => patternDetails['surgeMultiplier'] as double?;
  
  /// StackUp 전용: 연속 증가 횟수
  int? get consecutiveCount => patternDetails['consecutiveCount'] as int?;
  
  /// StealthIn 전용: 지속 시간 (초)
  int? get sustainedSeconds => patternDetails['sustainedSeconds'] as int?;
  
  /// BlackHole 전용: 가격 변동률
  double? get priceStability => patternDetails['priceStability'] as double?;
  
  /// ReboundShot 전용: 반등 강도
  double? get reboundStrength => patternDetails['reboundStrength'] as double?;

  /// 🆕 V4.1 고급 지표들
  double? get liquidityVortex => patternDetails['liquidityVortex'] as double?;
  double? get flashPulse => patternDetails['flashPulse'] as double?;
  double? get microBurstRadar => patternDetails['microBurstRadar'] as double?;
  double? get machineRush => patternDetails['machineRush'] as double?;
  double? get jumpScore => patternDetails['jumpScore'] as double?;
  double? get zScore => patternDetails['zScore'] as double?;

  /// 🆕 신뢰도 레벨 (텍스트)
  String get confidenceLevel {
    final conf = confidence ?? 0.0;
    if (conf >= 0.9) return 'Excellent';
    if (conf >= 0.8) return 'Very High';
    if (conf >= 0.7) return 'High';
    if (conf >= 0.6) return 'Good';
    if (conf >= 0.5) return 'Medium';
    if (conf >= 0.3) return 'Low';
    return 'Very Low';
  }

  /// 🆕 신호 강도 (종합 점수)
  String get signalStrength {
    double score = 0.0;
    
    // 기본 점수 (변화율 기반)
    score += (changePercent.abs() / 10.0).clamp(0.0, 1.0);
    
    // 신뢰도 점수
    score += (confidence ?? 0.0);
    
    // 온라인 지표 보너스
    if (hasOnlineMetrics) score += 0.3;
    
    // 다이버전스 보너스
    final div = divergence;
    if (div != null && div.strength > 0.5) score += 0.2;
    
    score = score.clamp(0.0, 3.0) / 3.0; // 0-1 정규화
    
    if (score >= 0.8) return 'Very Strong';
    if (score >= 0.6) return 'Strong';
    if (score >= 0.4) return 'Moderate';
    if (score >= 0.2) return 'Weak';
    return 'Very Weak';
  }

  /// 🆕 상세 정보 (디버깅용)
  Map<String, dynamic> get debugInfo {
    return {
      'market': market,
      'pattern': patternType.name,
      'confidence': confidence,
      'hasOnlineMetrics': hasOnlineMetrics,
      'onlineIndicators': onlineIndicators?.toJson(),
      'divergence': divergence?.toJson(),
      'signalStrength': signalStrength,
      'version': version,
      'detectedAt': detectedAt.toIso8601String(),
    };
  }

  Signal copyWith({
    String? market,
    String? name,
    double? currentPrice,
    double? changePercent,
    double? volume,
    double? tradeAmount,
    DateTime? detectedAt,
    PatternType? patternType,
    Map<String, dynamic>? patternDetails,
  }) {
    return Signal(
      market: market ?? this.market,
      name: name ?? this.name,
      currentPrice: currentPrice ?? this.currentPrice,
      changePercent: changePercent ?? this.changePercent,
      volume: volume ?? this.volume,
      tradeAmount: tradeAmount ?? this.tradeAmount,
      detectedAt: detectedAt ?? this.detectedAt,
      patternType: patternType ?? this.patternType,
      patternDetails: patternDetails ?? this.patternDetails,
    );
  }

  @override
  String toString() {
    final confText = confidence != null 
        ? '${(confidence! * 100).toStringAsFixed(1)}%' 
        : 'N/A';
    final onlineText = hasOnlineMetrics ? '[Online]' : '';
    
    return 'Signal(${patternType.displayName} $onlineText: $market '
        '${changePercent.toStringAsFixed(2)}% @ $currentPrice, '
        'Conf: $confText, at: ${detectedAt.toString().substring(11, 19)})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Signal &&
        other.market == market &&
        other.detectedAt == detectedAt &&
        other.patternType == patternType;
  }

  @override
  int get hashCode {
    return market.hashCode ^ detectedAt.hashCode ^ patternType.hashCode;
  }

  /// 🆕 V4.1 JSON 직렬화 (저장/로드용)
  Map<String, dynamic> toJson() {
    return {
      'market': market,
      'name': name,
      'currentPrice': currentPrice,
      'changePercent': changePercent,
      'volume': volume,
      'tradeAmount': tradeAmount,
      'detectedAt': detectedAt.toIso8601String(),
      'patternType': patternType.name,
      'patternDetails': patternDetails,
      'version': 'V4.1-Online',
    };
  }

  /// 🆕 V4.1 JSON 역직렬화
  factory Signal.fromJson(Map<String, dynamic> json) {
    return Signal(
      market: json['market'] as String,
      name: json['name'] as String,
      currentPrice: (json['currentPrice'] as num).toDouble(),
      changePercent: (json['changePercent'] as num).toDouble(),
      volume: (json['volume'] as num).toDouble(),
      tradeAmount: (json['tradeAmount'] as num).toDouble(),
      detectedAt: DateTime.parse(json['detectedAt'] as String),
      patternType: PatternType.values.firstWhere(
        (e) => e.name == json['patternType'],
        orElse: () => PatternType.surge,
      ),
      patternDetails: Map<String, dynamic>.from(json['patternDetails'] as Map),
    );
  }
}\n\n// ====== lib/domain/entities/market_mood.dart ======\n
// lib/domain/entities/market_mood.dart
// 🎯 Domain Layer: 순수 엔티티들 (VolumeData 추가)

import '../../core/utils/date_time.dart'; // DateTime extension

/// 🕒 볼륨 관련 상수 정의
class VolumeConstants {
 static const int minutesPerSlot = 30;
 static const int slotsPerHour = 60 ~/ minutesPerSlot; // 2
 static const int hoursPerDay = 24;
 static const int daysInBuffer = 7;
 static const int totalSlots = slotsPerHour * hoursPerDay * daysInBuffer; // 336
 static const int maxMinutesBuffer = minutesPerSlot * totalSlots; // 10080
 static const String volumeBoxName = 'market_volumes';
}

/// 🔥 시장 분위기 enum
enum MarketMood {
 bull,       // 🚀 불장
 weakBull,   // 🔥 약불장
 sideways,   // ⚖️ 중간장
 bear,       // 💧 물장
 deepBear,   // 🧊 얼음장
}

/// 📈 볼륨 데이터 엔티티 (30분 단위)
class VolumeData {
 final DateTime timestamp;
 final double volumeUsd;

 const VolumeData({
   required this.timestamp,
   required this.volumeUsd,
 });

 /// DateTime extension 활용
 String get formattedTime => timestamp.yyyyMMddhhmm();
 String get timeAgoText => timestamp.timeAgo();
 String get shortTime => timestamp.hhmmss();

 /// JSON 직렬화
 Map<String, dynamic> toJson() => {
   'timestamp': timestamp.toIso8601String(),
   'volume_usd': volumeUsd,
 };

 factory VolumeData.fromJson(Map<String, dynamic> json) {
   return VolumeData(
     timestamp: DateTime.parse(json['timestamp']),
     volumeUsd: (json['volume_usd'] as num).toDouble(),
   );
 }

 @override
 bool operator ==(Object other) =>
     identical(this, other) ||
     other is VolumeData &&
         runtimeType == other.runtimeType &&
         timestamp == other.timestamp &&
         volumeUsd == other.volumeUsd;

 @override
 int get hashCode => timestamp.hashCode ^ volumeUsd.hashCode;

 @override
 String toString() =>
     'VolumeData(${volumeUsd.toStringAsFixed(0)}B USD at ${timestamp.hhmmss()})';
}

/// 📊 마켓 무드 데이터 엔티티
class MarketMoodData {
 final double totalMarketCapUsd;
 final double totalVolumeUsd;
 final double btcDominance;
 final double marketCapChange24h;
 final DateTime updatedAt;

 const MarketMoodData({
   required this.totalMarketCapUsd,
   required this.totalVolumeUsd,
   required this.btcDominance,
   required this.marketCapChange24h,
   required this.updatedAt,
 });

 /// JSON 직렬화 (DTO 호환용)
 Map<String, dynamic> toJson() => {
   'total_market_cap_usd': totalMarketCapUsd,
   'total_volume_usd': totalVolumeUsd,
   'btc_dominance': btcDominance,
   'market_cap_change_24h': marketCapChange24h,
   'updated_at': updatedAt.toIso8601String(),
 };

 @override
 bool operator ==(Object other) =>
     identical(this, other) ||
     other is MarketMoodData &&
         runtimeType == other.runtimeType &&
         totalMarketCapUsd == other.totalMarketCapUsd &&
         totalVolumeUsd == other.totalVolumeUsd &&
         btcDominance == other.btcDominance &&
         marketCapChange24h == other.marketCapChange24h;

 @override
 int get hashCode =>
     totalMarketCapUsd.hashCode ^
     totalVolumeUsd.hashCode ^
     btcDominance.hashCode ^
     marketCapChange24h.hashCode;

 @override
 String toString() =>
     'MarketMoodData(volume: ${totalVolumeUsd.toStringAsFixed(0)}, '
     'cap: ${totalMarketCapUsd.toStringAsFixed(0)}, '
     'btc: ${btcDominance.toStringAsFixed(1)}%)';
}

/// 📊 비교 결과 엔티티
class ComparisonResult {
 final bool isReady;
 final double? changePercent;
 final double progressPercent;
 final String status;

 const ComparisonResult({
   required this.isReady,
   this.changePercent,
   required this.progressPercent,
   required this.status,
 });

 factory ComparisonResult.collecting(double progress) {
   return ComparisonResult(
     isReady: false,
     changePercent: null,
     progressPercent: progress,
     status: '수집중',
   );
 }

 factory ComparisonResult.ready(double changePercent) {
   return ComparisonResult(
     isReady: true,
     changePercent: changePercent,
     progressPercent: 1.0,
     status: '완료',
   );
 }

 factory ComparisonResult.unavailable(String message) {
   return ComparisonResult(
     isReady: false,
     changePercent: null,
     progressPercent: 0.0,
     status: message,
   );
 }

 @override
 bool operator ==(Object other) =>
     identical(this, other) ||
     other is ComparisonResult &&
         runtimeType == other.runtimeType &&
         isReady == other.isReady &&
         changePercent == other.changePercent &&
         progressPercent == other.progressPercent &&
         status == other.status;

 @override
 int get hashCode =>
     isReady.hashCode ^
     changePercent.hashCode ^
     progressPercent.hashCode ^
     status.hashCode;

 @override
 String toString() =>
     'ComparisonResult(ready: $isReady, change: $changePercent%, progress: ${(progressPercent * 100).round()}%)';
}

/// 📈 전체 비교 데이터 엔티티
class ComparisonData {
 final ComparisonResult thirtyMin;
 final ComparisonResult oneHour;
 final ComparisonResult twoHour;
 final ComparisonResult fourHour;
 final ComparisonResult eightHour;
 final ComparisonResult twelveHour;
 final ComparisonResult twentyFourHour;
 final ComparisonResult threeDayAverage;
 final ComparisonResult weeklyAverage;

 const ComparisonData({
   required this.thirtyMin,
   required this.oneHour,
   required this.twoHour,
   required this.fourHour,
   required this.eightHour,
   required this.twelveHour,
   required this.twentyFourHour,
   required this.threeDayAverage,
   required this.weeklyAverage,
 });

 factory ComparisonData.loading() {
   final loading = ComparisonResult.collecting(0.0);
   return ComparisonData(
     thirtyMin: loading,
     oneHour: loading,
     twoHour: loading,
     fourHour: loading,
     eightHour: loading,
     twelveHour: loading,
     twentyFourHour: loading,
     threeDayAverage: loading,
     weeklyAverage: loading,
   );
 }

 factory ComparisonData.error() {
   final error = ComparisonResult.unavailable('오류');
   return ComparisonData(
     thirtyMin: error,
     oneHour: error,
     twoHour: error,
     fourHour: error,
     eightHour: error,
     twelveHour: error,
     twentyFourHour: error,
     threeDayAverage: error,
     weeklyAverage: error,
   );
 }

 /// 모든 비교 결과를 리스트로 반환
 List<ComparisonResult> get allResults => [
       thirtyMin,
       oneHour,
       twoHour,
       fourHour,
       eightHour,
       twelveHour,
       twentyFourHour,
       threeDayAverage,
       weeklyAverage,
     ];

 /// 준비된 비교 결과 개수
 int get readyCount => allResults.where((r) => r.isReady).length;

 /// 전체 진행률 (0.0 ~ 1.0)
 double get overallProgress =>
     allResults.map((r) => r.progressPercent).reduce((a, b) => a + b) / 9;

 @override
 bool operator ==(Object other) =>
     identical(this, other) ||
     other is ComparisonData &&
         runtimeType == other.runtimeType &&
         thirtyMin == other.thirtyMin &&
         oneHour == other.oneHour &&
         twoHour == other.twoHour &&
         fourHour == other.fourHour &&
         eightHour == other.eightHour &&
         twelveHour == other.twelveHour &&
         twentyFourHour == other.twentyFourHour &&
         threeDayAverage == other.threeDayAverage &&
         weeklyAverage == other.weeklyAverage;

 @override
 int get hashCode => Object.hash(
       thirtyMin,
       oneHour,
       twoHour,
       fourHour,
       eightHour,
       twelveHour,
       twentyFourHour,
       threeDayAverage,
       weeklyAverage,
     );

 @override
 String toString() =>
     'ComparisonData(ready: $readyCount/9, progress: ${(overallProgress * 100).round()}%)';
}

/// 📦 전체 시스템 상태 엔티티
class MarketMoodSystemState {
 final MarketMoodData? marketData;
 final ComparisonData comparisonData;
 final MarketMood currentMood;
 final double exchangeRate;
 final bool isLoading;
 final bool hasError;

 const MarketMoodSystemState({
   required this.marketData,
   required this.comparisonData,
   required this.currentMood,
   required this.exchangeRate,
   required this.isLoading,
   required this.hasError,
 });

 /// 시스템이 정상 작동 중인지 확인
 bool get isHealthy => !hasError && marketData != null;

 /// 데이터 수집 진행률 (0.0 ~ 1.0)
 double get dataProgress => comparisonData.overallProgress;

 /// 상태 요약 문자열
 String get statusSummary {
   if (hasError) return '오류 발생';
   if (isLoading) return '로딩 중';
   if (marketData == null) return '데이터 없음';
   return '정상 작동';
 }

 @override
 bool operator ==(Object other) =>
     identical(this, other) ||
     other is MarketMoodSystemState &&
         runtimeType == other.runtimeType &&
         marketData == other.marketData &&
         comparisonData == other.comparisonData &&
         currentMood == other.currentMood &&
         exchangeRate == other.exchangeRate &&
         isLoading == other.isLoading &&
         hasError == other.hasError;

 @override
 int get hashCode => Object.hash(
       marketData,
       comparisonData,
       currentMood,
       exchangeRate,
       isLoading,
       hasError,
     );

 @override
 String toString() =>
     'MarketMoodSystemState(mood: $currentMood, status: $statusSummary, progress: ${(dataProgress * 100).round()}%)';
}\n\n// ====== lib/app.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
// Core
import 'core/config/app_config.dart';
import 'core/navigation/app_router.dart';
// Shared UI
import 'shared/theme/app_theme.dart';
// All app-level providers
import 'core/di/app_providers.dart';
import 'domain/entities/app_settings.dart';

/// Entry widget for the application
class MyApp extends ConsumerStatefulWidget {
  final GlobalKey<NavigatorState> navigatorKey;

  const MyApp({required this.navigatorKey, Key? key}) : super(key: key);

  @override
  ConsumerState<MyApp> createState() => _MyAppState();
}

class _MyAppState extends ConsumerState<MyApp> {
  late final AppRouter _appRouter;

  @override
  void initState() {
    super.initState();
    _appRouter = AppRouter(ref, widget.navigatorKey)
      ..setupFCMListeners();
  }

  @override
  void dispose() {
    _appRouter.dispose();
    ref.read(signalBusProvider).dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final settings = ref.watch(appSettingsProvider);

    return MaterialApp.router(
      title: '코인 포착 앱',
      debugShowCheckedModeBanner: AppConfig.isDebugMode,
      
      theme: _applyFontFamily(AppTheme.light(), settings.fontFamily),
      darkTheme: _applyFontFamily(AppTheme.dark(), settings.fontFamily),
      themeMode: settings.themeMode,
      
      routerConfig: _appRouter.router,
      scaffoldMessengerKey: ref.watch(scaffoldMessengerKeyProvider),
    );
  }

  ThemeData _applyFontFamily(ThemeData baseTheme, FontFamily fontFamily) {
    final fontName = fontFamily.fontName;
    
    return baseTheme.copyWith(
      textTheme: baseTheme.textTheme.apply(
        fontFamily: fontName,
      ),
      primaryTextTheme: baseTheme.primaryTextTheme.apply(
        fontFamily: fontName,
      ),
      appBarTheme: baseTheme.appBarTheme.copyWith(
        titleTextStyle: baseTheme.appBarTheme.titleTextStyle?.copyWith(
          fontFamily: fontName,
        ),
      ),
      bottomNavigationBarTheme: baseTheme.bottomNavigationBarTheme.copyWith(
        selectedLabelStyle: TextStyle(fontFamily: fontName),
        unselectedLabelStyle: TextStyle(fontFamily: fontName),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: baseTheme.elevatedButtonTheme.style?.copyWith(
          textStyle: WidgetStateProperty.all(
            TextStyle(
              fontFamily: fontName,
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ),
    );
  }
}

/// ProviderObserver for logging state changes
class AppProviderObserver extends ProviderObserver {
  @override
  void didAddProvider(
    ProviderBase provider,
    Object? value,
    ProviderContainer container,
  ) {
    if (AppConfig.isDebugMode) {
      debugPrint('[Observer] 🆕 Provider Added: ${provider.name ?? provider.runtimeType}');
    }
  }

  @override
  void didUpdateProvider(
    ProviderBase provider,
    Object? previousValue,
    Object? newValue,
    ProviderContainer container,
  ) {
    if (AppConfig.isDebugMode) {
      debugPrint('[Observer] 🔄 Provider Updated: ${provider.name ?? provider.runtimeType}');
    }
  }

  @override
  void didDisposeProvider(
    ProviderBase provider,
    ProviderContainer container,
  ) {
    if (AppConfig.isDebugMode) {
      debugPrint('[Observer] ♻️ Provider Disposed: ${provider.name ?? provider.runtimeType}');
    }
  }
}

/// Initializes critical providers on app start
class ProviderInitializer extends ConsumerWidget {
  final Widget child;

  const ProviderInitializer({required this.child, Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (AppConfig.isDebugMode) {
        debugPrint('[Initializer] ⚡ Initializing providers...');
      }

      ref.read(appSettingsProvider);
      ref.read(appLifecycleManagerProvider);

      if (AppConfig.isDebugMode) {
        debugPrint('[Initializer] ✅ Provider initialization complete.');
      }
    });

    return child;
  }
}\n\n// ====== lib/presentation/controllers/surge_controller.dart ======\n
// lib/presentation/controllers/surge_controller.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/surge_provider.dart'; // 🚀 surge_provider 사용
import '../../domain/entities/surge.dart';
import '../../domain/usecases/surge_usecase.dart'; // SurgeFilterType import

/// 🚀 심플한 급등/급락 컨트롤러 - SurgeTimeFrameController 활용
class SurgeController extends StateNotifier<SurgeControllerState> {
  final Ref ref;
  
  SurgeController(this.ref) : super(const SurgeControllerState());

  /// 🚀 Top 50/100 토글
  void toggleTopLimit() {
    state = state.copyWith(isTop100: !state.isTop100);
  }

  /// 🚀 필터 타입 변경 (전체/급등만/급락만)
  void setFilterType(SurgeFilterType filterType) {
    state = state.copyWith(filterType: filterType);
  }

  /// 🚀 현재 표시 개수 (50 또는 100)
  int get currentLimit => state.isTop100 ? 100 : 50;

  /// 🚀 현재 표시 모드 이름
  String get currentLimitName => state.isTop100 ? 'Top 100' : 'Top 50';

  /// 🚀 현재 필터 타입 이름
  String get currentFilterName {
    switch (state.filterType) {
      case SurgeFilterType.all:
        return '전체';
      case SurgeFilterType.risingOnly:
        return '상승';
      case SurgeFilterType.fallingOnly:
        return '하락';
    }
  }

  /// 🚀 Top 100 모드 여부
  bool get isTop100 => state.isTop100;

  /// 🚀 현재 필터 타입
  SurgeFilterType get currentFilterType => state.filterType;

  void setTimeFrame(String timeFrame, int index) {
    // surge_provider.dart의 SurgeTimeFrameController 사용
    final controller = ref.read(surgeTimeFrameController);
    controller.updateTimeFrame(timeFrame, index);
  }

  /// 현재 시간대
  String get currentTimeFrame => ref.read(surgeTimeFrameController).currentTimeFrame;

  /// 현재 인덱스
  int get currentIndex => ref.read(surgeTimeFrameController).currentIndex;

  /// 사용 가능한 시간대들
  List<String> get availableTimeFrames => ref.read(surgeTimeFrameController).availableTimeFrames;

  /// 시간대 한국어 이름
  String getTimeFrameName(String timeFrame) {
    return ref.read(surgeTimeFrameController).getTimeFrameName(timeFrame);
  }

  /// 🚀 급등/급락 데이터를 변동률 순으로 정렬 + 필터링 + 동적 순위 제한 (Top 50/100)
  List<Surge> sortAndFilterSurgeData(List<Surge> surgeData) {
    // 1) 필터 타입에 따른 필터링
    List<Surge> filteredData = _applyFilter(surgeData, state.filterType);
    
    // 2) 필터 타입에 따른 정렬
    if (state.filterType == SurgeFilterType.fallingOnly) {
      // 하락만: 하락 큰 순서 (오름차순)
      filteredData.sort((a, b) => a.changePercent.compareTo(b.changePercent));
    } else {
      // 전체/상승: 변동률 내림차순 (큰 플러스부터)
      filteredData.sort((a, b) => b.changePercent.compareTo(a.changePercent));
    }
    
    // 3) 현재 설정에 따라 50개 또는 100개로 제한
    return filteredData.take(currentLimit).toList();
  }

  /// 🚀 필터 타입 적용
  List<Surge> _applyFilter(List<Surge> surgeData, SurgeFilterType filterType) {
    switch (filterType) {
      case SurgeFilterType.all:
        return surgeData.where((s) => s.hasChange).toList();
      case SurgeFilterType.risingOnly:
        return surgeData.where((s) => s.isRising).toList();
      case SurgeFilterType.fallingOnly:
        return surgeData.where((s) => s.isFalling).toList();
    }
  }

  /// 코인명 필터링
  List<Surge> filterByMarket(List<Surge> sortedData, String? marketFilter) {
    if (marketFilter == null || marketFilter.isEmpty) {
      return sortedData;
    }
    
    final upper = marketFilter.toUpperCase();
    return sortedData.where((surge) => surge.market.contains(upper)).toList();
  }

  /// 🚀 급등/급락 카운트 계산 (UI용)
  Map<String, int> getSurgeCount(List<Surge> surgeData) {
    final filteredData = _applyFilter(surgeData, state.filterType);
    
    final risingCount = filteredData.where((s) => s.isRising).length;
    final fallingCount = filteredData.where((s) => s.isFalling).length;
    
    return {
      'rising': risingCount,
      'falling': fallingCount,
    };
  }

  /// 수동 리셋 메서드들
  void resetCurrentTimeFrame() {
    ref.read(surgeTimeFrameController).resetCurrentTimeFrame();
  }

  void resetAllTimeFrames() {
    ref.read(surgeTimeFrameController).resetAllTimeFrames();
  }

  /// 다음 리셋 시간 조회
  DateTime? getNextResetTime() {
    return ref.read(surgeTimeFrameController).getNextResetTime();
  }
}

/// 🚀 SurgeController 상태 관리
class SurgeControllerState {
  final bool isTop100;
  final SurgeFilterType filterType;

  const SurgeControllerState({
    this.isTop100 = false, // 기본값: Top 50
    this.filterType = SurgeFilterType.all, // 기본값: 전체
  });

  SurgeControllerState copyWith({
    bool? isTop100,
    SurgeFilterType? filterType,
  }) {
    return SurgeControllerState(
      isTop100: isTop100 ?? this.isTop100,
      filterType: filterType ?? this.filterType,
    );
  }
}

/// Provider 선언 - StateNotifierProvider로 변경!
final surgeControllerProvider = StateNotifierProvider<SurgeController, SurgeControllerState>((ref) => SurgeController(ref));\n\n// ====== lib/presentation/controllers/main_controller.dart ======\n
\n\n// ====== lib/presentation/controllers/settings_controller.dart ======\n
\n\n// ====== lib/presentation/controllers/sector_controller.dart ======\n
// lib/presentation/controllers/sector_controller.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/sector_provider.dart';
import '../../domain/entities/volume.dart';

/// 섹터 화면 상태를 캡슐화하는 immutable 모델
class SectorState {
  final List<Volume> sectorVolumes;
  final bool isLoading;
  final bool isDetailedClassification;
  final String timeFrame;
  final int selectedTimeFrameIndex;
  final String? errorMessage;

  const SectorState({
    this.sectorVolumes = const [],
    this.isLoading = false,
    this.isDetailedClassification = true,
    this.timeFrame = '1m',
    this.selectedTimeFrameIndex = 0,
    this.errorMessage,
  });

  SectorState copyWith({
    List<Volume>? sectorVolumes,
    bool? isLoading,
    bool? isDetailedClassification,
    String? timeFrame,
    int? selectedTimeFrameIndex,
    String? errorMessage,
  }) {
    return SectorState(
      sectorVolumes: sectorVolumes ?? this.sectorVolumes,
      isLoading: isLoading ?? this.isLoading,
      isDetailedClassification: isDetailedClassification ?? this.isDetailedClassification,
      timeFrame: timeFrame ?? this.timeFrame,
      selectedTimeFrameIndex: selectedTimeFrameIndex ?? this.selectedTimeFrameIndex,
      errorMessage: errorMessage,
    );
  }
}

/// Sector 화면 전용 ViewModel
class SectorController extends StateNotifier<SectorState> {
  final Ref _ref;
  ProviderSubscription<AsyncValue<List<Volume>>>? _subscription;

  SectorController(this._ref) : super(const SectorState()) {
    _initializeStream();
  }

  /// 섹터 볼륨 스트림 구독 초기화
  void _initializeStream() {
    _subscription?.close();
    
    final controller = _ref.read(sectorTimeFrameController);
    
    state = state.copyWith(
      isLoading: true,
      isDetailedClassification: controller.isDetailedClassification,
      timeFrame: controller.currentTimeFrame,
      selectedTimeFrameIndex: controller.currentIndex,
      errorMessage: null,
    );

    // AsyncValue 직접 구독
    _subscription = _ref.listen(sectorVolumeDataProvider, (previous, next) {
      next.when(
        data: (volumes) {
          state = state.copyWith(
            sectorVolumes: volumes,
            isLoading: false,
            errorMessage: null,
          );
        },
        loading: () {
          state = state.copyWith(
            isLoading: true,
            errorMessage: null,
          );
        },
        error: (error, stackTrace) {
          state = state.copyWith(
            isLoading: false,
            errorMessage: error.toString(),
          );
        },
      );
    });
  }

  /// 시간대 변경
  void setTimeFrame(String timeFrame, int index) {
    final controller = _ref.read(sectorTimeFrameController);
    controller.updateTimeFrame(timeFrame, index);
    
    state = state.copyWith(
      timeFrame: timeFrame,
      selectedTimeFrameIndex: index,
      isLoading: true,
      errorMessage: null,
    );
    
    // 스트림 재구독
    _initializeStream();
  }

  /// 섹터 분류 토글 (상세 ↔ 기본)
  void toggleSectorClassification() {
    final controller = _ref.read(sectorTimeFrameController);
    controller.toggleSectorClassification();
    
    state = state.copyWith(
      isDetailedClassification: !state.isDetailedClassification,
      isLoading: true,
      errorMessage: null,
    );
    
    // 스트림 재구독 (새로운 분류로)
    _initializeStream();
  }

  /// 새로고침
  void refresh() {
    _initializeStream();
  }

  /// 섹터 목록 필터링 (섹터명으로)
  List<Volume> filterBySector(String? sectorFilter) {
    if (sectorFilter == null || sectorFilter.isEmpty) {
      return state.sectorVolumes;
    }
    final upper = sectorFilter.toUpperCase();
    return state.sectorVolumes.where((volume) {
      final sectorName = volume.market.replaceFirst('SECTOR-', '');
      return sectorName.contains(upper);
    }).toList();
  }

  /// 섹터 목록 정렬
  void sortSectors(String field, bool ascending) {
    final list = [...state.sectorVolumes];
    list.sort((a, b) {
      dynamic aValue;
      dynamic bValue;
      switch (field) {
        case 'sector':
          aValue = a.market.replaceFirst('SECTOR-', '');
          bValue = b.market.replaceFirst('SECTOR-', '');
          break;
        case 'volume':
          aValue = a.totalVolume;
          bValue = b.totalVolume;
          break;
        case 'timestamp':
          aValue = a.lastUpdatedMs;
          bValue = b.lastUpdatedMs;
          break;
        default:
          aValue = a.totalVolume;
          bValue = b.totalVolume;
      }
      final cmp = aValue is Comparable && bValue is Comparable
          ? aValue.compareTo(bValue)
          : 0;
      return ascending ? cmp : -cmp;
    });
    state = state.copyWith(sectorVolumes: list);
  }

  /// 섹터 볼륨 데이터 정렬 적용 (기본: 볼륨 내림차순)
  List<Volume> applySorting(List<Volume> volumes) {
    final sorted = [...volumes];
    sorted.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
    return sorted;
  }

  /// 수동 리셋 메서드들
  void resetCurrentTimeFrame() {
    final controller = _ref.read(sectorTimeFrameController);
    controller.resetCurrentTimeFrame();
    refresh();
  }

  void resetAllTimeFrames() {
    final controller = _ref.read(sectorTimeFrameController);
    controller.resetAllTimeFrames();
    refresh();
  }

  /// 다음 리셋 시간 조회
  DateTime? getNextResetTime() {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.getNextResetTime();
  }

  /// 유틸리티 Getters
  List<String> get availableTimeFrames {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.availableTimeFrames;
  }

  String getTimeFrameName(String timeFrame) {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.getTimeFrameName(timeFrame);
  }

  String get currentSectorClassificationName {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.currentSectorClassificationName;
  }

  int get totalSectors {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.totalSectors;
  }

  /// 특정 섹터의 코인들 조회
  List<String> getCoinsInSector(String sectorName) {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.getCoinsInSector(sectorName);
  }

  /// 특정 코인이 속한 섹터들 조회
  List<String> getSectorsForCoin(String ticker) {
    final controller = _ref.read(sectorTimeFrameController);
    return controller.getSectorsForCoin(ticker);
  }

  @override
  void dispose() {
    _subscription?.close();
    super.dispose();
  }
}

/// Provider 선언
final sectorControllerProvider =
    StateNotifierProvider<SectorController, SectorState>((ref) {
  return SectorController(ref);
});\n\n// ====== lib/presentation/controllers/signal_controller.dart ======\n
// lib/presentation/controllers/signal_controller.dart

import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/config/app_config.dart';
import '../../core/di/signal_provider.dart';
import '../../core/error/app_exception.dart';
import '../../core/extensions/result.dart';
import '../../core/utils/logger.dart';
import '../../domain/entities/signal.dart';
import '../../domain/usecases/signal_usecase.dart';

/// 🚀 Signal 화면 상태를 캡슐화하는 immutable 모델 V4.1
class SignalState {
  final List<Signal> signals;
  final bool isLoading;
  final bool isConnected;
  final PatternType currentPattern;
  final int selectedIndex;
  final double threshold;
  final bool isPatternEnabled;
  final String? errorMessage;
  final Map<String, dynamic>? systemHealth; // 🆕 V4.1
  final Map<String, dynamic>? onlineMetricsHealth; // 🆕 V4.1
  final String sortField; // 🆕 V4.1
  final bool sortAscending; // 🆕 V4.1

  const SignalState({
    this.signals = const [],
    this.isLoading = false,
    this.isConnected = false,
    this.currentPattern = PatternType.surge,
    this.selectedIndex = 0,
    this.threshold = 0.4,
    this.isPatternEnabled = true,
    this.errorMessage,
    this.systemHealth,
    this.onlineMetricsHealth,
    this.sortField = 'time',
    this.sortAscending = false,
  });

  /// 🆕 V4.1 온라인 지표 연결 상태
  bool get hasOnlineMetrics => onlineMetricsHealth != null;
  
  /// 🆕 V4.1 시스템 건강성
  bool get isSystemHealthy => 
      systemHealth?['status'] == 'healthy' && 
      (onlineMetricsHealth?['staleMarkets'] ?? 0) == 0;

  /// 🆕 V4.1 신호 통계
  Map<String, dynamic> get signalStats {
    final total = signals.length;
    final withOnlineMetrics = signals.where((s) => s.hasOnlineMetrics).length;
    final avgConfidence = signals.isNotEmpty 
        ? signals.map((s) => s.confidence ?? 0.0).reduce((a, b) => a + b) / total
        : 0.0;
    
    return {
      'total': total,
      'withOnlineMetrics': withOnlineMetrics,
      'onlineMetricsRatio': total > 0 ? withOnlineMetrics / total : 0.0,
      'avgConfidence': avgConfidence,
      'pattern': currentPattern.displayName,
    };
  }

  SignalState copyWith({
    List<Signal>? signals,
    bool? isLoading,
    bool? isConnected,
    PatternType? currentPattern,
    int? selectedIndex,
    double? threshold,
    bool? isPatternEnabled,
    String? errorMessage,
    Map<String, dynamic>? systemHealth,
    Map<String, dynamic>? onlineMetricsHealth,
    String? sortField,
    bool? sortAscending,
  }) {
    return SignalState(
      signals: signals ?? this.signals,
      isLoading: isLoading ?? this.isLoading,
      isConnected: isConnected ?? this.isConnected,
      currentPattern: currentPattern ?? this.currentPattern,
      selectedIndex: selectedIndex ?? this.selectedIndex,
      threshold: threshold ?? this.threshold,
      isPatternEnabled: isPatternEnabled ?? this.isPatternEnabled,
      errorMessage: errorMessage,
      systemHealth: systemHealth ?? this.systemHealth,
      onlineMetricsHealth: onlineMetricsHealth ?? this.onlineMetricsHealth,
      sortField: sortField ?? this.sortField,
      sortAscending: sortAscending ?? this.sortAscending,
    );
  }
}

/// 🚀 Signal 화면 전용 ViewModel V4.1 - 온라인 지표 연동
class SignalController extends StateNotifier<SignalState> {
  final SignalUseCase _usecase;
  final Ref _ref;
  StreamSubscription<Result<List<Signal>, AppException>>? _subscription;
  StreamSubscription<Map<String, dynamic>>? _healthSubscription; // 🆕 V4.1
  Timer? _healthUpdateTimer; // 🆕 V4.1

  SignalController(this._usecase, this._ref) : super(const SignalState()) {
    _startSystemHealthMonitoring(); // 🆕 V4.1
  }

  // ==========================================================================
  // 🆕 V4.1 시스템 건강성 모니터링
  // ==========================================================================

  /// 🆕 시스템 헬스 모니터링 시작
  void _startSystemHealthMonitoring() {
    _healthUpdateTimer = Timer.periodic(const Duration(seconds: 10), (_) {
      _updateSystemHealth();
      _updateOnlineMetricsHealth();
    });
  }

  /// 🆕 시스템 헬스 업데이트
  void _updateSystemHealth() async {
    try {
      final controller = _ref.read(signalPatternController);
      final health = await controller.getSystemHealth();
      
      state = state.copyWith(systemHealth: health);
      
      if (AppConfig.enableTradeLog) {
        final staleMarkets = health['onlineMetricsSystem']?['staleMarkets'] ?? 0;
        if (staleMarkets > 0) {
          log.w('⚠️ Signal Controller: $staleMarkets개 마켓 온라인 지표 만료');
        }
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.w('Signal Controller: System health update failed - $e');
      }
    }
  }

  /// 🆕 온라인 지표 헬스 업데이트
  void _updateOnlineMetricsHealth() {
    try {
      final controller = _ref.read(signalPatternController);
      final health = controller.getOnlineMetricsHealth();
      
      state = state.copyWith(onlineMetricsHealth: health);
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.w('Signal Controller: Online metrics health update failed - $e');
      }
    }
  }

  // ==========================================================================
  // 기본 패턴 관리 (기존 + V4.1 개선)
  // ==========================================================================

  /// 패턴 인덱스 변경 (슬라이더 이동) - V4.1 개선
  void setPatternIndex(int index, List<String> markets) {
    if (index < 0 || index >= PatternType.values.length) {
      if (AppConfig.enableTradeLog) {
        log.w('Invalid pattern index: $index');
      }
      return;
    }

    final patternType = PatternType.values[index];
    final defaultThreshold = patternType.defaultThreshold; // V4.1 기본값

    // Provider 상태 업데이트
    final controller = _ref.read(signalPatternController);
    controller.updatePatternIndex(index);

    state = state.copyWith(
      currentPattern: patternType,
      selectedIndex: index,
      threshold: defaultThreshold,
      isLoading: true,
      errorMessage: null,
    );

    // 스트림 재구독
    _subscribeToPattern(patternType, markets);
    
    if (AppConfig.enableTradeLog) {
      log.i('🎯 Pattern changed to: ${patternType.displayName} (V4.1)');
    }
  }

  /// 현재 패턴의 임계값 변경 - V4.1 개선
  void updateThreshold(double threshold) {
    try {
      // UseCase를 통한 검증된 업데이트
      _usecase.updatePatternThreshold(state.currentPattern, threshold);
      
      final controller = _ref.read(signalPatternController);
      controller.updateThreshold(threshold);

      state = state.copyWith(threshold: threshold);
      
      if (AppConfig.enableTradeLog) {
        log.i('📊 Threshold updated: ${state.currentPattern.displayName} → $threshold');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Threshold update failed: $e');
      }
      
      // 에러를 사용자에게 표시
      state = state.copyWith(
        errorMessage: 'Invalid threshold value: ${e.toString()}'
      );
    }
  }

  /// 패턴 활성화/비활성화 토글 - V4.1 개선
  void togglePatternEnabled() {
    final newEnabled = !state.isPatternEnabled;
    
    _usecase.setPatternEnabled(state.currentPattern, newEnabled);
    
    final controller = _ref.read(signalPatternController);
    controller.setPatternEnabled(state.currentPattern, newEnabled);

    state = state.copyWith(isPatternEnabled: newEnabled);
    
    if (AppConfig.enableTradeLog) {
      log.i('🔄 Pattern ${newEnabled ? "enabled" : "disabled"}: ${state.currentPattern.displayName}');
    }
  }

  /// 시그널 목록 초기화 - V4.1 개선
  void clearSignals([PatternType? pattern]) {
    final controller = _ref.read(signalPatternController);
    controller.clearSignals(pattern);

    if (pattern == null || pattern == state.currentPattern) {
      state = state.copyWith(signals: []);
    }
    
    if (AppConfig.enableTradeLog) {
      final patternName = pattern?.displayName ?? 'All patterns';
      log.i('🧹 Signals cleared: $patternName');
    }
  }

  // ==========================================================================
  // 🆕 V4.1 고급 패턴 설정
  // ==========================================================================

  /// 🆕 고급 패턴 설정 업데이트
  void updateAdvancedPatternConfig(String key, double value) {
    try {
      _usecase.updateAdvancedPatternConfig(state.currentPattern, key, value);
      
      if (AppConfig.enableTradeLog) {
        log.i('⚙️ Advanced config updated: ${state.currentPattern.name}.$key = $value');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Advanced config update failed: $e');
      }
      
      state = state.copyWith(
        errorMessage: 'Configuration update failed: ${e.toString()}'
      );
    }
  }

  /// 🆕 패턴 프리셋 적용
  void applyPreset(String presetName) {
    try {
      _usecase.applyPatternPreset(presetName);
      
      // 현재 패턴의 임계값도 업데이트
      final newThreshold = _usecase.getPatternThreshold(state.currentPattern);
      state = state.copyWith(threshold: newThreshold);
      
      if (AppConfig.enableTradeLog) {
        log.i('🎯 Preset applied: $presetName');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Preset application failed: $e');
      }
      
      state = state.copyWith(
        errorMessage: 'Preset application failed: ${e.toString()}'
      );
    }
  }

  /// 🆕 온라인 지표 리셋
  void resetOnlineMetrics([String? market]) {
    final controller = _ref.read(signalPatternController);
    controller.resetOnlineMetrics(market);
    
    // 헬스 상태 즉시 업데이트
    _updateOnlineMetricsHealth();
    
    if (AppConfig.enableTradeLog) {
      final target = market ?? 'all markets';
      log.i('🔄 Online metrics reset: $target');
    }
  }

  // ==========================================================================
  // 스트림 관리 (V4.1 개선)
  // ==========================================================================

  /// 패턴별 시그널 스트림 구독 - V4.1 개선
  void _subscribeToPattern(PatternType patternType, List<String> markets) {
    _subscription?.cancel();
    
    _subscription = _usecase
        .watchSignalsByPattern(patternType, markets)
        .map((signals) => Ok<List<Signal>, AppException>(signals))
        .handleError((error) => Err<List<Signal>, AppException>(
            AppException(
              'Signal pattern detection failed: ${error.toString()}',
              code: 'SIGNAL_PATTERN_ERROR',
              originalException: error is Exception ? error : null,
            )))
        .listen(_handleResult);
  }

  void _handleResult(Result<List<Signal>, AppException> result) {
    result.when(
      ok: (signals) {
        // V4.1 정렬 적용
        final sortedSignals = _applySorting(signals);
        
        state = state.copyWith(
          signals: sortedSignals,
          isLoading: false,
          isConnected: true,
          errorMessage: null,
        );
        
        // 온라인 지표 통계 로깅
        if (AppConfig.enableTradeLog && signals.isNotEmpty) {
          final withOnlineMetrics = signals.where((s) => s.hasOnlineMetrics).length;
          final ratio = (withOnlineMetrics / signals.length * 100).toStringAsFixed(1);
          log.i('📊 Signals received: ${signals.length}, Online metrics: $withOnlineMetrics ($ratio%)');
        }
      },
      err: (e) {
        state = state.copyWith(
          isLoading: false,
          isConnected: false,
          errorMessage: e.message,
        );
        
        if (AppConfig.enableTradeLog) {
          log.e('❌ Signal stream error: ${e.message}');
        }
      },
    );
  }

  /// 재연결/새로고침 - V4.1 개선
  void refresh(List<String> markets) {
    if (AppConfig.enableTradeLog) {
      log.i('🔄 Signal refresh requested for ${markets.length} markets');
    }
    
    // 온라인 지표 상태도 리셋
    resetOnlineMetrics();
    
    // 패턴 재구독
    setPatternIndex(state.selectedIndex, markets);
  }

  // ==========================================================================
  // 🆕 V4.1 정렬 및 필터링
  // ==========================================================================

  /// 🆕 정렬 필드 변경
  void setSortField(String field, {bool? ascending}) {
    final newAscending = ascending ?? (state.sortField == field ? !state.sortAscending : false);
    
    state = state.copyWith(
      sortField: field,
      sortAscending: newAscending,
      signals: _applySorting(state.signals),
    );
    
    if (AppConfig.enableTradeLog) {
      log.i('📊 Sort changed: $field (${newAscending ? "ASC" : "DESC"})');
    }
  }

  /// 🆕 정렬 적용
  List<Signal> _applySorting(List<Signal> signals) {
    final list = List<Signal>.from(signals);
    
    list.sort((a, b) {
      dynamic aValue;
      dynamic bValue;
      
      switch (state.sortField) {
        case 'market':
          aValue = a.market;
          bValue = b.market;
          break;
        case 'price':
          aValue = a.currentPrice;
          bValue = b.currentPrice;
          break;
        case 'change':
          aValue = a.changePercent.abs();
          bValue = b.changePercent.abs();
          break;
        case 'amount':
          aValue = a.tradeAmount;
          bValue = b.tradeAmount;
          break;
        case 'confidence':
          aValue = a.confidence ?? 0.0;
          bValue = b.confidence ?? 0.0;
          break;
        case 'time':
        default:
          aValue = a.detectedAt.millisecondsSinceEpoch;
          bValue = b.detectedAt.millisecondsSinceEpoch;
      }
      
      final cmp = aValue is Comparable && bValue is Comparable
          ? aValue.compareTo(bValue)
          : 0;
      
      return state.sortAscending ? cmp : -cmp;
    });
    
    return list;
  }

  /// 🆕 고급 필터링 (V4.1)
  List<Signal> filterSignals({
    String? marketFilter,
    double? minConfidence,
    bool? requireOnlineMetrics,
    Set<PatternType>? patternTypes,
    Duration? timeWindow,
  }) {
    return _usecase.filterSignals(
      state.signals,
      markets: marketFilter != null ? {marketFilter.toUpperCase()} : null,
      minConfidence: minConfidence,
      requireOnlineMetrics: requireOnlineMetrics,
      patternTypes: patternTypes,
      timeWindow: timeWindow,
    );
  }

  // ==========================================================================
  // 표시 텍스트 생성 (V4.1 개선)
  // ==========================================================================

  /// 현재 패턴 표시 텍스트 생성 - V4.1 개선
  String getPatternDisplayText() {
    final pattern = state.currentPattern;
    return '${pattern.displayName}: ${pattern.description}';
  }

  /// 현재 패턴 아이콘/이모지
  String getPatternIcon() {
    return state.currentPattern.displayName;
  }

  /// 임계값 표시 텍스트 - V4.1 개선
  String getThresholdDisplayText() {
    final threshold = state.threshold;
    final pattern = state.currentPattern;

    switch (pattern) {
      case PatternType.surge:
        return '${threshold.toStringAsFixed(1)}% 상승';
      case PatternType.flashFire:
        return '${threshold.toStringAsFixed(1)}배 급증';
      case PatternType.stackUp:
        return '${threshold.toInt()}연속 증가';
      case PatternType.stealthIn:
        final amountText = threshold >= 1000000 
            ? '${(threshold / 1000000).toStringAsFixed(0)}백만원'
            : '${threshold.toStringAsFixed(0)}원';
        return '$amountText 이상';
      case PatternType.blackHole:
        return '${threshold.toStringAsFixed(1)}% 이하 변동';
      case PatternType.reboundShot:
        return '${threshold.toStringAsFixed(1)}% 급락 후 반등';
    }
  }

  /// 🆕 시스템 상태 표시 텍스트
  String getSystemStatusText() {
    if (!state.hasOnlineMetrics) return 'Online metrics: Connecting...';
    
    final health = state.onlineMetricsHealth!;
    final totalMarkets = health['totalMarkets'] ?? 0;
    final healthyMarkets = health['healthyMarkets'] ?? 0;
    final staleMarkets = health['staleMarkets'] ?? 0;
    
    if (staleMarkets > 0) {
      return 'Online metrics: $healthyMarkets/$totalMarkets healthy ($staleMarkets stale)';
    }
    
    return 'Online metrics: $healthyMarkets/$totalMarkets healthy ✅';
  }

  /// 🆕 신뢰도 상태 표시
  String getConfidenceStatusText() {
    final stats = state.signalStats;
    final avgConf = stats['avgConfidence'] as double;
    final onlineRatio = stats['onlineMetricsRatio'] as double;
    
    return 'Avg confidence: ${(avgConf * 100).toStringAsFixed(1)}%, '
           'Online: ${(onlineRatio * 100).toStringAsFixed(1)}%';
  }

  // ==========================================================================
  // 🆕 V4.1 통계 및 분석
  // ==========================================================================

  /// 🆕 패턴별 성능 통계
  Future<Map<String, dynamic>> getPatternPerformance() async {
    try {
      final performance = await _usecase.getPatternPerformance(state.currentPattern);
      return {
        'pattern': performance.patternType.displayName,
        'totalSignals': performance.totalSignals,
        'recentSignals': performance.recentSignals,
        'lastSignalTime': performance.lastSignalTime?.toIso8601String(),
        'isEnabled': performance.isEnabled,
        'onlineMetricsHealth': performance.onlineMetricsHealth,
      };
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Pattern performance query failed: $e');
      }
      return {'error': e.toString()};
    }
  }

  /// 🆕 시스템 헬스 리포트
  Future<Map<String, dynamic>> getSystemHealthReport() async {
    try {
      final report = await _usecase.getSystemHealthReport();
      return {
        'version': report.version,
        'status': report.status,
        'uptime': report.uptime,
        'totalProcessedTrades': report.totalProcessedTrades,
        'activePatterns': report.activePatterns,
        'trackedMarkets': report.trackedMarkets,
        'isHealthy': report.isHealthy,
        'onlineMetricsHealth': report.onlineMetricsHealth,
      };
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ System health report query failed: $e');
      }
      return {'error': e.toString()};
    }
  }

  /// 🆕 신호 통계 계산
  Map<String, dynamic> calculateSignalStats() {
    return _usecase.calculateSignalStats(state.signals).toJson();
  }

  // ==========================================================================
  // 기존 호환성 메서드들 (V4.1 개선)
  // ==========================================================================

  /// 시그널 통계 정보 (기존 호환성)
  Map<String, dynamic> getSignalStats() {
    return state.signalStats;
  }

  /// 시그널 목록 적용 (정렬 등) - V4.1 개선
  List<Signal> apply(List<Signal> signals) {
    return _applySorting(signals);
  }

  /// 사용 가능한 패턴 목록 - V4.1 개선
  List<String> get availablePatterns => 
      PatternType.values.map((p) => p.name).toList();

  /// 패턴 표시명 목록 - V4.1 개선
  List<String> get patternDisplayNames => 
      PatternType.values.map((p) => p.displayName).toList();

  /// 현재 패턴의 시간 윈도우 - V4.1 개선
  int get currentTimeWindow => state.currentPattern.timeWindowMinutes;

  /// 🆕 V4.1 현재 패턴의 기본 신뢰도
  double get currentPatternDefaultConfidence => state.currentPattern.defaultConfidence;

  /// 🆕 V4.1 현재 패턴의 쿨다운 시간
  int get currentPatternCooldownSeconds => state.currentPattern.defaultCooldownSeconds;

  // ==========================================================================
  // 🆕 V4.1 설정 관리
  // ==========================================================================

  /// 🆕 현재 설정 내보내기
  Map<String, dynamic> exportConfiguration() {
    final controller = _ref.read(signalPatternController);
    return controller.exportConfiguration();
  }

  /// 🆕 설정 가져오기
  void importConfiguration(Map<String, dynamic> config) {
    try {
      final controller = _ref.read(signalPatternController);
      controller.importConfiguration(config);
      
      // 현재 상태 새로고침
      final newThreshold = _usecase.getPatternThreshold(state.currentPattern);
      final newEnabled = _usecase.isPatternEnabled(state.currentPattern);
      
      state = state.copyWith(
        threshold: newThreshold,
        isPatternEnabled: newEnabled,
      );
      
      if (AppConfig.enableTradeLog) {
        log.i('📥 Configuration imported successfully');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Configuration import failed: $e');
      }
      
      state = state.copyWith(
        errorMessage: 'Configuration import failed: ${e.toString()}'
      );
    }
  }

  /// 🆕 에러 메시지 클리어
  void clearError() {
    state = state.copyWith(errorMessage: null);
  }

  // ==========================================================================
  // 리소스 정리 (V4.1 확장)
  // ==========================================================================

  @override
  void dispose() {
    _subscription?.cancel();
    _healthSubscription?.cancel();
    _healthUpdateTimer?.cancel();
    
    if (AppConfig.enableTradeLog) {
      log.i('🔥 Signal Controller V4.1 disposed');
    }
    
    super.dispose();
  }
}

/// Provider 선언 - V4.1
final signalControllerProvider =
    StateNotifierProvider<SignalController, SignalState>((ref) {
  final usecase = ref.read(signalUsecaseProvider);
  return SignalController(usecase, ref);
});

/// 🆕 V4.1 확장 - 시스템 모니터링 Provider
final signalSystemMonitorProvider = StreamProvider.autoDispose<Map<String, dynamic>>((ref) async* {
  final controller = ref.watch(signalControllerProvider.notifier);
  
  yield* Stream.periodic(const Duration(seconds: 15), (_) async {
    final performance = await controller.getPatternPerformance();
    final systemHealth = await controller.getSystemHealthReport();
    final signalStats = controller.calculateSignalStats();
    
    return {
      'timestamp': DateTime.now().toIso8601String(),
      'performance': performance,
      'systemHealth': systemHealth,
      'signalStats': signalStats,
      'version': 'V4.1-Online',
    };
  }).asyncMap((event) => event);
});\n\n// ====== lib/presentation/controllers/market_mood_controller.dart ======\n
// lib/presentation/controllers/market_mood_controller.dart
// 🎮 Presentation Layer: Market Mood 컨트롤러 (리팩토링된 Provider에 맞춰 수정)

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../core/utils/date_time.dart';
import '../pages/market_mood_page.dart';

/// 🎮 마켓무드 페이지 컨트롤러
class MarketMoodPageController extends StateNotifier<MarketMoodPageState> {
  final Ref _ref;

  MarketMoodPageController(this._ref) : super(MarketMoodPageState.initial()) {
    // [수정] 초기화 로직을 생성자에서 분리하여 명확하게 관리
    _initialize();
  }

  /// [수정] 초기화 및 실시간 리스닝 시작
  void _initialize() {
    // 1. 초기 상태 설정
    final initialState = _ref.read(marketMoodSystemProvider);
    state = state.copyWith(
      isLoading: initialState.isLoading,
      error: initialState.hasError ? '데이터 로딩 중 오류 발생' : null,
      systemState: initialState,
    );

    // 2. 실시간 상태 변화 감지 및 동기화
    //    이제 최종 상태인 marketMoodSystemProvider만 listen하면 됩니다.
    _ref.listen<MarketMoodSystemState>(
      marketMoodSystemProvider,
      (previous, next) {
        state = state.copyWith(
          isLoading: next.isLoading,
          error: next.hasError ? '데이터 로딩 중 오류 발생' : null,
          systemState: next,
        );
      },
    );
  }

  /// [수정] 데이터 로드 메서드 제거 -> _initialize()로 통합
  // Future<void> loadData() async { ... }

  /// 수동 새로고침
  void refresh() {
    // [수정] controller를 인스턴스 변수로 두지 않고 필요 시 read
    final controller = _ref.read(marketMoodControllerProvider);
    controller.refresh();
  }

  /// [수정] 현재 마켓무드 조회 (동기식으로 변경)
  MarketMood getCurrentMood() {
    // .when()을 사용할 필요 없이 직접 값을 반환합니다.
    return _ref.read(currentMarketMoodProvider);
  }

  /// 환율 조회 (Future 대응 - 이 부분은 변경 없음)
  Future<double> getExchangeRate() async {
    final exchangeAsync = _ref.read(exchangeRateProvider);
    return exchangeAsync.when(
      data: (rate) => rate,
      loading: () => 1400.0,
      error: (_, __) => 1400.0,
    );
  }

  /// [수정] 볼륨 비교 데이터 조회 (동기식으로 변경)
  ComparisonData getVolumeComparisons() {
    // .when()을 사용할 필요 없이 직접 값을 반환합니다.
    return _ref.read(volumeComparisonProvider);
  }

  /// 시스템 헬스체크
  Future<void> checkSystemHealth() async {
    try {
      final controller = _ref.read(marketMoodControllerProvider);
      final health = await controller.getSystemHealth();

      state = state.copyWith(
        systemHealth: health,
        lastHealthCheck: DateTime.now(),
      );
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// 환율 새로고침
  Future<void> refreshExchangeRate() async {
    try {
      final controller = _ref.read(marketMoodControllerProvider);
      await controller.refreshExchangeRate();
      // loadData() 대신 systemProvider가 자동으로 갱신하므로 별도 호출 불필요
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// 시스템 상태 로깅
  Future<void> logSystemStatus() async {
    try {
      final controller = _ref.read(marketMoodControllerProvider);
      await controller.logSystemStatus();
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// 분위기 이모지 조회
  String getMoodEmoji(MarketMood mood) {
    return switch (mood) {
      MarketMood.bull => '🚀',
      MarketMood.weakBull => '🔥',
      MarketMood.sideways => '⚖️',
      MarketMood.bear => '💧',
      MarketMood.deepBear => '🧊',
    };
  }

  /// 분위기 이름 조회
  String getMoodName(MarketMood mood) {
    return switch (mood) {
      MarketMood.bull => '불장',
      MarketMood.weakBull => '약불장',
      MarketMood.sideways => '중간장',
      MarketMood.bear => '물장',
      MarketMood.deepBear => '얼음장',
    };
  }

  /// [수정] 분위기 요약 텍스트 조회 (동기식으로 변경)
  String getMoodSummary() {
    // .when()을 사용할 필요 없이 직접 값을 반환합니다.
    return _ref.read(marketMoodSummaryProvider);
  }

  /// 볼륨 포맷팅 (한국 원화)
  Future<String> formatVolume(double volumeUsd) async {
    final rate = await getExchangeRate();
    final volumeKrw = volumeUsd * rate;

    if (volumeKrw >= 1e12) {
      final trillions = (volumeKrw / 1e12).toStringAsFixed(0);
      return '${_addCommas(trillions)}조원';
    }
    if (volumeKrw >= 1e8) {
      final hundreds = (volumeKrw / 1e8).toStringAsFixed(0);
      return '${_addCommas(hundreds)}억원';
    }
    return '${(volumeKrw / 1e8).toStringAsFixed(1)}억원';
  }

  /// 시가총액 포맷팅 (한국 원화)
  Future<String> formatMarketCap(double marketCapUsd) async {
    final rate = await getExchangeRate();
    // [수정] marketCapKrw 변수 선언
    final marketCapKrw = marketCapUsd * rate; 

    // [수정] volumeKrw -> marketCapKrw로 변경
    if (marketCapKrw >= 1e12) { 
      final trillions = (marketCapKrw / 1e12).toStringAsFixed(0);
      return '${_addCommas(trillions)}조원';
    }
    // [수정] volumeKrw -> marketCapKrw로 변경
    if (marketCapKrw >= 1e8) {
      final hundreds = (marketCapKrw / 1e8).toStringAsFixed(0);
      return '${_addCommas(hundreds)}억원';
    }
    // [수정] volumeKrw -> marketCapKrw로 변경
    return '${(marketCapKrw / 1e8).toStringAsFixed(1)}억원';
  }

  /// 업데이트 시간 포맷팅
  String formatUpdateTime(DateTime updatedAt) {
    return updatedAt.hhmmss(); // DateTime extension 사용
  }

  /// 비교 결과 값 포맷팅
  String formatComparisonValue(ComparisonResult result) {
    if (result.isReady && result.changePercent != null) {
      final value = result.changePercent!;
      final arrow = value > 5 ? '↗️' : value < -5 ? '↘️' : '➡️';
      return '${value >= 0 ? '+' : ''}${value.toStringAsFixed(1)}% $arrow';
    }
    return '${(result.progressPercent * 100).round()}% (${result.status})';
  }

  /// 진행률 계산
  int getProgressPercent(ComparisonResult result) {
    return (result.progressPercent * 100).round();
  }

  /// 하이라이트 색상 판단
  bool isHighlight(ComparisonResult result) {
    return result.isReady && (result.changePercent ?? 0) > 5;
  }

  /// 경고 색상 판단
  bool isWarning(ComparisonResult result) {
    return result.isReady && (result.changePercent ?? 0) < -5;
  }

  /// [수정] 데이터 스트림 리스닝 메서드 제거 -> _initialize()로 통합
  // void startListening() { ... }

  /// 숫자에 콤마 추가
  String _addCommas(String numberStr) {
    final parts = numberStr.split('.');
    final integerPart = parts[0];
    final reversedInteger = integerPart.split('').reversed.join('');
    final withCommas = reversedInteger
        .replaceAllMapped(RegExp(r'.{3}'), (match) => '${match.group(0)},')
        .split('')
        .reversed
        .join('');
    final result =
        withCommas.startsWith(',') ? withCommas.substring(1) : withCommas;
    return parts.length > 1 ? '$result.${parts[1]}' : result;
  }
}

/// 🎮 마켓무드 페이지 상태
class MarketMoodPageState {
  final bool isLoading;
  final String? error;
  final MarketMoodSystemState? systemState;
  final Map<String, dynamic>? systemHealth;
  final DateTime? lastHealthCheck;

  const MarketMoodPageState({
    required this.isLoading,
    this.error,
    this.systemState,
    this.systemHealth,
    this.lastHealthCheck,
  });

  factory MarketMoodPageState.initial() {
    return const MarketMoodPageState(isLoading: true); // [수정] 초기 상태는 로딩중
  }

  MarketMoodPageState copyWith({
    bool? isLoading,
    String? error,
    MarketMoodSystemState? systemState,
    Map<String, dynamic>? systemHealth,
    DateTime? lastHealthCheck,
  }) {
    return MarketMoodPageState(
      isLoading: isLoading ?? this.isLoading,
      error: error, // [수정] null로 덮어쓰기 가능하도록 ?? this.error 제거
      systemState: systemState ?? this.systemState,
      systemHealth: systemHealth ?? this.systemHealth,
      lastHealthCheck: lastHealthCheck ?? this.lastHealthCheck,
    );
  }
}

/// 🎮 마켓무드 페이지 컨트롤러 Provider
final marketMoodPageControllerProvider = StateNotifierProvider.autoDispose<
    MarketMoodPageController, MarketMoodPageState>((ref) {
  // [수정] 컨트롤러 생성 시 바로 _initialize()가 호출되므로 별도 로직 불필요
  return MarketMoodPageController(ref);
});

/// 🎮 모달 오버레이 관리자 (실제 MarketMoodPage 사용)
class MarketMoodModalManager {
  static OverlayEntry? _overlayEntry;

  /// 모달 표시
  static void show({
    required BuildContext context,
    required WidgetRef ref,
    required Offset position,
    required double statusIconSize,
    required MarketMoodData data,
  }) {
    hide(); // 기존 모달 제거

    _overlayEntry = OverlayEntry(
      builder: (context) => MarketMoodModalOverlay(
        position: position,
        statusIconSize: statusIconSize,
        ref: ref,
        data: data,
      ),
    );

    Overlay.of(context).insert(_overlayEntry!);
  }

  /// 모달 숨기기
  static void hide() {
    _overlayEntry?.remove();
    _overlayEntry = null;
  }
}

/// 🎮 모달 오버레이 (실제 MarketMoodPage 사용)
class MarketMoodModalOverlay extends StatelessWidget {
  final Offset position;
  final double statusIconSize;
  final WidgetRef ref;
  final MarketMoodData data;

  const MarketMoodModalOverlay({
    super.key,
    required this.position,
    required this.statusIconSize,
    required this.ref,
    required this.data,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => MarketMoodModalManager.hide(),
      behavior: HitTestBehavior.translucent,
      child: Material(
        color: Colors.transparent,
        child: Stack(
          children: [
            // 투명 배경
            Positioned.fill(
              child: Container(color: Colors.transparent),
            ),
            // 실제 MarketMoodPage 위젯
            Positioned(
              left: position.dx,
              top: position.dy,
              child: Consumer(
                builder: (context, ref, child) {
                  return MarketMoodPage(
                    statusIconSize: statusIconSize,
                    data: data,
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}\n\n// ====== lib/presentation/controllers/volume_controller.dart ======\n
// lib/presentation/controllers/volume_controller.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/volume_provider.dart'; // 🆕 volume_provider 사용
import '../../domain/entities/volume.dart';

/// 🎯 심플한 볼륨 컨트롤러 - VolumeTimeFrameController 활용
class VolumeController extends StateNotifier<VolumeControllerState> {
  final Ref ref;
  
  VolumeController(this.ref) : super(const VolumeControllerState());

  /// 🆕 Top 50/100 토글
  void toggleTopLimit() {
    state = state.copyWith(isTop100: !state.isTop100);
  }

  /// 🆕 현재 표시 개수 (50 또는 100)
  int get currentLimit => state.isTop100 ? 100 : 50;

  /// 🆕 현재 표시 모드 이름
  String get currentLimitName => state.isTop100 ? 'Top 100' : 'Top 50';

  /// 🆕 Top 100 모드 여부
  bool get isTop100 => state.isTop100;
  void setTimeFrame(String timeFrame, int index) {
    // volume_provider.dart의 VolumeTimeFrameController 사용
    final controller = ref.read(volumeTimeFrameController);
    controller.updateTimeFrame(timeFrame, index);
  }

  /// 현재 시간대
  String get currentTimeFrame => ref.read(volumeTimeFrameController).currentTimeFrame;

  /// 현재 인덱스
  int get currentIndex => ref.read(volumeTimeFrameController).currentIndex;

  /// 사용 가능한 시간대들
  List<String> get availableTimeFrames => ref.read(volumeTimeFrameController).availableTimeFrames;

  /// 시간대 한국어 이름
  String getTimeFrameName(String timeFrame) {
    return ref.read(volumeTimeFrameController).getTimeFrameName(timeFrame);
  }

  /// 볼륨 데이터를 거래량 순으로 정렬 + 🎯 동적 순위 제한 (Top 50/100)
  List<Volume> sortVolumeData(List<Volume> volumeData) {
    final filteredData = volumeData.where((v) => v.totalVolume > 0).toList();
    filteredData.sort((a, b) => b.totalVolume.compareTo(a.totalVolume)); // 내림차순
    
    // 🚀 현재 설정에 따라 50개 또는 100개로 제한
    return filteredData.take(currentLimit).toList();
  }

  /// 코인명 필터링
  List<Volume> filterByMarket(List<Volume> sortedData, String? marketFilter) {
    if (marketFilter == null || marketFilter.isEmpty) {
      return sortedData;
    }
    
    final upper = marketFilter.toUpperCase();
    return sortedData.where((volume) => volume.market.contains(upper)).toList();
  }

  /// 수동 리셋 메서드들
  void resetCurrentTimeFrame() {
    ref.read(volumeTimeFrameController).resetCurrentTimeFrame();
  }

  void resetAllTimeFrames() {
    ref.read(volumeTimeFrameController).resetAllTimeFrames();
  }

  /// 다음 리셋 시간 조회
  DateTime? getNextResetTime() {
    return ref.read(volumeTimeFrameController).getNextResetTime();
  }
}

/// 🆕 VolumeController 상태 관리
class VolumeControllerState {
  final bool isTop100;

  const VolumeControllerState({
    this.isTop100 = false, // 기본값: Top 50
  });

  VolumeControllerState copyWith({
    bool? isTop100,
  }) {
    return VolumeControllerState(
      isTop100: isTop100 ?? this.isTop100,
    );
  }
}

/// Provider 선언 - StateNotifierProvider로 변경!
final volumeControllerProvider = StateNotifierProvider<VolumeController, VolumeControllerState>((ref) => VolumeController(ref));\n\n// ====== lib/presentation/controllers/trade_controller.dart ======\n
// lib/presentation/controllers/trade_controller.dart
import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/config/app_config.dart';
import '../../core/di/trade_provider.dart'; // usecaseProvider, repoProvider
import '../../core/error/app_exception.dart';
import '../../core/extensions/result.dart';
import '../../domain/entities/trade.dart';
import '../../domain/usecases/trade_usecase.dart';

/// 화면 상태를 캡슐화하는 immutable 모델
class TradeState {
  final List<Trade> trades;
  final bool isLoading;
  final bool isConnected;
  final double threshold;
  final int selectedIndex;
  final bool isRangeMode; // 🆕 구간/누적 모드 추가
  final String? errorMessage;

  const TradeState({
    this.trades = const [],
    this.isLoading = false,
    this.isConnected = false,
    this.threshold = 20000000,
    this.selectedIndex = 0,
    this.isRangeMode = true, // 🆕 기본값: 구간 모드
    this.errorMessage,
  });

  TradeState copyWith({
    List<Trade>? trades,
    bool? isLoading,
    bool? isConnected,
    double? threshold,
    int? selectedIndex,
    bool? isRangeMode, // 🆕 추가
    String? errorMessage,
  }) {
    return TradeState(
      trades: trades ?? this.trades,
      isLoading: isLoading ?? this.isLoading,
      isConnected: isConnected ?? this.isConnected,
      threshold: threshold ?? this.threshold,
      selectedIndex: selectedIndex ?? this.selectedIndex,
      isRangeMode: isRangeMode ?? this.isRangeMode, // 🆕 추가
      errorMessage: errorMessage,
    );
  }
}

/// Trade 화면 전용 ViewModel
class TradeController extends StateNotifier<TradeState> {
  final TradeUsecase _usecase;
  final Ref _ref;
  StreamSubscription<Result<List<Trade>, AppException>>? _subscription;

  TradeController(this._usecase, this._ref) : super(const TradeState());

  /// 임계값 및 인덱스 설정 후 스트림 구독
  void setThreshold(double threshold, int index, List<String> markets) {
    final repository = _ref.read(repoProvider);
    repository.updateThreshold(threshold);
    
    state = state.copyWith(
      threshold: threshold,
      selectedIndex: index,
      isLoading: true,
      errorMessage: null,
    );
    _subscription?.cancel();
    _subscription = _usecase
        .filterTrades(threshold, markets)
        .listen(_handleResult);
  }

  /// 🆕 구간/누적 모드 토글
  void toggleRangeMode() {
    final newMode = !state.isRangeMode;
    final repository = _ref.read(repoProvider);
    repository.updateRangeMode(newMode);
    
    state = state.copyWith(isRangeMode: newMode);
  }

  /// 🆕 현재 설정에 따른 표시 텍스트 생성 - 수정된 버전
  String getThresholdDisplayText() {
    final threshold = state.threshold;
    final thresholds = availableThresholds;
    final currentIndex = thresholds.indexOf(threshold);
    
    if (state.isRangeMode) {
      // 🆕 구간 모드: "금액 레인지: 2천만 ~ 5천만원"
      if (currentIndex >= 0 && currentIndex < thresholds.length - 1) {
        final nextThreshold = thresholds[currentIndex + 1];
        final currentLabel = AppConfig.filterNames[threshold] ?? threshold.toStringAsFixed(0);
        final nextLabel = AppConfig.filterNames[nextThreshold] ?? nextThreshold.toStringAsFixed(0);
        return '금액 레인지: $currentLabel ~ $nextLabel원';
      } else {
        // 마지막 구간
        final currentLabel = AppConfig.filterNames[threshold] ?? threshold.toStringAsFixed(0);
        return '금액 레인지: $currentLabel원 이상';
      }
    } else {
      // 🔄 누적 모드: "최소 거래금액: 5천만원"
      final currentLabel = AppConfig.filterNames[threshold] ?? threshold.toStringAsFixed(0);
      return '최소 거래금액: $currentLabel원';
    }
  }

  /// 🆕 토글 버튼 텍스트
  String get toggleButtonText => state.isRangeMode ? '구간' : '누적';

  void _handleResult(Result<List<Trade>, AppException> result) {
    result.when(
      ok: (trades) {
        state = state.copyWith(
          trades: trades,
          isLoading: false,
          isConnected: true,
          errorMessage: null,
        );
      },
      err: (e) {
        state = state.copyWith(
          isLoading: false,
          isConnected: false,
          errorMessage: e.message,
        );
      },
    );
  }

  /// 재연결/새로고침: markets만 받아서 내부적으로 setThreshold 호출
  void refresh(List<String> markets) {
    setThreshold(state.threshold, state.selectedIndex, markets);
  }

  /// 거래 목록 추가 필터 (시장명)
  List<Trade> filterByMarket(String? marketFilter) {
    if (marketFilter == null || marketFilter.isEmpty) {
      return state.trades;
    }
    final upper = marketFilter.toUpperCase();
    return state.trades.where((t) => t.market.contains(upper)).toList();
  }

  /// 거래 목록 정렬
  void sortTrades(String field, bool ascending) {
    final list = [...state.trades];
    list.sort((a, b) {
      dynamic aValue;
      dynamic bValue;
      switch (field) {
        case 'market':
          aValue = a.market;
          bValue = b.market;
          break;
        case 'price':
          aValue = a.price;
          bValue = b.price;
          break;
        case 'volume':
          aValue = a.volume;
          bValue = b.volume;
          break;
        case 'total':
          aValue = a.total;
          bValue = b.total;
          break;
        case 'timestamp':
          aValue = a.timestampMs;
          bValue = b.timestampMs;
          break;
        default:
          aValue = a.timestampMs;
          bValue = b.timestampMs;
      }
      final cmp = aValue is Comparable && bValue is Comparable
          ? aValue.compareTo(bValue)
          : 0;
      return ascending ? cmp : -cmp;
    });
    state = state.copyWith(trades: list);
  }

  /// 거래 목록 필터링/정렬 적용
  List<Trade> apply(List<Trade> trades) {
    // Repository에서 이미 필터링 처리되므로 정렬만
    final filtered = [...trades];
    filtered.sort((a, b) => b.timestampMs.compareTo(a.timestampMs));
    return filtered;
  }

  /// 사용 가능한 임계값 옵션들
  List<double> get availableThresholds =>
    AppConfig.tradeFilters.where((f) => f >= 20000000).toList();

  @override
  void dispose() {
    _subscription?.cancel();
    super.dispose();
  }
}

/// Provider 선언
final tradeControllerProvider =
    StateNotifierProvider<TradeController, TradeState>((ref) {
  final usecase = ref.read(usecaseProvider);
  return TradeController(usecase, ref);
});\n\n// ====== lib/presentation/pages/main_page.dart ======\n
// lib/presentation/pages/main_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/services.dart'; // 🎯 HapticFeedback용
import '../../core/di/app_providers.dart';
import '../../shared/widgets/common_app_bar.dart';
import 'trade_page.dart';
import 'volume_page.dart'; // 🆕 VolumePage import 추가
import 'sector_page.dart'; // 🆕 SectorPage import 추가
import 'surge_page.dart'; // 🚀 SurgePage import 추가

/// 🎯 메인 페이지 - PageView로 4개 화면 관리
class MainPage extends ConsumerStatefulWidget {
  const MainPage({Key? key}) : super(key: key);

  @override
  ConsumerState<MainPage> createState() => _MainPageState();
}

class _MainPageState extends ConsumerState<MainPage> with TickerProviderStateMixin {
  late PageController _pageController;
  late AnimationController _animationController;
  
  // ✅ TradePage의 ScrollController를 위한 각 페이지별 관리
  final Map<int, ScrollController> _pageScrollControllers = {};
  
  // 4개 페이지 정보
  final List<PageInfo> _pages = [
    PageInfo(
      index: 0,
      title: '급등락',
      icon: Icons.trending_up, // ✅ 그대로 유지
      builder: (scrollController) => SurgePage(scrollController: scrollController), // 🚀 SurgePage 연결!
    ),
    PageInfo(
      index: 1,
      title: '체결',
      icon: Icons.monetization_on, // ✅ 변경: show_chart → monetization_on 💰
      builder: (scrollController) => TradePage(scrollController: scrollController), // ✅ ScrollController 전달
    ),
    PageInfo(
      index: 2,
      title: '볼륨',
      icon: Icons.bar_chart, // ✅ 그대로 유지
      builder: (scrollController) => VolumePage(scrollController: scrollController), // 🆕 VolumePage 연결!
    ),
    PageInfo(
      index: 3,
      title: '섹터',
      icon: Icons.pie_chart, // ✅ 변경: business → pie_chart 🥧
      builder: (scrollController) => SectorPage(scrollController: scrollController), // 🆕 SectorPage 연결!
    ),
  ];

  @override
  void initState() {
    super.initState();
    
    // PageController 초기화 (체결 페이지를 기본으로)
    _pageController = PageController(initialPage: 1);
    
    // 애니메이션 컨트롤러 초기화 
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    // ✅ 각 페이지별 ScrollController 초기화
    for (int i = 0; i < _pages.length; i++) {
      _pageScrollControllers[i] = ScrollController();
    }
    
    // 초기 페이지 인덱스 설정
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(selectedTabProvider.notifier).state = 1; // 체결 페이지
    });
  }

  @override
  void dispose() {
    _pageController.dispose();
    _animationController.dispose();
    // ✅ 모든 ScrollController 해제
    for (final controller in _pageScrollControllers.values) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // ✅ GestureDetector 제거 - 순수하게 PrimaryScrollController가 상태바 터치 처리
    return Scaffold(
      appBar: CommonAppBar(
        title: '', // 빈 제목 (슬라이드 인디케이터가 들어갈 자리)
        pages: _pages,
        pageController: _pageController,
        animationController: _animationController,
      ),
      body: SafeArea( // ✅ SafeArea 추가
        child: PageView.builder(
          controller: _pageController,
          onPageChanged: _onPageChanged,
          itemCount: _pages.length,
          // ✅ iOS 스타일 physics + 스크롤 충돌 방지
          physics: const BouncingScrollPhysics(
            parent: AlwaysScrollableScrollPhysics(),
          ),
          // ✅ 스크롤 방향 명시 (수평 스와이프)
          scrollDirection: Axis.horizontal,
          itemBuilder: (context, index) {
            // ✅ 각 페이지에 해당하는 ScrollController 전달
            final scrollController = _pageScrollControllers[index]!;
            return _pages[index].builder(scrollController);
          },
        ),
      ),
    );
  }

  /// 페이지 변경 처리
  void _onPageChanged(int index) {
    HapticFeedback.lightImpact(); // 🎯 스와이프 햅틱 추가!

    // Provider 상태 업데이트
    ref.read(selectedTabProvider.notifier).state = index;
    
    // 애니메이션 트리거
    _animationController.forward().then((_) {
      _animationController.reset();
    });
    
    debugPrint('📱 페이지 변경: ${_pages[index].title} (index: $index)');
  }

  /// 🎯 외부에서 페이지 이동 (슬라이드 인디케이터 클릭 시)
  void goToPage(int index) {
    if (index >= 0 && index < _pages.length) {
      _pageController.animateToPage(
        index,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }
}

/// 📄 페이지 정보 클래스
class PageInfo {
  final int index;
  final String title;
  final IconData icon;
  final Widget Function(ScrollController scrollController) builder; // ✅ ScrollController 파라미터 추가

  const PageInfo({
    required this.index,
    required this.title,
    required this.icon,
    required this.builder,
  });
}\n\n// ====== lib/presentation/pages/trade_page.dart ======\n
// lib/presentation/pages/trade_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/services.dart'; // HapticFeedback용
import '../../core/config/app_config.dart';
import '../../core/di/trade_provider.dart';
import '../../core/di/settings_provider.dart'; // 🆕 설정 provider 추가
import '../../domain/entities/app_settings.dart'; // 🆕 SliderPosition enum
import '../controllers/trade_controller.dart';
import '../widgets/trade_tile.dart';

class TradePage extends ConsumerWidget {
  final ScrollController scrollController; // ✅ MainPage에서 전달받는 ScrollController
  
  const TradePage({
    Key? key,
    required this.scrollController, // ✅ 필수 파라미터
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // 🆕 Controller 기반 시스템으로 완전 통일
    final controller = ref.watch(tradeControllerProvider.notifier);
    final state = ref.watch(tradeControllerProvider);
    final thresholds = AppConfig.tradeFilters.where((f) => f >= 20000000).toList();
    
    // 거래 스트림 (기존 유지)
    final tradesAsync = ref.watch(tradeListProvider);
    
    // markets 정보 필요
    final marketsAsync = ref.watch(marketsProvider);
    
    // 슬라이더 위치 설정
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;

    // 슬라이더 위젯 생성
    final sliderWidget = _buildSliderWidget(thresholds, controller, state, marketsAsync, ref);
    
    // 거래 리스트 위젯 생성
    final tradeListWidget = _buildTradeList(tradesAsync, controller, scrollController, thresholds, state, context);

    return PrimaryScrollController(
      controller: scrollController,
      child: Column(
        children: [
          // 슬라이더 위치에 따른 조건부 배치
          if (sliderPosition == SliderPosition.top) sliderWidget,
          
          // 거래 리스트 (항상 중간)
          Expanded(child: tradeListWidget),
          
          // 슬라이더가 하단일 때
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// 🆕 슬라이더 위젯 생성 - Controller 완전 통일
  Widget _buildSliderWidget(
    List<double> thresholds, 
    TradeController controller, 
    TradeState state,
    AsyncValue<List<String>> marketsAsync,
    WidgetRef ref,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 🆕 상단: 표시 텍스트 + 토글 버튼
          Row(
            children: [
              // 🆕 동적 텍스트 (구간/누적에 따라 변경)
              Expanded(
                child: Text(
                  controller.getThresholdDisplayText(),
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ),
              // 🆕 구간/누적 토글 버튼 (Volume Top50/100 스타일과 동일)
              GestureDetector(
                onTap: () {
                  if (ref.read(appSettingsProvider).isHapticEnabled) {
                    HapticFeedback.lightImpact(); // 🎯 토글 버튼 햅틱 피드백
                  }
                  controller.toggleRangeMode();
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: Colors.orange,
                      width: 1.5,
                    ),
                    // 🎯 구간: 오렌지 테두리만, 누적: 오렌지 몸통 + 흰글씨
                    color: state.isRangeMode ? Colors.transparent : Colors.orange,
                  ),
                  child: Text(
                    controller.toggleButtonText,
                    style: TextStyle(
                      color: state.isRangeMode ? Colors.orange : Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 6),
          // 🆕 슬라이더 - Controller 사용으로 변경
          Slider(
            value: state.selectedIndex.toDouble(),
            min: 0,
            max: (thresholds.length - 1).toDouble(),
            divisions: thresholds.length - 1,
            label: AppConfig.filterNames[thresholds[state.selectedIndex]] ?? thresholds[state.selectedIndex].toStringAsFixed(0),
            onChanged: (v) {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact(); // 🎯 원래 있던 슬라이더 햅틱 피드백
              }
              final i = v.round();
              final threshold = thresholds[i];
              
              // 🆕 Controller를 통해 처리
              marketsAsync.whenData((markets) {
                controller.setThreshold(threshold, i, markets);
              });
            },
          ),
        ],
      ),
    );
  }

  /// 🆕 거래 리스트 위젯 생성 - 스크롤바 개선 (20% 축소 + 사용시만 표시)
  Widget _buildTradeList(
    AsyncValue tradesAsync, 
    TradeController controller, 
    ScrollController scrollController,
    List<double> thresholds,
    TradeState state,
    BuildContext context,
  ) {
    return tradesAsync.when(
      data: (list) {
        final viewList = controller.apply(list);
        if (viewList.isEmpty) {
          return Center(
            child: Text(
              '포착된 체결이 없습니다.\n(임계값: ${AppConfig.filterNames[thresholds[state.selectedIndex]] ?? thresholds[state.selectedIndex].toStringAsFixed(0)})',
              textAlign: TextAlign.center,
              style: TextStyle(color: Theme.of(context).hintColor, fontSize: 16),
            ),
          );
        }

        // 🎯 스크롤바 개선: 20% 축소 + 사용시만 표시
        return RawScrollbar(
          controller: scrollController,
          thumbVisibility: false, // ✅ 평소엔 숨김
          trackVisibility: false, // ✅ 트랙도 숨김
          thickness: 6.4, // ✅ 20% 축소 (8 → 6.4)
          radius: const Radius.circular(3.2), // ✅ 반지름도 20% 축소 (4 → 3.2)
          thumbColor: Colors.orange.withValues(alpha: 0.5),
          trackColor: Colors.transparent,
          interactive: true, // 드래그 가능
          minThumbLength: 40, // ✅ 최소 썸 길이도 20% 축소 (50 → 40)
          child: ListView.builder(
            controller: scrollController,
            // 🍎 iOS 스타일 스크롤 물리 효과
            physics: const BouncingScrollPhysics(
              parent: AlwaysScrollableScrollPhysics(),
            ),
            padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16), // ✅ 우측 패딩 조정
            itemCount: viewList.length,
            itemBuilder: (_, i) => TradeTile(trade: viewList[i]),
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (e, _) => Center(child: Text('체결 로드 중 오류: $e')),
    );
  }
}\n\n// ====== lib/presentation/pages/splash_page.dart ======\n
// lib/presentation/pages/splash_page.dart

import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'main_page.dart';

class SplashPage extends StatefulWidget {
  const SplashPage({Key? key}) : super(key: key);

  @override
  State<SplashPage> createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> {
  VideoPlayerController? _controller;
  bool _isVideoInitialized = false;
  bool _hasNavigated = false;

  @override
  void initState() {
    super.initState();
    _initializeVideo();
    
    // 안전망: 5초 후 강제 이동 (비디오 문제 시)
    Future.delayed(const Duration(seconds: 5), () {
      if (!_hasNavigated && mounted) {
        _navigateToMain();
      }
    });
  }

  Future<void> _initializeVideo() async {
    try {
      _controller = VideoPlayerController.asset('assets/noonchit_intro_84frames.mp4');
      
      await _controller!.initialize();
      
      if (mounted) {
        setState(() {
          _isVideoInitialized = true;
        });
        
        // 비디오 설정
        _controller!.setVolume(0.0); // 음소거
        _controller!.setLooping(false);
        
        // 재생 완료 리스너
        _controller!.addListener(_videoListener);
        
        // 재생 시작
        _controller!.play();
      }
    } catch (e) {
      // 비디오 로드 실패 시 즉시 메인으로 이동
      debugPrint('Video initialization failed: $e');
      if (mounted) {
        _navigateToMain();
      }
    }
  }

  void _videoListener() {
    if (_controller != null && _controller!.value.position >= _controller!.value.duration) {
      // 비디오 재생 완료
      _navigateToMain();
    }
  }

  void _navigateToMain() {
    if (_hasNavigated) return;
    _hasNavigated = true;
    
    if (mounted) {
      Navigator.of(context).pushReplacement(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => const MainPage(),
          transitionDuration: const Duration(milliseconds: 300),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
      );
    }
  }

  @override
  void dispose() {
    _controller?.removeListener(_videoListener);
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF121212), // 어두운 배경
      body: Center(
        child: _isVideoInitialized && _controller != null
            ? AspectRatio(
                aspectRatio: _controller!.value.aspectRatio,
                child: VideoPlayer(_controller!),
              )
            : _buildLoadingFallback(),
      ),
    );
  }

  Widget _buildLoadingFallback() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        // 로딩 중이거나 비디오 실패 시 대체 UI
        Icon(
          Icons.currency_bitcoin,
          size: 64,
          color: Colors.orange.withValues(alpha: 0.8),
        ),
        const SizedBox(height: 16),
        Text(
          'NOONCHIT',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.white.withValues(alpha: 0.9),
            letterSpacing: 2.0,
          ),
        ),
        const SizedBox(height: 24),
        SizedBox(
          width: 32,
          height: 32,
          child: CircularProgressIndicator(
            strokeWidth: 3,
            valueColor: AlwaysStoppedAnimation<Color>(
              Colors.orange.withValues(alpha: 0.8),
            ),
          ),
        ),
      ],
    );
  }
}\n\n// ====== lib/presentation/pages/market_mood_page.dart ======\n
// lib/presentation/pages/market_mood_page.dart
// 📱 Presentation Layer: Market Mood 페이지 (모달 형태, 클린 아키텍처)

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../controllers/market_mood_controller.dart';

/// 📱 마켓무드 상세 페이지 (모달 형태)
class MarketMoodPage extends ConsumerStatefulWidget {
  final double statusIconSize;
  final MarketMoodData data;

  const MarketMoodPage({
    super.key,
    required this.statusIconSize,
    required this.data,
  });

  @override
  ConsumerState<MarketMoodPage> createState() => _MarketMoodPageState();
}

class _MarketMoodPageState extends ConsumerState<MarketMoodPage>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();
    _setupAnimations();
    _animationController.forward();
  }

  void _setupAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );

    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    ));

    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.0, 0.5),
    ));
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value,
          alignment: Alignment.center,
          child: Opacity(
            opacity: _opacityAnimation.value,
            child: _buildPageContent(),
          ),
        );
      },
    );
  }

  Widget _buildPageContent() {
    // 화면 크기 계산
    final screenSize = MediaQuery.of(context).size;
    final maxWidth = screenSize.width * 0.9;

    return IntrinsicWidth(
      child: Container(
        constraints: BoxConstraints(
          minWidth: widget.statusIconSize * 4.2,
          maxWidth: maxWidth,
        ),
        decoration: _buildContainerDecoration(),
        child: Padding(
          padding: const EdgeInsets.all(14),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader(),
              const SizedBox(height: 8),
              _buildCoreMetrics(),
              const SizedBox(height: 8),
              _buildIntradayAnalysis(),
              const SizedBox(height: 8),
              _buildLongTermAnalysis(),
            ],
          ),
        ),
      ),
    );
  }

  BoxDecoration _buildContainerDecoration() {
    return BoxDecoration(
      color: Theme.of(context).colorScheme.surface,
      borderRadius: BorderRadius.circular(16),
      boxShadow: [
        BoxShadow(
          // [수정] withOpacity -> withValues
          color: Colors.black.withValues(alpha: 0.08),
          blurRadius: 16,
          offset: const Offset(0, 6),
          spreadRadius: 2,
        ),
        BoxShadow(
          // [수정] withOpacity -> withValues
          color: Colors.black.withValues(alpha: 0.04),
          blurRadius: 4,
          offset: const Offset(0, 2),
        ),
      ],
      border: Border.all(
        // [수정] withOpacity -> withValues
        color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.12),
        width: 0.8,
      ),
    );
  }

  Widget _buildHeader() {
    final controller = ref.read(marketMoodPageControllerProvider.notifier);
    final updateTime = controller.formatUpdateTime(widget.data.updatedAt);

    return Consumer(
      builder: (context, ref, child) {
        final computedAsync = ref.watch(marketMoodComputedDataProvider);

        return computedAsync.when(
          data: (computedData) {
            final currentMood = ref.watch(currentMarketMoodProvider);
            final moodEmoji = controller.getMoodEmoji(currentMood);
            final moodName = controller.getMoodName(currentMood);

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      moodEmoji,
                      style: const TextStyle(fontSize: 12),
                    ),
                    const SizedBox(width: 4),
                    Flexible(
                      child: Text(
                        '$moodName - 😄',
                        style: TextStyle(
                          fontSize: 11,
                          fontWeight: FontWeight.w700,
                          color: Theme.of(context).colorScheme.onSurface,
                          letterSpacing: 0.3,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 2),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      Icons.schedule,
                      size: 9,
                      // [수정] withOpacity -> withValues
                      color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.7),
                    ),
                    const SizedBox(width: 3),
                    Text(
                      '실시간 기준 • ',
                      style: TextStyle(
                        fontSize: 8,
                        fontWeight: FontWeight.w500,
                        // [수정] withOpacity -> withValues
                        color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.7),
                      ),
                    ),
                    Icon(
                      Icons.access_time,
                      size: 9,
                      // [수정] withOpacity -> withValues
                      color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
                    ),
                    const SizedBox(width: 3),
                    Flexible(
                      child: Text(
                        '$updateTime 업데이트',
                        style: TextStyle(
                          fontSize: 8,
                          // [수정] withOpacity -> withValues
                          color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ],
            );
          },
          loading: () => _buildLoadingHeader(),
          error: (_, __) => _buildErrorHeader(),
        );
      },
    );
  }

  Widget _buildLoadingHeader() {
    return const Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(
              width: 16, height: 16,
              child: CircularProgressIndicator(strokeWidth: 2)
            ),
            SizedBox(width: 8),
            Text(
              '로딩중...',
              style: TextStyle(
                fontSize: 11,
                fontWeight: FontWeight.w700,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildErrorHeader() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.error_outline,
              size: 12,
              color: Theme.of(context).colorScheme.error,
            ),
            const SizedBox(width: 4),
            Text(
              '데이터 로드 오류',
              style: TextStyle(
                fontSize: 11,
                fontWeight: FontWeight.w700,
                color: Theme.of(context).colorScheme.error,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildCoreMetrics() {
    return Consumer(
      builder: (context, ref, child) {
        final exchangeAsync = ref.watch(exchangeRateProvider);

        return exchangeAsync.when(
          data: (exchangeRate) => _buildCoreMetricsContent(exchangeRate),
          loading: () => _buildLoadingMetrics(),
          error: (_, __) => _buildCoreMetricsContent(1400.0),
        );
      },
    );
  }

  Widget _buildCoreMetricsContent(double exchangeRate) {
    final controller = ref.read(marketMoodPageControllerProvider.notifier);

    return FutureBuilder<List<String>>(
      future: Future.wait([
        controller.formatVolume(widget.data.totalVolumeUsd),
        controller.formatMarketCap(widget.data.totalMarketCapUsd),
      ]),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return _buildLoadingMetrics();
        }
        if (snapshot.hasData) {
          final values = snapshot.data!;
          return Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildSectionTitle('핵심 지표', Icons.analytics),
              const SizedBox(height: 4),
              _buildStatRow(
                icon: Icons.monetization_on,
                label: '24시간 거래대금',
                value: values[0],
                isHighlight: true,
              ),
              _buildStatRow(
                icon: Icons.pie_chart,
                label: '총 시가총액',
                value: values[1],
              ),
              _buildStatRow(
                icon: Icons.trending_up,
                label: '시총 24시간 변화',
                value: '${widget.data.marketCapChange24h >= 0 ? '+' : ''}${widget.data.marketCapChange24h.toStringAsFixed(2)}%',
                isHighlight: widget.data.marketCapChange24h > 0,
                isWarning: widget.data.marketCapChange24h < -2,
              ),
              _buildStatRow(
                icon: Icons.flash_on,
                label: 'BTC 도미넌스',
                value: '${widget.data.btcDominance.toStringAsFixed(1)}%',
              ),
            ],
          );
        }
        return _buildLoadingMetrics();
      },
    );
  }

  Widget _buildLoadingMetrics() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('핵심 지표', Icons.analytics),
        const SizedBox(height: 4),
        const SizedBox(
          width: 16, height: 16,
          child: CircularProgressIndicator(strokeWidth: 2),
        ),
      ],
    );
  }

  Widget _buildIntradayAnalysis() {
    return Consumer(
      builder: (context, ref, child) {
        final computedAsync = ref.watch(marketMoodComputedDataProvider);

        return computedAsync.when(
          data: (computedData) {
            final comparisonData = ref.watch(volumeComparisonProvider);
            return Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSectionTitle('인트라데이 비교 분석', Icons.schedule),
                const SizedBox(height: 4),
                _buildComparisonRow('30분 대비', comparisonData.thirtyMin, Icons.hourglass_empty),
                _buildComparisonRow('1시간 대비', comparisonData.oneHour, Icons.hourglass_full),
                _buildComparisonRow('2시간 대비', comparisonData.twoHour, Icons.access_time),
                _buildComparisonRow('4시간 대비', comparisonData.fourHour, Icons.timer),
                _buildComparisonRow('8시간 대비', comparisonData.eightHour, Icons.timer_outlined),
                _buildComparisonRow('12시간 대비', comparisonData.twelveHour, Icons.update),
              ],
            );
          },
          loading: () => _buildLoadingSection('인트라데이 비교 분석', Icons.schedule),
          error: (_, __) => _buildErrorSection('인트라데이 비교 분석', Icons.schedule),
        );
      },
    );
  }

  Widget _buildLongTermAnalysis() {
    return Consumer(
      builder: (context, ref, child) {
        final computedAsync = ref.watch(marketMoodComputedDataProvider);

        return computedAsync.when(
          data: (computedData) {
            final comparisonData = ref.watch(volumeComparisonProvider);
            return Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSectionTitle('장기 비교 분석', Icons.calendar_month),
                const SizedBox(height: 4),
                _buildComparisonRow('24시간 대비', comparisonData.twentyFourHour, Icons.calendar_today),
                _buildComparisonRow('3일 평균 대비', comparisonData.threeDayAverage, Icons.view_day),
                _buildComparisonRow('일주일 평균 대비', comparisonData.weeklyAverage, Icons.date_range),
              ],
            );
          },
          loading: () => _buildLoadingSection('장기 비교 분석', Icons.calendar_month),
          error: (_, __) => _buildErrorSection('장기 비교 분석', Icons.calendar_month),
        );
      },
    );
  }

  Widget _buildLoadingSection(String title, IconData icon) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle(title, icon),
        const SizedBox(height: 4),
        const SizedBox(
          width: 16, height: 16,
          child: CircularProgressIndicator(strokeWidth: 2),
        ),
      ],
    );
  }

  Widget _buildErrorSection(String title, IconData icon) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildSectionTitle(title, icon),
        const SizedBox(height: 4),
        Text(
          '데이터 로드 오류',
          style: TextStyle(
            fontSize: 9,
            color: Theme.of(context).colorScheme.error,
          ),
        ),
      ],
    );
  }

  Widget _buildComparisonRow(String label, ComparisonResult result, IconData icon) {
    final controller = ref.read(marketMoodPageControllerProvider.notifier);

    if (result.isReady && result.changePercent != null) {
      return _buildStatRow(
        icon: icon,
        label: label,
        value: controller.formatComparisonValue(result),
        isHighlight: controller.isHighlight(result),
        isWarning: controller.isWarning(result),
      );
    } else {
      return _buildProgressRow(icon, label, result);
    }
  }

  Widget _buildProgressRow(IconData icon, String label, ComparisonResult result) {
    final controller = ref.read(marketMoodPageControllerProvider.notifier);
    final progressPercent = controller.getProgressPercent(result);

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 1),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 11,
            // [수정] withOpacity -> withValues
            color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
          ),
          const SizedBox(width: 5),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$label: $progressPercent% (${result.status})',
                  style: TextStyle(
                    fontSize: 9,
                    fontWeight: FontWeight.w500,
                    // [수정] withOpacity -> withValues
                    color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
                  ),
                ),
                const SizedBox(height: 2),
                LinearProgressIndicator(
                  value: result.progressPercent.clamp(0.0, 1.0),
                  // [수정] withOpacity -> withValues
                  backgroundColor: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
                  valueColor: AlwaysStoppedAnimation(
                    result.progressPercent >= 1.0
                      ? Colors.green
                      // [수정] withOpacity -> withValues
                      : Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
                  ),
                  minHeight: 3,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title, IconData icon) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          icon,
          size: 11,
          // [수정] withOpacity -> withValues
          color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
        ),
        const SizedBox(width: 4),
        Text(
          title,
          style: TextStyle(
            fontSize: 9,
            fontWeight: FontWeight.w700,
            // [수정] withOpacity -> withValues
            color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.8),
            letterSpacing: 0.3,
          ),
        ),
      ],
    );
  }

  Widget _buildStatRow({
    required IconData icon,
    required String label,
    required String value,
    bool isError = false,
    bool isHighlight = false,
    bool isWarning = false,
  }) {
    Color getColor() {
      if (isError) return Theme.of(context).colorScheme.error;
      if (isHighlight) return Colors.green;
      if (isWarning) return Colors.red;
      // [수정] withOpacity -> withValues
      return Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6);
    }

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 1),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      decoration: BoxDecoration(
        color: isHighlight
            // [수정] withOpacity -> withValues
            ? Colors.green.withValues(alpha: 0.08)
            : isWarning
            // [수정] withOpacity -> withValues
            ? Colors.red.withValues(alpha: 0.08)
            : Colors.transparent,
        borderRadius: BorderRadius.circular(6),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 11,
            color: getColor(),
          ),
          const SizedBox(width: 5),
          Text(
            '$label: ',
            style: TextStyle(
              fontSize: 9,
              fontWeight: FontWeight.w500,
              // [수정] withOpacity -> withValues
              color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
            ),
          ),
          Flexible(
            child: Text(
              value,
              style: TextStyle(
                fontSize: 9,
                fontWeight: FontWeight.w600,
                color: getColor(),
                letterSpacing: 0.2,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }
}\n\n// ====== lib/presentation/pages/sector_page.dart ======\n
// lib/presentation/pages/sector_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/services.dart'; // HapticFeedback용
import '../../core/config/app_config.dart';
import '../../core/di/sector_provider.dart';
import '../../core/di/settings_provider.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/entities/volume.dart';
import '../controllers/sector_controller.dart';
import '../widgets/sector_tile.dart';

class SectorPage extends ConsumerWidget {
  final ScrollController scrollController;
  
  const SectorPage({
    Key? key,
    required this.scrollController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // 1) TimeFrame 상태 및 컨트롤러
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    final index = ref.watch(sectorTimeFrameIndexProvider);
    final timeFrameCtrl = ref.read(sectorTimeFrameController);
    
    // 2) 섹터 스트림
    final sectorsAsync = ref.watch(sectorVolumeDataProvider);
    
    // 3) UI 상태 컨트롤러
    final uiController = ref.watch(sectorControllerProvider.notifier);
    
    // 4) 슬라이더 위치 설정 읽기
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;
    
    // 슬라이더 위젯 생성
    final sliderWidget = _buildSliderWidget(timeFrames, index, timeFrameCtrl, ref);
    
    // 섹터 리스트 위젯 생성
    final sectorListWidget = _buildSectorList(sectorsAsync, uiController, scrollController, timeFrames, index, context);

    return PrimaryScrollController(
      controller: scrollController,
      child: Column(
        children: [
          // 슬라이더 위치에 따른 조건부 배치
          if (sliderPosition == SliderPosition.top) sliderWidget,
          
          // 섹터 리스트 (항상 중간)
          Expanded(child: sectorListWidget),
          
          // 슬라이더가 하단일 때
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// 슬라이더 위젯 생성 (시간대 선택 + 🆕 토글 + 카운트다운)
  Widget _buildSliderWidget(List<String> timeFrames, int index, SectorTimeFrameController timeFrameCtrl, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 🎯 시간대, 토글, 카운트다운을 Row로 배치 (3등분)
          Row(
            children: [
              // 좌측: 시간대 (1/3 영역)
              Expanded(
                flex: 1,
                child: Text(
                  '시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]}',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              
              // 🆕 중앙: 토글 버튼 (1/3 영역, 정중앙 정렬)
              Expanded(
                flex: 1,
                child: Center(
                  child: _buildClassificationToggle(timeFrameCtrl, ref),
                ),
              ),
              
              // 우측: 카운트다운 (1/3 영역, 우측 정렬)
              Expanded(
                flex: 1,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: _buildCountdownWidget(timeFrameCtrl),
                ),
              ),
            ],
          ),
          const SizedBox(height: 6),
          Slider(
            value: index.toDouble(),
            min: 0,
            max: (timeFrames.length - 1).toDouble(),
            divisions: timeFrames.length - 1,
            label: AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index],
            onChanged: (v) {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact();
              }
              final i = v.round();
              timeFrameCtrl.updateTimeFrame(timeFrames[i], i);
            },
          ),
        ],
      ),
    );
  }

  /// 🆕 작은 분류 토글 버튼 (상세/기본)
  Widget _buildClassificationToggle(SectorTimeFrameController timeFrameCtrl, WidgetRef ref) {
    final isDetailed = timeFrameCtrl.isDetailedClassification;
    final currentName = timeFrameCtrl.currentSectorClassificationName;
    
    return GestureDetector(
      onTap: () {
        if (ref.read(appSettingsProvider).isHapticEnabled) {
          HapticFeedback.lightImpact(); // 🎯 light haptic 추가
        }
        timeFrameCtrl.toggleSectorClassification();
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isDetailed ? Colors.orange : Colors.transparent, // 🎯 기본일 때 투명
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: Colors.orange, // 🎯 둘 다 주황 테두리
            width: 1,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              isDetailed ? Icons.view_module : Icons.view_list,
              size: 14,
              color: isDetailed ? Colors.white : Colors.orange, // 🎯 기본일 때 주황 아이콘
            ),
            const SizedBox(width: 4),
            Text(
              currentName,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: isDetailed ? Colors.white : Colors.orange, // 🎯 기본일 때 주황 텍스트
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 🎯 카운트다운 위젯 생성 - 자동 크기 조정 (이모지+숫자 살짝 띄우기)
  Widget _buildCountdownWidget(SectorTimeFrameController timeFrameCtrl) {
    final nextResetTime = timeFrameCtrl.getNextResetTime();
    
    if (nextResetTime == null) {
      return const Row( // ✅ const 추가
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.access_time, size: 16, color: Colors.grey), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '--:--',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final now = DateTime.now();
    final remaining = nextResetTime.difference(now);
    
    if (remaining.isNegative) {
      return const Row( // ✅ const 추가
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.access_time, size: 16, color: Colors.orange), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '00:00',
            style: TextStyle(
              fontSize: 13,
              color: Colors.orange,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final minutes = remaining.inMinutes;
    final seconds = remaining.inSeconds % 60;
    final minutesStr = minutes.toString().padLeft(2, '0');
    final secondsStr = seconds.toString().padLeft(2, '0');
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Icon(Icons.access_time, size: 16, color: Colors.orange),
        const SizedBox(width: 2),
        Text(
          '$minutesStr:$secondsStr',
          style: const TextStyle(
            fontSize: 12,
            color: Colors.orange,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  /// 섹터 리스트 위젯 생성 - 스크롤바 개선 (Trade/Volume과 동일한 스타일)
  Widget _buildSectorList(
    AsyncValue<List<Volume>> sectorsAsync, 
    SectorController uiController, 
    ScrollController scrollController,
    List<String> timeFrames,
    int index,
    BuildContext context,
  ) {
    return sectorsAsync.when(
      data: (sectorVolumes) {
        // List<Volume>을 정렬된 리스트로 변환
        final sortedSectors = uiController.applySorting(sectorVolumes);
        
        if (sortedSectors.isEmpty) {
          return Center(
            child: Text(
              '섹터 거래대금 데이터가 없습니다.\n(시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]})',
              textAlign: TextAlign.center,
              style: TextStyle(color: Theme.of(context).hintColor, fontSize: 16),
            ),
          );
        }

        // 🎯 스크롤바 개선: 20% 축소 + 사용시만 표시 (Trade/Volume과 동일)
        return RawScrollbar(
          controller: scrollController,
          thumbVisibility: false, // ✅ 평소엔 숨김
          trackVisibility: false, // ✅ 트랙도 숨김
          thickness: 6.4, // ✅ 20% 축소 (8 → 6.4)
          radius: const Radius.circular(3.2), // ✅ 반지름도 20% 축소 (4 → 3.2)
          thumbColor: Colors.orange.withValues(alpha: 0.5),
          trackColor: Colors.transparent,
          interactive: true, // 드래그 가능
          minThumbLength: 40, // ✅ 최소 썸 길이도 20% 축소 (50 → 40)
          child: ListView.builder(
            controller: scrollController,
            physics: const BouncingScrollPhysics(
              parent: AlwaysScrollableScrollPhysics(),
            ),
            padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16), // ✅ 우측 패딩 조정
            itemCount: sortedSectors.length,
            itemBuilder: (_, i) => SectorTile(
              sectorName: sortedSectors[i].market.replaceFirst('SECTOR-', ''),
              totalVolume: sortedSectors[i].totalVolume,
              rank: i + 1,
              timeFrame: sortedSectors[i].timeFrame,
              lastUpdated: sortedSectors[i].lastUpdated,
            ),
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (e, _) => Center(child: Text('섹터 데이터 로드 중 오류: $e')),
    );
  }
}\n\n// ====== lib/presentation/pages/notification_page.dart ======\n
// lib/presentation/pages/notification_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// 임시 알림 페이지 (에러 해결용)
class NotificationPage extends ConsumerWidget {
  const NotificationPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('알림'),
        centerTitle: true,
        elevation: 0,
      ),
      body: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.notifications_outlined,
              size: 80,
              color: Colors.orange,
            ),
            SizedBox(height: 24),
            Text(
              '알림 페이지',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.orange,
              ),
            ),
            SizedBox(height: 12),
            Text(
              '임시 페이지입니다',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }
}\n\n// ====== lib/presentation/pages/volume_page.dart ======\n
// lib/presentation/pages/volume_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/services.dart'; // HapticFeedback용
import '../../core/config/app_config.dart';
import '../../core/di/volume_provider.dart'; // 🆕 volume_provider 사용!
import '../../core/di/settings_provider.dart'; // 🆕 설정 provider 추가
import '../../domain/entities/app_settings.dart'; // 🆕 SliderPosition enum
import '../../domain/entities/volume.dart'; // 🆕 Volume 엔티티
import '../controllers/volume_controller.dart';
import '../widgets/volume_tile.dart';

class VolumePage extends ConsumerWidget {
  final ScrollController scrollController; // ✅ MainPage에서 전달받는 ScrollController
  
  const VolumePage({
    Key? key,
    required this.scrollController, // ✅ 필수 파라미터
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // 1) TimeFrame 상태 및 컨트롤러
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    final index = ref.watch(volumeTimeFrameIndexProvider);
    final timeFrameCtrl = ref.read(volumeTimeFrameController);
    
    // 2) 볼륨 스트림
    final volumesAsync = ref.watch(volumeDataProvider);
    
    // 3) UI 상태 컨트롤러 (필터/정렬) - StateNotifier로 변경됨
    final uiController = ref.watch(volumeControllerProvider.notifier);
    
    // 4) 🆕 슬라이더 위치 설정 읽기
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;

    // 🆕 슬라이더 위젯 생성
    final sliderWidget = _buildSliderWidget(timeFrames, index, timeFrameCtrl, ref);
    
    // 🆕 볼륨 리스트 위젯 생성
    final volumeListWidget = _buildVolumeList(volumesAsync, uiController, scrollController, timeFrames, index, context);

    // ✅ PrimaryScrollController로 상태바 터치 활성화 + 정확한 ScrollController 연결
    return PrimaryScrollController(
      controller: scrollController, // ✅ 이제 MainPage와 같은 인스턴스!
      child: Column(
        children: [
          // 🆕 슬라이더 위치에 따른 조건부 배치 (enum 직접 비교)
          if (sliderPosition == SliderPosition.top) sliderWidget,
          
          // 볼륨 리스트 (항상 중간)
          Expanded(child: volumeListWidget),
          
          // 🆕 슬라이더가 하단일 때 (enum 직접 비교)
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// 🆕 슬라이더 위젯 생성 (시간대 선택 + Top 50/100 토글 + 카운트다운)
  Widget _buildSliderWidget(List<String> timeFrames, int index, VolumeTimeFrameController timeFrameCtrl, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 🎯 시간대, 토글, 카운트다운을 Row로 배치 (3등분)
          Row(
            children: [
              // 좌측: 시간대 (1/3 영역)
              Expanded(
                flex: 1,
                child: Text(
                  '시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]}',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              
              // 🆕 중앙: Top 50/100 토글 버튼 (1/3 영역, 정중앙 정렬)
              Expanded(
                flex: 1,
                child: Center(
                  child: _buildTopLimitToggle(ref),
                ),
              ),
              
              // 우측: 카운트다운 (1/3 영역, 우측 정렬)
              Expanded(
                flex: 1,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: _buildCountdownWidget(timeFrameCtrl),
                ),
              ),
            ],
          ),
          const SizedBox(height: 6),
          Slider(
            value: index.toDouble(),
            min: 0,
            max: (timeFrames.length - 1).toDouble(),
            divisions: timeFrames.length - 1,
            label: AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index],
            onChanged: (v) {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact(); // 🎯 햅틱 피드백
              }
              final i = v.round();
              timeFrameCtrl.updateTimeFrame(timeFrames[i], i);
            },
          ),
        ],
      ),
    );
  }

  /// 🆕 Top 50/100 토글 버튼
  Widget _buildTopLimitToggle(WidgetRef ref) {
    final uiController = ref.watch(volumeControllerProvider.notifier);
    final isTop100 = ref.watch(volumeControllerProvider).isTop100;
    final currentName = uiController.currentLimitName;
    
    return GestureDetector(
      onTap: () {
        if (ref.read(appSettingsProvider).isHapticEnabled) {
          HapticFeedback.lightImpact(); // 🎯 light haptic 추가
        }
        uiController.toggleTopLimit();
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isTop100 ? Colors.orange : Colors.transparent, // 🎯 Top 100일 때 주황
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: Colors.orange, // 🎯 둘 다 주황 테두리
            width: 1,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              currentName,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: isTop100 ? Colors.white : Colors.orange, // 🎯 Top 50일 때 주황 텍스트
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 🎯 카운트다운 위젯 생성 - 자동 크기 조정 (이모지+숫자 살짝 띄우기)
  Widget _buildCountdownWidget(VolumeTimeFrameController timeFrameCtrl) {
    final nextResetTime = timeFrameCtrl.getNextResetTime();
    
    if (nextResetTime == null) {
      return const Row( // ✅ const 추가
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.access_time, size: 16, color: Colors.grey), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '--:--',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final now = DateTime.now();
    final remaining = nextResetTime.difference(now);
    
    if (remaining.isNegative) {
      return const Row( // ✅ const 추가
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.access_time, size: 16, color: Colors.orange), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '00:00',
            style: TextStyle(
              fontSize: 13,
              color: Colors.orange,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final minutes = remaining.inMinutes;
    final seconds = remaining.inSeconds % 60;
    final minutesStr = minutes.toString().padLeft(2, '0');
    final secondsStr = seconds.toString().padLeft(2, '0');
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Icon(Icons.access_time, size: 16, color: Colors.orange),
        const SizedBox(width: 2), // ✅ 살짝 띄우기
        Text(
          '$minutesStr:$secondsStr',
          style: const TextStyle(
            fontSize: 12,
            color: Colors.orange,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  /// 🆕 볼륨 리스트 위젯 생성 - 스크롤바 개선 (Trade/Sector와 동일한 스타일)
  Widget _buildVolumeList(
    AsyncValue<List<Volume>> volumesAsync, 
    VolumeController uiController, 
    ScrollController scrollController,
    List<String> timeFrames,
    int index,
    BuildContext context,
  ) {
    return volumesAsync.when(
      data: (volumes) {
        // List<Volume>을 정렬된 리스트로 변환 (동적 순위 제한 적용)
        final sortedVolumes = uiController.sortVolumeData(volumes);
        
        if (sortedVolumes.isEmpty) {
          return Center(
            child: Text(
              '거래량 데이터가 없습니다.\n(시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]})',
              textAlign: TextAlign.center,
              style: TextStyle(color: Theme.of(context).hintColor, fontSize: 16),
            ),
          );
        }

        // 🎯 스크롤바 개선: 20% 축소 + 사용시만 표시 (Trade/Sector와 동일)
        return RawScrollbar(
          controller: scrollController,
          thumbVisibility: false, // ✅ 평소엔 숨김
          trackVisibility: false, // ✅ 트랙도 숨김
          thickness: 6.4, // ✅ 20% 축소 (8 → 6.4)
          radius: const Radius.circular(3.2), // ✅ 반지름도 20% 축소 (4 → 3.2)
          thumbColor: Colors.orange.withValues(alpha: 0.5),
          trackColor: Colors.transparent,
          interactive: true, // 드래그 가능
          minThumbLength: 40, // ✅ 최소 썸 길이도 20% 축소 (50 → 40)
          child: ListView.builder(
            controller: scrollController,
            // 🍎 iOS 스타일 스크롤 물리 효과
            physics: const BouncingScrollPhysics(
              parent: AlwaysScrollableScrollPhysics(),
            ),
            padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16), // ✅ 우측 패딩 조정
            itemCount: sortedVolumes.length,
            itemBuilder: (_, i) => VolumeTile(
              market: sortedVolumes[i].market,
              totalVolume: sortedVolumes[i].totalVolume,
              rank: i + 1, // 🎯 순위 전달 (1위부터 시작)
            ),
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (e, _) => Center(child: Text('볼륨 로드 중 오류: $e')),
    );
  }
}\n\n// ====== lib/presentation/pages/surge_page.dart ======\n
// lib/presentation/pages/surge_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/services.dart'; // HapticFeedback용
import '../../core/config/app_config.dart';
import '../../core/di/surge_provider.dart'; // 🚀 surge_provider 사용!
import '../../core/di/settings_provider.dart'; // 🆕 설정 provider 추가
import '../../domain/entities/app_settings.dart'; // 🆕 SliderPosition enum
import '../../domain/entities/surge.dart'; // 🚀 Surge 엔티티
import '../../domain/usecases/surge_usecase.dart'; // SurgeFilterType import
import '../controllers/surge_controller.dart';
import '../widgets/surge_tile.dart';

class SurgePage extends ConsumerWidget {
  final ScrollController scrollController; // ✅ MainPage에서 전달받는 ScrollController
  
  const SurgePage({
    Key? key,
    required this.scrollController, // ✅ 필수 파라미터
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // 1) TimeFrame 상태 및 컨트롤러
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    final index = ref.watch(surgeTimeFrameIndexProvider);
    final timeFrameCtrl = ref.read(surgeTimeFrameController);
    
    // 2) 급등/급락 스트림
    final surgesAsync = ref.watch(surgeDataProvider);
    
    // 3) UI 상태 컨트롤러 (필터/정렬) - StateNotifier로 변경됨
    final uiController = ref.watch(surgeControllerProvider.notifier);
    
    // 4) 🆕 슬라이더 위치 설정 읽기
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;
    
    // 🚀 슬라이더 위젯 생성 - 토글 추가
    final sliderWidget = _buildSliderWidget(timeFrames, index, timeFrameCtrl, ref);
    
    // 🚀 급등/급락 리스트 위젯 생성
    final surgeListWidget = _buildSurgeList(surgesAsync, uiController, scrollController, timeFrames, index, context);

    // ✅ PrimaryScrollController로 상태바 터치 활성화 + 정확한 ScrollController 연결
    return PrimaryScrollController(
      controller: scrollController, // ✅ 이제 MainPage와 같은 인스턴스!
      child: Column(
        children: [
          // 🆕 슬라이더 위치에 따른 조건부 배치 (enum 직접 비교)
          if (sliderPosition == SliderPosition.top) sliderWidget,
          
          // 급등/급락 리스트 (항상 중간)
          Expanded(child: surgeListWidget),
          
          // 🆕 슬라이더가 하단일 때 (enum 직접 비교)
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// 🚀 슬라이더 위젯 생성 - 원본 토글 라인 + 현재 시스템
  Widget _buildSliderWidget(List<String> timeFrames, int index, SurgeTimeFrameController timeFrameCtrl, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 🚀 원본 토글 라인 (12-6-10-10-11 비율)
          Row(
            children: [
              // 좌측: 시간대 (12/49 영역)
              Expanded(
                flex: 12,
                child: Text(
                  '시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]}',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              
              // 🚀 필터 토글 버튼 (6/49 영역) - Volume 기준 radius
              Expanded(
                flex: 6,
                child: Center(
                  child: _buildFilterToggle(ref),
                ),
              ),
              
              // 🚀 Top 50/100 토글 버튼 (10/49 영역) - Volume 기준 radius
              Expanded(
                flex: 10,
                child: Center(
                  child: _buildTopLimitToggle(ref),
                ),
              ),
              
              // 🚀 급등/급락 카운터 (10/49 영역) - 원본 스타일
              Expanded(
                flex: 10,
                child: Center(
                  child: _buildSurgeCounter(ref),
                ),
              ),
              
              // 우측: 카운트다운 (11/49 영역, 우측 정렬)
              Expanded(
                flex: 11,
                child: Align(
                  alignment: Alignment.centerRight,
                  child: _buildCountdownWidget(timeFrameCtrl),
                ),
              ),
            ],
          ),
          const SizedBox(height: 6), // ✅ 현재 시스템: Volume 기준 간격
          Slider(
            value: index.toDouble(),
            min: 0,
            max: (timeFrames.length - 1).toDouble(),
            divisions: timeFrames.length - 1,
            label: AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index],
            onChanged: (v) {
              if (ref.read(appSettingsProvider).isHapticEnabled) { // ✅ 현재 시스템: 햅틱 설정 체크
                HapticFeedback.lightImpact(); // ✅ 현재 시스템: lightImpact
              }
              final i = v.round();
              timeFrameCtrl.updateTimeFrame(timeFrames[i], i);
            },
          ),
        ],
      ),
    );
  }

  /// 🚀 Top 50/100 토글 버튼 - Volume 기준 radius 12
  Widget _buildTopLimitToggle(WidgetRef ref) {
    final uiController = ref.watch(surgeControllerProvider.notifier);
    final isTop100 = ref.watch(surgeControllerProvider).isTop100;
    final currentName = uiController.currentLimitName;
    
    return GestureDetector(
      onTap: () {
        if (ref.read(appSettingsProvider).isHapticEnabled) { // ✅ 현재 시스템: 햅틱 설정 체크
          HapticFeedback.lightImpact();
        }
        uiController.toggleTopLimit();
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 6), // ✅ Volume 기준 패딩
        decoration: BoxDecoration(
          color: isTop100 ? Colors.orange : Colors.transparent,
          borderRadius: BorderRadius.circular(12), // ✅ Volume 기준 radius 12
          border: Border.all(
            color: Colors.orange,
            width: 1,
          ),
        ),
        child: Text(
          currentName,
          style: TextStyle(
            fontSize: 10, // ✅ 원본 폰트
            fontWeight: FontWeight.w600,
            color: isTop100 ? Colors.white : Colors.orange,
          ),
        ),
      ),
    );
  }

  /// 🚀 필터 토글 버튼 - Volume 기준 radius 12
  Widget _buildFilterToggle(WidgetRef ref) {
    final uiController = ref.watch(surgeControllerProvider.notifier);
    final currentFilter = ref.watch(surgeControllerProvider).filterType;
    final currentName = uiController.currentFilterName;
    
    return GestureDetector(
      onTap: () {
        if (ref.read(appSettingsProvider).isHapticEnabled) { // ✅ 현재 시스템: 햅틱 설정 체크
          HapticFeedback.lightImpact();
        }
        // 🚀 필터 순환: 전체 → 급등만 → 급락만 → 전체
        SurgeFilterType nextFilter;
        switch (currentFilter) {
          case SurgeFilterType.all:
            nextFilter = SurgeFilterType.risingOnly;
            break;
          case SurgeFilterType.risingOnly:
            nextFilter = SurgeFilterType.fallingOnly;
            break;
          case SurgeFilterType.fallingOnly:
            nextFilter = SurgeFilterType.all;
            break;
        }
        uiController.setFilterType(nextFilter);
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 6), // ✅ Volume 기준 패딩
        decoration: BoxDecoration(
          color: currentFilter != SurgeFilterType.all ? Colors.blue : Colors.transparent,
          borderRadius: BorderRadius.circular(12), // ✅ Volume 기준 radius 12
          border: Border.all(
            color: Colors.blue,
            width: 1,
          ),
        ),
        child: Text(
          currentName,
          style: TextStyle(
            fontSize: 10, // ✅ 원본 폰트
            fontWeight: FontWeight.w600,
            color: currentFilter != SurgeFilterType.all ? Colors.white : Colors.blue,
          ),
        ),
      ),
    );
  }

  /// 🚀 급등/급락 카운터 위젯 - 원본 스타일
  Widget _buildSurgeCounter(WidgetRef ref) {
    final surgesAsync = ref.watch(surgeDataProvider);
    final uiController = ref.watch(surgeControllerProvider.notifier);
    
    return surgesAsync.when(
      data: (surges) {
        final count = uiController.getSurgeCount(surges);
        final risingCount = count['rising'] ?? 0;
        final fallingCount = count['falling'] ?? 0;
        
        return Container(
          height: 29, // ✅ 29px로 조정
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12), // ✅ 원본 radius
            border: Border.all(color: Colors.grey.withValues(alpha: 0.3), width: 1), // ✅ 원본 border
          ),
          child: Row(
            children: [
              // 좌측: 급등 카운터 (초록 배경)
              Expanded(
                child: Container(
                  decoration: const BoxDecoration(
                    color: Colors.green,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(11), // ✅ 원본 내부 radius
                      bottomLeft: Radius.circular(11),
                    ),
                  ),
                  child: Center(
                    child: Text(
                      '$risingCount',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10, // ✅ 원본 폰트
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
              // 우측: 급락 카운터 (빨간 배경)
              Expanded(
                child: Container(
                  decoration: const BoxDecoration(
                    color: Colors.red,
                    borderRadius: BorderRadius.only(
                      topRight: Radius.circular(11), // ✅ 원본 내부 radius
                      bottomRight: Radius.circular(11),
                    ),
                  ),
                  child: Center(
                    child: Text(
                      '$fallingCount',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10, // ✅ 원본 폰트
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
      loading: () => Container(
        height: 29, // ✅ 29px로 조정
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12), // ✅ 원본 radius
          color: Colors.grey.withValues(alpha: 0.1),
        ),
        child: const Center(
          child: Text(
            '로딩중',
            style: TextStyle(fontSize: 8, color: Colors.grey), // ✅ 원본 폰트
          ),
        ),
      ),
      error: (_, __) => Container(
        height: 29, // ✅ 29px로 조정
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12), // ✅ 원본 radius
          color: Colors.grey.withValues(alpha: 0.1),
        ),
        child: const Center(
          child: Text(
            '오류',
            style: TextStyle(fontSize: 8, color: Colors.grey), // ✅ 원본 폰트
          ),
        ),
      ),
    );
  }

  /// 🎯 카운트다운 위젯 생성 - 자동 크기 조정 (이모지+숫자 딱 붙이기)
  Widget _buildCountdownWidget(SurgeTimeFrameController timeFrameCtrl) {
    final nextResetTime = timeFrameCtrl.getNextResetTime();
    
    if (nextResetTime == null) {
      return const Row( // ✅ const 추가 (Line 320)
        mainAxisSize: MainAxisSize.min,
        children: [ // ✅ const 추가 (Line 322)
          Icon(Icons.access_time, size: 16, color: Colors.grey), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '--:--',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final now = DateTime.now();
    final remaining = nextResetTime.difference(now);
    
    if (remaining.isNegative) {
      return const Row( // ✅ const 추가 (Line 341)
        mainAxisSize: MainAxisSize.min,
        children: [ // ✅ const 추가 (Line 343)
          Icon(Icons.access_time, size: 16, color: Colors.orange), // ✅ const 추가
          SizedBox(width: 2), // ✅ const 추가
          Text( // ✅ const 추가
            '00:00',
            style: TextStyle(
              fontSize: 13,
              color: Colors.orange,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      );
    }

    final minutes = remaining.inMinutes;
    final seconds = remaining.inSeconds % 60;
    final minutesStr = minutes.toString().padLeft(2, '0');
    final secondsStr = seconds.toString().padLeft(2, '0');
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Icon(Icons.access_time, size: 16, color: Colors.orange),
        const SizedBox(width: 2), // ✅ 조금만 띄우기
        Text(
          '$minutesStr:$secondsStr',
          style: const TextStyle(
            fontSize: 12,
            color: Colors.orange,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  /// 🚀 급등/급락 리스트 위젯 생성 - 현재 시스템 (Volume 기준 스크롤바)
  Widget _buildSurgeList(
    AsyncValue<List<Surge>> surgesAsync, 
    SurgeController uiController, 
    ScrollController scrollController,
    List<String> timeFrames,
    int index,
    BuildContext context,
  ) {
    return surgesAsync.when(
      data: (surges) {
        // List<Surge>를 정렬 및 필터링된 리스트로 변환 (동적 순위 제한 적용)
        final sortedSurges = uiController.sortAndFilterSurgeData(surges);
        
        if (sortedSurges.isEmpty) {
          return Center(
            child: Text(
              '급등/급락 데이터가 없습니다.\n(시간대: ${AppConfig.timeFrameNames[AppConfig.timeFrames[index]] ?? timeFrames[index]})',
              textAlign: TextAlign.center,
              style: TextStyle(color: Theme.of(context).hintColor, fontSize: 16),
            ),
          );
        }

        // ✅ 현재 시스템: Volume 기준 스크롤바 적용
        return RawScrollbar(
          controller: scrollController,
          thumbVisibility: false, // ✅ 현재 시스템
          trackVisibility: false, // ✅ 현재 시스템
          thickness: 6.4, // ✅ 현재 시스템
          radius: const Radius.circular(3.2), // ✅ 현재 시스템
          thumbColor: Colors.orange.withValues(alpha: 0.5),
          trackColor: Colors.transparent,
          interactive: true, // 드래그 가능
          minThumbLength: 40, // ✅ 현재 시스템
          child: ListView.builder(
            controller: scrollController,
            // 🍎 iOS 스타일 스크롤 물리 효과
            physics: const BouncingScrollPhysics(
              parent: AlwaysScrollableScrollPhysics(),
            ),
            padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16), // ✅ 현재 시스템
            itemCount: sortedSurges.length,
            itemBuilder: (_, i) => SurgeTile(
              market: sortedSurges[i].market,
              changePercent: sortedSurges[i].changePercent,
              basePrice: sortedSurges[i].basePrice,
              currentPrice: sortedSurges[i].currentPrice,
              rank: i + 1, // 🚀 순위 전달 (1위부터 시작)
            ),
          ),
        );
      },
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (e, _) => Center(child: Text('급등/급락 로드 중 오류: $e')),
    );
  }
}\n\n// ====== lib/presentation/pages/signal_page.dart ======\n
// lib/presentation/pages/signal_page.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/config/app_config.dart';
import '../../core/di/settings_provider.dart';
import '../../core/di/signal_provider.dart';
import '../../core/di/trade_provider.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/entities/signal.dart';
import '../controllers/signal_controller.dart';
import '../widgets/signal_tile.dart';

/// 🚀 Signal Page V4.1 - 온라인 지표 연동
class SignalPage extends ConsumerWidget {
  final ScrollController scrollController;

  const SignalPage({
    super.key,
    required this.scrollController,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // V4.1 Controller 기반 시스템
    final controller = ref.watch(signalControllerProvider.notifier);
    final state = ref.watch(signalControllerProvider);

    // 시그널 스트림 (V4.1 온라인 지표 연동)
    final signalsAsync = ref.watch(signalListProvider);

    // markets 정보
    final marketsAsync = ref.watch(marketsProvider);

    // 슬라이더 위치 설정
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;

    // 🆕 V4.1 시스템 모니터링
    ref.listen(signalSystemMonitorProvider, (prev, next) {
      if (next.hasError && AppConfig.enableTradeLog) {
        debugPrint('⚠️ Signal system monitoring error: ${next.error}');
      }
    });

    // 에러 메시지 자동 클리어
    ref.listen(signalControllerProvider.select((s) => s.errorMessage), (prev, next) {
      if (next != null) {
        Future.delayed(const Duration(seconds: 5), () {
          controller.clearError();
        });
      }
    });

    // 🆕 V4.1 슬라이더 위젯 (온라인 지표 상태 포함)
    final sliderWidget = _buildEnhancedSliderWidget(
      controller,
      state,
      marketsAsync,
      ref,
      context,
    );

    // 🆕 V4.1 시그널 리스트 (정렬 및 필터링 포함)
    final signalListWidget = _buildEnhancedSignalList(
      signalsAsync,
      controller,
      scrollController,
      state,
      context,
      ref,
    );

    return PrimaryScrollController(
      controller: scrollController,
      child: Column(
        children: [
          // 슬라이더 위치에 따른 조건부 배치
          if (sliderPosition == SliderPosition.top) sliderWidget,

          // 🆕 V4.1 에러 메시지 표시
          if (state.errorMessage != null) _buildErrorBanner(state.errorMessage!, controller),

          // 시그널 리스트 (항상 중간)
          Expanded(child: signalListWidget),

          // 슬라이더가 하단일 때
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// 🆕 V4.1 에러 배너
  Widget _buildErrorBanner(String errorMessage, SignalController controller) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.red.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red.withValues(alpha: 0.3)),
      ),
      child: Row(
        children: [
          const Icon(Icons.error_outline, color: Colors.red, size: 16),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              errorMessage,
              style: const TextStyle(color: Colors.red, fontSize: 12),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          GestureDetector(
            onTap: controller.clearError,
            child: const Icon(Icons.close, color: Colors.red, size: 16),
          ),
        ],
      ),
    );
  }

  /// 🚀 V4.1 강화된 슬라이더 위젯 (온라인 지표 상태 포함)
  Widget _buildEnhancedSliderWidget(
    SignalController controller,
    SignalState state,
    AsyncValue<List<String>> marketsAsync,
    WidgetRef ref,
    BuildContext context,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 🎯 첫 번째 줄: 아이콘 + 제목 + 설명 + 상태 표시
          Row(
            children: [
              // 패턴 아이콘 + 제목
              Icon(
                _getPatternIcon(state.currentPattern),
                size: 18,
                color: _getPatternColor(state.currentPattern),
              ),
              const SizedBox(width: 8),
              
              // 제목 + 설명
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      state.currentPattern.displayName,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      state.currentPattern.description,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),

              // 🆕 V4.1 시스템 상태 표시
              _buildSystemStatusChip(state),
              const SizedBox(width: 8),

              // 활성화/비활성화 토글
              _buildPatternToggle(state, controller, ref),
            ],
          ),

          const SizedBox(height: 8),

          // 🎯 두 번째 줄: 임계값 + 신뢰도 정보
          Row(
            children: [
              Text(
                '임계값: ${controller.getThresholdDisplayText()}',
                style: const TextStyle(fontSize: 12, color: Colors.grey),
              ),
              const Spacer(),
              // 🆕 V4.1 신뢰도 정보
              Text(
                controller.getConfidenceStatusText(),
                style: const TextStyle(fontSize: 10, color: Colors.grey),
              ),
            ],
          ),

          const SizedBox(height: 8),

          // 🎯 세 번째 줄: 패턴 슬라이더
          Row(
            children: [
              // 슬라이더
              Expanded(
                child: Slider(
                  value: state.selectedIndex.toDouble(),
                  min: 0,
                  max: (PatternType.values.length - 1).toDouble(),
                  divisions: PatternType.values.length - 1,
                  label: state.currentPattern.displayName,
                  activeColor: _getPatternColor(state.currentPattern),
                  onChanged: (v) {
                    if (ref.read(appSettingsProvider).isHapticEnabled) {
                      HapticFeedback.lightImpact();
                    }
                    final index = v.round();
                    marketsAsync.whenData((markets) {
                      controller.setPatternIndex(index, markets);
                    });
                  },
                ),
              ),

              // 🆕 V4.1 정렬 버튼
              _buildSortButton(state, controller),
            ],
          ),

          // 🆕 V4.1 온라인 지표 상태 바
          _buildOnlineMetricsStatusBar(state),
        ],
      ),
    );
  }

  /// 🆕 V4.1 시스템 상태 칩
  Widget _buildSystemStatusChip(SignalState state) {
    final isHealthy = state.isSystemHealthy;
    final color = isHealthy ? Colors.green : Colors.orange;
    final icon = isHealthy ? Icons.check_circle : Icons.warning;
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: color.withValues(alpha: 0.1),
        border: Border.all(color: color.withValues(alpha: 0.3), width: 0.5),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 10, color: color),
          const SizedBox(width: 2),
          Text(
            isHealthy ? 'OK' : 'WARN',
            style: TextStyle(fontSize: 8, color: color, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }

  /// 🆕 V4.1 패턴 토글 버튼
  Widget _buildPatternToggle(SignalState state, SignalController controller, WidgetRef ref) {
    return GestureDetector(
      onTap: () {
        if (ref.read(appSettingsProvider).isHapticEnabled) {
          HapticFeedback.lightImpact();
        }
        controller.togglePatternEnabled();
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: Colors.orange,
            width: 1.5,
          ),
          color: state.isPatternEnabled ? Colors.orange : Colors.transparent,
        ),
        child: Text(
          state.isPatternEnabled ? '활성' : '비활성',
          style: TextStyle(
            color: state.isPatternEnabled ? Colors.white : Colors.orange,
            fontSize: 11,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  /// 🆕 V4.1 정렬 버튼
  Widget _buildSortButton(SignalState state, SignalController controller) {
    return PopupMenuButton<String>(
      icon: Icon(
        Icons.sort,
        size: 18,
        color: Colors.grey[600],
      ),
      onSelected: (value) {
        controller.setSortField(value);
      },
      itemBuilder: (context) => [
        PopupMenuItem(value: 'time', child: Text('시간 ${_getSortIcon(state, 'time')}')),
        PopupMenuItem(value: 'confidence', child: Text('신뢰도 ${_getSortIcon(state, 'confidence')}')),
        PopupMenuItem(value: 'change', child: Text('변화율 ${_getSortIcon(state, 'change')}')),
        PopupMenuItem(value: 'amount', child: Text('거래액 ${_getSortIcon(state, 'amount')}')),
        PopupMenuItem(value: 'market', child: Text('마켓 ${_getSortIcon(state, 'market')}')),
      ],
    );
  }

  /// 🆕 정렬 아이콘 헬퍼
  String _getSortIcon(SignalState state, String field) {
    if (state.sortField != field) return '';
    return state.sortAscending ? '↑' : '↓';
  }

  /// 🆕 V4.1 온라인 지표 상태 바
  Widget _buildOnlineMetricsStatusBar(SignalState state) {
    if (!state.hasOnlineMetrics) {
      return Container(
        height: 2,
        margin: const EdgeInsets.only(top: 4),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(1),
          color: Colors.grey[300],
        ),
      );
    }

    final health = state.onlineMetricsHealth!;
    final totalMarkets = health['totalMarkets'] ?? 0;
    final healthyMarkets = health['healthyMarkets'] ?? 0;
    final staleMarkets = health['staleMarkets'] ?? 0;
    
    final healthRatio = totalMarkets > 0 ? healthyMarkets / totalMarkets : 0.0;
    final color = staleMarkets > 0 ? Colors.orange : Colors.green;

    return Container(
      height: 2,
      margin: const EdgeInsets.only(top: 4),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(1),
        color: Colors.grey[300],
      ),
      child: FractionallySizedBox(
        widthFactor: healthRatio,
        alignment: Alignment.centerLeft,
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(1),
            color: color,
          ),
        ),
      ),
    );
  }

  /// 🚀 V4.1 강화된 시그널 리스트 (정렬 및 온라인 지표 표시)
  Widget _buildEnhancedSignalList(
    AsyncValue<List<Signal>> signalsAsync,
    SignalController controller,
    ScrollController scrollController,
    SignalState state,
    BuildContext context,
    WidgetRef ref,
  ) {
    return signalsAsync.when(
      data: (list) {
        final viewList = controller.apply(list);

        if (viewList.isEmpty) {
          return _buildEmptyState(state, context, controller);
        }

        return _buildSignalListView(viewList, scrollController, state, ref);
      },
      loading: () => _buildLoadingState(context),
      error: (e, _) => _buildErrorState(e, context, ref),
    );
  }

  /// 🆕 V4.1 빈 상태 (온라인 지표 정보 포함)
  Widget _buildEmptyState(SignalState state, BuildContext context, SignalController controller) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.radar,
            size: 64,
            color: Theme.of(context).hintColor.withValues(alpha: 0.5),
          ),
          const SizedBox(height: 16),
          Text(
            state.isPatternEnabled
                ? '${state.currentPattern.displayName} 패턴이 감지되지 않았습니다.'
                : '패턴 감지가 비활성화되어 있습니다.',
            textAlign: TextAlign.center,
            style: TextStyle(
                color: Theme.of(context).hintColor, fontSize: 16),
          ),
          const SizedBox(height: 8),
          Text(
            '임계값: ${controller.getThresholdDisplayText()}',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: Theme.of(context).hintColor.withValues(alpha: 0.7),
              fontSize: 14,
            ),
          ),
          // 🆕 V4.1 온라인 지표 상태
          if (state.hasOnlineMetrics) ...[
            const SizedBox(height: 8),
            Text(
              controller.getSystemStatusText(),
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Theme.of(context).hintColor.withValues(alpha: 0.7),
                fontSize: 12,
              ),
            ),
          ],
          // 🆕 V4.1 빠른 액션 버튼들
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // 온라인 지표 리셋 버튼
              ElevatedButton.icon(
                onPressed: () => controller.resetOnlineMetrics(),
                icon: const Icon(Icons.refresh, size: 16),
                label: const Text('지표 리셋'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  textStyle: const TextStyle(fontSize: 12),
                ),
              ),
              const SizedBox(width: 12),
              // 프리셋 적용 버튼
              ElevatedButton.icon(
                onPressed: () => _showPresetDialog(context, controller),
                icon: const Icon(Icons.tune, size: 16),
                label: const Text('프리셋'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  textStyle: const TextStyle(fontSize: 12),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// 🆕 V4.1 로딩 상태 (개선된 디자인)
  Widget _buildLoadingState(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const CircularProgressIndicator(),
          const SizedBox(height: 16),
          Text(
            '온라인 지표 연동 중...',
            style: TextStyle(
              color: Theme.of(context).hintColor,
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }

  /// 🆕 V4.1 에러 상태 (개선된 에러 처리)
  Widget _buildErrorState(Object error, BuildContext context, WidgetRef ref) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 64,
            color: Theme.of(context).colorScheme.error.withValues(alpha: 0.5),
          ),
          const SizedBox(height: 16),
          Text(
            '시그널 로드 중 오류가 발생했습니다.',
            style: TextStyle(
              color: Theme.of(context).colorScheme.error,
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '$error',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: Theme.of(context).hintColor,
              fontSize: 14,
            ),
          ),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: () {
                  ref.invalidate(signalListProvider);
                },
                icon: const Icon(Icons.refresh),
                label: const Text('다시 시도'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(width: 12),
              // 🆕 V4.1 고급 진단 버튼
              ElevatedButton.icon(
                onPressed: () => _showDiagnosticsDialog(context, ref),
                icon: const Icon(Icons.info),
                label: const Text('진단'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// 🆕 V4.1 시그널 리스트 뷰 (온라인 지표 표시 포함)
  Widget _buildSignalListView(
    List<Signal> viewList,
    ScrollController scrollController,
    SignalState state,
    WidgetRef ref,
  ) {
    return RawScrollbar(
      controller: scrollController,
      thumbVisibility: false,
      trackVisibility: false,
      thickness: 6.4,
      radius: const Radius.circular(3.2),
      thumbColor: Colors.orange.withValues(alpha: 0.5),
      interactive: true,
      minThumbLength: 40,
      child: ListView.builder(
        controller: scrollController,
        physics: const BouncingScrollPhysics(
          parent: AlwaysScrollableScrollPhysics(),
        ),
        padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16),
        itemCount: viewList.length,
        itemBuilder: (context, index) {
          final signal = viewList[index];
          
          return Column(
            children: [
              // 🆕 V4.1 Signal Tile 사용 (탭 기능 추가)
              GestureDetector(
                onTap: () => _showSignalDetails(context, signal, ref),
                child: SignalTile(
                  signal: signal,
                  showOnlineMetrics: true,
                ),
              ),
              
              // 구분선 (마지막 아이템 제외)
              if (index < viewList.length - 1)
                Divider(
                  height: 1,
                  thickness: 0.5,
                  color: Colors.grey[300],
                  indent: 16,
                  endIndent: 16,
                ),
            ],
          );
        },
      ),
    );
  }

  // ==========================================================================
  // 🆕 V4.1 대화상자들
  // ==========================================================================

  /// 🆕 프리셋 선택 대화상자
  void _showPresetDialog(BuildContext context, SignalController controller) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('패턴 프리셋 선택'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.security, color: Colors.blue),
              title: const Text('Conservative'),
              subtitle: const Text('False Positive 최소화'),
              onTap: () {
                controller.applyPreset('conservative');
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.balance, color: Colors.green),
              title: const Text('Balanced'),
              subtitle: const Text('균형잡힌 기본 설정'),
              onTap: () {
                controller.applyPreset('balanced');
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.speed, color: Colors.red),
              title: const Text('Aggressive'),
              subtitle: const Text('감지율 최대화'),
              onTap: () {
                controller.applyPreset('aggressive');
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }

  /// 🆕 진단 정보 대화상자
  void _showDiagnosticsDialog(BuildContext context, WidgetRef ref) {
    final controller = ref.read(signalControllerProvider.notifier);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('시스템 진단'),
        content: FutureBuilder<Map<String, dynamic>>(
          future: controller.getSystemHealthReport(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('진단 중...'),
                ],
              );
            }
            
            if (snapshot.hasError) {
              return Text('진단 실패: ${snapshot.error}');
            }
            
            final report = snapshot.data!;
            return SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text('버전: ${report['version']}'),
                  Text('상태: ${report['status']}'),
                  Text('업타임: ${report['uptime']}분'),
                  Text('처리된 거래: ${report['totalProcessedTrades']}건'),
                  Text('활성 패턴: ${report['activePatterns']}개'),
                  Text('추적 마켓: ${report['trackedMarkets']}개'),
                  const SizedBox(height: 16),
                  const Text('온라인 지표 상태:', style: TextStyle(fontWeight: FontWeight.bold)),
                  if (report['onlineMetricsHealth'] != null) ...[
                    Text('총 마켓: ${report['onlineMetricsHealth']['totalMarkets']}'),
                    Text('정상: ${report['onlineMetricsHealth']['healthyMarkets']}'),
                    Text('만료: ${report['onlineMetricsHealth']['staleMarkets']}'),
                  ],
                ],
              ),
            );
          },
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('닫기'),
          ),
        ],
      ),
    );
  }

  /// 🆕 시그널 상세 정보 대화상자
  void _showSignalDetails(BuildContext context, Signal signal, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('${signal.patternType.displayName} - ${signal.ticker}'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              // 기본 정보
              _buildDetailRow('마켓', signal.market),
              _buildDetailRow('현재가', '${signal.currentPrice.toStringAsFixed(0)}원'),
              _buildDetailRow('변화율', '${signal.changePercent.toStringAsFixed(2)}%'),
              _buildDetailRow('거래액', '${(signal.tradeAmount / 1000000).toStringAsFixed(1)}M'),
              _buildDetailRow('감지시간', signal.detectedAt.toString().substring(0, 19)),
              
              if (signal.confidence != null)
                _buildDetailRow('신뢰도', '${(signal.confidence! * 100).toStringAsFixed(1)}%'),
              
              // 온라인 지표 정보
              if (signal.hasOnlineMetrics) ...[
                const SizedBox(height: 16),
                const Text('온라인 지표', style: TextStyle(fontWeight: FontWeight.bold)),
                const SizedBox(height: 8),
                
                if (signal.onlineIndicators?.rsi != null)
                  _buildDetailRow('RSI', '${signal.onlineIndicators!.rsi!.toStringAsFixed(1)} (${signal.onlineIndicators!.rsiState})'),
                
                if (signal.onlineIndicators?.macd != null)
                  _buildDetailRow('MACD', '${signal.onlineIndicators!.macd!.toStringAsFixed(2)} (${signal.onlineIndicators!.macdState})'),
              ],
              
              // 다이버전스 정보
              if (signal.divergence != null) ...[
                const SizedBox(height: 16),
                const Text('다이버전스', style: TextStyle(fontWeight: FontWeight.bold)),
                const SizedBox(height: 8),
                _buildDetailRow('타입', signal.divergence!.type),
                _buildDetailRow('강도', signal.divergence!.confidenceLevel),
                _buildDetailRow('소스', signal.divergence!.source),
              ],
              
              // 고급 지표들
              const SizedBox(height: 16),
              const Text('고급 지표', style: TextStyle(fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              
              if (signal.zScore != null)
                _buildDetailRow('Z-Score', signal.zScore!.toStringAsFixed(2)),
              
              if (signal.liquidityVortex != null)
                _buildDetailRow('Liquidity Vortex', signal.liquidityVortex!.toStringAsFixed(3)),
              
              if (signal.flashPulse != null)
                _buildDetailRow('Flash Pulse', signal.flashPulse!.toStringAsFixed(2)),
              
              // 버전 정보
              if (signal.version != null) ...[
                const SizedBox(height: 16),
                _buildDetailRow('버전', signal.version!),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('닫기'),
          ),
        ],
      ),
    );
  }

  /// 상세 정보 행
  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(
            child: Text(value),
          ),
        ],
      ),
    );
  }

  // ==========================================================================
  // 헬퍼 함수들
  // ==========================================================================

  /// 패턴별 아이콘 반환
  IconData _getPatternIcon(PatternType pattern) {
    switch (pattern) {
      case PatternType.surge:
        return Icons.trending_up;
      case PatternType.flashFire:
        return Icons.flash_on;
      case PatternType.stackUp:
        return Icons.stacked_line_chart;
      case PatternType.stealthIn:
        return Icons.visibility_off;
      case PatternType.blackHole:
        return Icons.radio_button_unchecked;
      case PatternType.reboundShot:
        return Icons.trending_up;
    }
  }

  /// 패턴별 색상 반환
  Color _getPatternColor(PatternType pattern) {
    switch (pattern) {
      case PatternType.surge:
        return Colors.red;
      case PatternType.flashFire:
        return Colors.orange;
      case PatternType.stackUp:
        return Colors.amber;
      case PatternType.stealthIn:
        return Colors.green;
      case PatternType.blackHole:
        return Colors.purple;
      case PatternType.reboundShot:
        return Colors.blue;
    }
  }
}\n\n// ====== lib/presentation/widgets/sector_tile.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/app_settings.dart'; // AmountDisplayMode 추가
import '../../shared/widgets/sector_names.dart';
import '../../shared/widgets/sector_logo_provider.dart'; // 섹터 로고 프로바이더
import '../../shared/widgets/amount_display_widget.dart'; // 💰 머니아이콘 위젯
import '../../shared/utils/tile_common.dart'; // 🎯 공통 유틸리티
import '../../shared/utils/blink_animation_mixin.dart'; // ✨ 반짝임 헬퍼
import '../../shared/utils/amount_formatter.dart'; // 💰 포맷터 유틸리티

// 🎯 순위 추적을 위한 전역 Map (섹터별 이전 순위 저장)
final Map<String, int> _previousSectorRanks = {};

// 🔥 HOT 섹터 추적을 위한 전역 Map (섹터별 HOT 시작 시간)
final Map<String, DateTime> _hotSectors = {};

class SectorTile extends ConsumerStatefulWidget {
  final String sectorName;
  final double totalVolume;
  final int rank;
  final String timeFrame;
  final DateTime lastUpdated;
  final bool showHotIcon;
  final bool enableBlinkAnimation;
  
  const SectorTile({
    Key? key, 
    required this.sectorName,
    required this.totalVolume,
    required this.rank,
    required this.timeFrame,
    required this.lastUpdated,
    this.showHotIcon = false,
    this.enableBlinkAnimation = false,
  }) : super(key: key);

  @override
  ConsumerState<SectorTile> createState() => _SectorTileState();
}

class _SectorTileState extends ConsumerState<SectorTile> 
    with SingleTickerProviderStateMixin {

  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;
  bool _shouldBlink = false;

  @override
  void initState() {
    super.initState();
    // ✨ 반짝임 애니메이션 초기화 (기존 방식)
    _blinkController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _blinkAnimation = Tween<double>(begin: 1.0, end: 0.3).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );
  }

  @override
  void didUpdateWidget(SectorTile oldWidget) {
    super.didUpdateWidget(oldWidget);
    // 🎯 순위 변화 감지 (헬퍼 클래스 사용)
    if (BlinkAnimationHelper.checkRankChange(
      previousRanksMap: _previousSectorRanks,
      key: widget.sectorName,
      currentRank: widget.rank,
    )) {
      _startBlink();
    }
  }

  @override
  void dispose() {
    _blinkController.dispose();
    super.dispose();
  }

  /// 🔥 HOT 상태 체크 (5계단 이상 상승 시 10초간 유지)
  bool _checkIfHot() {
    final now = DateTime.now();
    
    // 1. 기존 HOT 상태 체크 (10초 유지)
    if (_hotSectors.containsKey(widget.sectorName)) {
      final hotStartTime = _hotSectors[widget.sectorName]!;
      if (now.difference(hotStartTime).inSeconds <= 20) {
        return true; // 아직 HOT 유지
      } else {
        _hotSectors.remove(widget.sectorName); // 시간 지나면 제거
      }
    }
    
    // 2. 새로운 HOT 조건 체크 (5계단 이상 상승)
    final previousRank = _previousSectorRanks[widget.sectorName];
    if (previousRank != null && previousRank - widget.rank >= 5) {
      _hotSectors[widget.sectorName] = now; // HOT 시작 기록
      return true;
    }
    
    return false;
  }

  /// 반짝임 시작 (설정 연동 추가)
  void _startBlink() {
    final blinkEnabled = ref.read(appSettingsProvider).blinkEnabled;
    if (!mounted || !blinkEnabled) return; // 🎯 설정 체크 추가!
    
    _shouldBlink = true;
    _blinkController.forward().then((_) {
      _blinkController.reverse().then((_) {
        if (mounted) {
          setState(() {
            _shouldBlink = false;
          });
        }
      });
    });
  }

  /// 섹터명 표시 (기존 유지 - 섹터 전용 로직)
  String _getDisplaySectorName() {
    final displayMode = ref.watch(appSettingsProvider).displayMode;
    final isDetailed = ref.watch(sectorClassificationProvider).isDetailedClassification;
    
    return SectorNames.getDisplayName(widget.sectorName, displayMode, isDetailed: isDetailed);
  }

  /// 섹터 번호 매핑 (기존 유지 - 섹터 전용 로직)
  int _getSectorNumber(String sectorName) {
    const sectorNumberMap = {
      // 상세 분류 (1-28번)
      '비트코인 그룹': 1, '이더리움 그룹': 2, '스테이킹': 3, '모놀리식 블록체인': 4,
      '모듈러 블록체인': 5, '스테이블 코인': 6, 'DEX/애그리게이터': 7, '랜딩': 8,
      '유동화 스테이킹/리스테이킹': 9, 'RWA': 10, '지급결제 인프라': 11, '상호운용성/브릿지': 12,
      '엔터프라이즈 블록체인': 13, '오라클': 14, '데이터 인프라': 15, '스토리지': 16,
      'AI': 17, '메타버스': 18, 'NFT/게임': 19, '미디어/스트리밍': 20,
      '광고': 21, '교육/기타 콘텐츠': 22, '소셜/DAO': 23, '팬토큰': 24,
      '밈': 25, 'DID': 26, '의료': 27, '월렛/메세징': 28,
      
      // 기본 분류 (29-46번)
      '메이저 코인': 29, '비트코인 계열': 30, '이더리움 생태계': 31, '레이어1 블록체인': 32,
      '고 시총': 33, '중 시총': 34, '저 시총': 35, '마이너 알트코인': 36,
      'DeFi 토큰': 37, '스테이블코인': 38, '게임/NFT/메타버스': 39, '한국 프로젝트': 40,
      '솔라나 생태계': 41, 'AI/기술 토큰': 42, '2023년 신규상장': 43, '2024년 상반기 신규상장': 44,
      '2024년 하반기 신규상장': 45, '2025년 상반기 신규상장': 46,
    };
    
    return sectorNumberMap[sectorName] ?? 1;
  }
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;
    final onSurface70 = onSurface.withValues(alpha: 0.7);
    
    // 🔥 HOT 상태 체크
    final isHot = _checkIfHot();
    
    // 🎯 표준 카드 위젯 생성
    Widget cardWidget = TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🏆 순위 부분: 고정 크기
          FlexChild.fixed(
            TileCommon.buildRankWidget(context, widget.rank), // ✅ 공통 함수
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 🎨 섹터 아이콘 부분: 고정 크기
          FlexChild.fixed(
            SectorLogoProvider.buildSectorIcon(
              sectorNumber: _getSectorNumber(widget.sectorName),
              size: 40.0,
            ),
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 📱 섹터명 부분: flex 25
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Flexible(
                      child: Text(
                        _getDisplaySectorName(), // ✅ 섹터 전용 함수
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                          fontSize: 16,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                    const SizedBox(width: 4),
                    // 🔥 HOT 아이콘 (실시간 계산)
                    if (TileCommon.buildHotIcon(isHot) case final hotIcon?) 
                      hotIcon, // ✅ 공통 함수
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  SectorNames.getDisplayName(widget.sectorName, DisplayMode.ticker, isDetailed: ref.watch(sectorClassificationProvider).isDetailedClassification), // 실제 ticker 표시
                  style: TextStyle(
                    color: onSurface70,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
            flex: 25,
          ),
          
          // 💰 거래량 부분: flex 30 - 세로 가운데 정렬로 변경!
          FlexChild.expanded(
            Align(
              alignment: Alignment.centerRight,
              child: Consumer(
                builder: (context, ref, child) {
                  final amountDisplayMode = ref.watch(appSettingsProvider).amountDisplayMode;
                  
                  return amountDisplayMode == AmountDisplayMode.icon
                      ? AmountDisplayWidget( // ✅ 머니아이콘 모드
                          totalAmount: widget.totalVolume,
                          isBuy: true, // Sector도 중립적 색상
                          fontSize: 15,
                          fontWeight: FontWeight.w600,
                        )
                      : Text( // ✅ 숫자 모드 (기존 방식)
                          AmountFormatter.formatVolume(widget.totalVolume), // ✅ 공통 포맷터
                          style: TextStyle(
                            color: onSurface,
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1,
                        );
                },
              ),
            ),
            flex: 30,
          ),
        ],
      ),
    );

    // 🎯 반짝임 애니메이션 적용 (설정 체크 추가)
    final blinkEnabled = ref.watch(appSettingsProvider).blinkEnabled;
    
    Widget finalWidget = blinkEnabled 
        ? BlinkAnimationHelper.wrapWithBlinkEffect(
            child: cardWidget,
            shouldBlink: _shouldBlink,
            blinkAnimation: _blinkAnimation,
            blinkColor: Colors.amber, // Sector도 앰버 색상
          )
        : cardWidget;
    
    // 🎨 조건부 깜빡임 효과 (설정 확인)
    if (!_shouldBlink && widget.enableBlinkAnimation && blinkEnabled) {
      finalWidget = BlinkAnimationHelper.wrapWithConditionalBlink(
        child: cardWidget,
        enableBlinkAnimation: widget.enableBlinkAnimation,
        theme: theme,
      );
    }
    
    return finalWidget;
  }
}\n\n// ====== lib/presentation/widgets/trade_tile.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../domain/entities/trade.dart';
import '../../shared/widgets/amount_display_widget.dart'; // 💰 AmountDisplayWidget import
import '../../shared/utils/tile_common.dart'; // 🎯 공통 유틸리티
import '../../shared/utils/amount_formatter.dart'; // 💰 포맷터 유틸리티

class TradeTile extends ConsumerWidget {
  // 🕒 시간 포맷터만 유지 (고유 기능)
  static final _timeFormat = DateFormat('HH:mm:ss');
  
  final Trade trade;
  
  const TradeTile({Key? key, required this.trade}) : super(key: key);
  
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;
    final onSurface70 = onSurface.withValues(alpha: 0.7);
    
    // 🎯 공통 카드 위젯 사용
    return TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🕒 시간 부분: flex 12
          FlexChild.expanded(
            Text(
              _timeFormat.format(trade.timestamp),
              style: TextStyle(color: onSurface, fontSize: 11),
            ),
            flex: 12,
          ),
          
          // 🪙 코인명 부분: flex 18 - 공통 함수 사용
          FlexChild.expanded(
            Text(
              TileCommon.getDisplayName(ref, trade.market), // ✅ 공통 함수
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.primary,
                fontSize: 16,
              ),
              overflow: TextOverflow.ellipsis,
              maxLines: 1,
            ),
            flex: 18,
          ),
          
          // 💵 가격/거래량 부분: flex 20
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Text(
                  '${AmountFormatter.formatPrice(trade.price)}원', // ✅ 공통 포맷터
                  style: TextStyle(color: onSurface, fontSize: 14),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
                const SizedBox(height: 2),
                Text(
                  '${AmountFormatter.formatTradeVolume(trade.volume)}개', // ✅ 공통 포맷터
                  style: TextStyle(color: onSurface70, fontSize: 12),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
              ],
            ),
            flex: 20,
          ),
          
          // 💰 총액 부분: flex 20 - AmountDisplayWidget 사용
          FlexChild.expanded(
            Align(
              alignment: Alignment.centerRight,
              child: AmountDisplayWidget(
                totalAmount: trade.total,
                isBuy: trade.isBuy,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            flex: 20,
          ),
          
          // 📈 방향 아이콘: 고정 크기
          FlexChild.fixed(
            Icon(
              trade.isBuy ? Icons.arrow_upward : Icons.arrow_downward,
              color: trade.isBuy ? Colors.green : Colors.red,
              size: 16,
            ),
          ),
        ],
      ),
    );
  }
}\n\n// ====== lib/presentation/widgets/surge_tile.dart ======\n
// lib/presentation/widgets/surge_tile.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart'; // DisplayMode import
import '../../shared/widgets/coin_logo_provider.dart'; // 🆕 코인 로고 프로바이더 import
import '../../shared/utils/tile_common.dart'; // 🎯 공통 유틸리티
import '../../shared/utils/blink_animation_mixin.dart'; // ✨ 반짝임 헬퍼
import '../../shared/utils/amount_formatter.dart'; // 💰 포맷터 유틸리티

// 🚀 순위 추적을 위한 전역 Map (market별 이전 순위 저장)
final Map<String, int> _previousRanks = {};

// 🔥 HOT 마켓 추적을 위한 전역 Map (market별 HOT 시작 시간)
final Map<String, DateTime> _hotMarkets = {};

class SurgeTile extends ConsumerStatefulWidget {
  final String market; // 🚀 Surge 엔티티 대신 단순 데이터
  final double changePercent; // 변동률
  final double basePrice; // 기준 가격
  final double currentPrice; // 현재 가격
  final int rank; // 🚀 순위 (1위부터)
  final bool showHotIcon; // 🚀 급상승 표시 여부
  final bool enableBlinkAnimation; // 깜빡임 애니메이션 여부
  
  const SurgeTile({
    Key? key, 
    required this.market,
    required this.changePercent,
    required this.basePrice,
    required this.currentPrice,
    required this.rank,
    this.showHotIcon = false,
    this.enableBlinkAnimation = false,
  }) : super(key: key);

  @override
  ConsumerState<SurgeTile> createState() => _SurgeTileState();
}

class _SurgeTileState extends ConsumerState<SurgeTile> 
    with SingleTickerProviderStateMixin {
  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;
  bool _shouldBlink = false;

  @override
  void initState() {
    super.initState();
    _blinkController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _blinkAnimation = Tween<double>(begin: 1.0, end: 0.3).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );
  }

  @override
  void didUpdateWidget(SurgeTile oldWidget) {
    super.didUpdateWidget(oldWidget);
    // 🎯 순위 변화 감지 (헬퍼 클래스 사용)
    if (BlinkAnimationHelper.checkRankChange(
      previousRanksMap: _previousRanks,
      key: widget.market,
      currentRank: widget.rank,
    )) {
      _startBlink();
    }
  }

  @override
  void dispose() {
    _blinkController.dispose();
    super.dispose();
  }

  /// 🔥 HOT 상태 체크 (5계단 이상 상승 시 10초간 유지)
  bool _checkIfHot() {
    final now = DateTime.now();
    
    // 1. 기존 HOT 상태 체크 (10초 유지)
    if (_hotMarkets.containsKey(widget.market)) {
      final hotStartTime = _hotMarkets[widget.market]!;
      if (now.difference(hotStartTime).inSeconds <= 20) {
        return true; // 아직 HOT 유지
      } else {
        _hotMarkets.remove(widget.market); // 시간 지나면 제거
      }
    }
    
    // 2. 새로운 HOT 조건 체크 (5계단 이상 상승)
    final previousRank = _previousRanks[widget.market];
    if (previousRank != null && previousRank - widget.rank >= 5) {
      _hotMarkets[widget.market] = now; // HOT 시작 기록
      return true;
    }
    
    return false;
  }

  /// 반짝임 시작 (설정 연동 추가)
  void _startBlink() {
    final blinkEnabled = ref.read(appSettingsProvider).blinkEnabled;
    if (!mounted || !blinkEnabled) return; // 🎯 설정 체크 추가!
    
    _shouldBlink = true;
    _blinkController.forward().then((_) {
      _blinkController.reverse().then((_) {
        if (mounted) {
          setState(() {
            _shouldBlink = false;
          });
        }
      });
    });
  }

  // 🚀 변동률 포맷팅 (색상 포함)
  String _formatChangePercent(double changePercent) {
    final sign = changePercent >= 0 ? '+' : '';
    return '$sign${changePercent.toStringAsFixed(2)}%';
  }

  // 🚀 변동률에 따른 색상
  Color _getChangeColor() {
    if (widget.changePercent > 0) {
      return Colors.green; // 🟢 급등 - 초록
    } else if (widget.changePercent < 0) {
      return Colors.red; // 🔴 급락 - 빨강
    } else {
      return Colors.grey; // ⚪ 변동 없음 - 회색
    }
  }
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;
    final changeColor = _getChangeColor();
    
    // 🔥 HOT 상태 체크
    final isHot = _checkIfHot();
    
    // 🎯 표준 카드 위젯 생성
    Widget cardWidget = TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🏆 순위 부분: 고정 크기
          FlexChild.fixed(
            TileCommon.buildRankWidget(context, widget.rank), // ✅ 공통 함수
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 🎨 코인 로고 부분
          FlexChild.fixed(
            CoinLogoProvider.buildCoinLogo(
              ticker: widget.market.replaceFirst('KRW-', ''),
              radius: 16,
            ),
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 📱 코인명 부분: flex 25 (확장 가능)
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Flexible(
                      child: Text(
                        TileCommon.getDisplayName(ref, widget.market), // ✅ 공통 함수
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                          fontSize: 16,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                    const SizedBox(width: 4),
                    // 🔥 HOT 아이콘 (실시간 계산)
                    if (TileCommon.buildHotIcon(isHot) case final hotIcon?) 
                      hotIcon, // ✅ 공통 함수
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  widget.market.replaceFirst('KRW-', ''), // 항상 티커는 표시
                  style: TextStyle(
                    color: onSurface.withValues(alpha: 0.7),
                    fontSize: 12,
                  ),
                ),
                // ✅ 초록색 점 제거됨
              ],
            ),
            flex: 25,
          ),
          
          // 🚀 변동률 부분: flex 30
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Text(
                  _formatChangePercent(widget.changePercent),
                  style: TextStyle(
                    color: changeColor,
                    fontSize: 15,
                    fontWeight: FontWeight.w600,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
                const SizedBox(height: 2),
                Text(
                  '${AmountFormatter.formatPrice(widget.currentPrice)}원', // ✅ 공통 포맷터
                  style: TextStyle(
                    color: onSurface.withValues(alpha: 0.7),
                    fontSize: 11,
                    fontWeight: FontWeight.w500,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
              ],
            ),
            flex: 30,
          ),
        ],
      ),
    );

    // 🎯 반짝임 애니메이션 적용 (설정 체크 추가)
    final blinkEnabled = ref.watch(appSettingsProvider).blinkEnabled;
    
    Widget finalWidget = blinkEnabled 
        ? BlinkAnimationHelper.wrapWithBlinkEffect(
            child: cardWidget,
            shouldBlink: _shouldBlink,
            blinkAnimation: _blinkAnimation,
            blinkColor: changeColor, // Surge는 변동률 색상으로
          )
        : cardWidget;
    
    // 🎨 조건부 깜빡임 효과 (설정 확인)
    if (!_shouldBlink && widget.enableBlinkAnimation && blinkEnabled) {
      finalWidget = BlinkAnimationHelper.wrapWithConditionalBlink(
        child: cardWidget,
        enableBlinkAnimation: widget.enableBlinkAnimation,
        theme: theme,
      );
    }
    
    return finalWidget;
  }
}\n\n// ====== lib/presentation/widgets/volume_tile.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart'; // appSettingsProvider 추가
import '../../domain/entities/app_settings.dart'; // AmountDisplayMode 추가
import '../../shared/widgets/coin_logo_provider.dart'; // 코인 로고 프로바이더
import '../../shared/widgets/amount_display_widget.dart'; // 💰 머니아이콘 위젯
import '../../shared/utils/tile_common.dart'; // 🎯 공통 유틸리티
import '../../shared/utils/blink_animation_mixin.dart'; // ✨ 반짝임 헬퍼
import '../../shared/utils/amount_formatter.dart'; // 💰 포맷터 유틸리티

// 🎯 순위 추적을 위한 전역 Map (market별 이전 순위 저장)
final Map<String, int> _previousRanks = {};

// 🔥 HOT 마켓 추적을 위한 전역 Map (market별 HOT 시작 시간)
final Map<String, DateTime> _hotMarkets = {};

class VolumeTile extends ConsumerStatefulWidget {
  final String market;
  final double totalVolume;
  final int rank; // 🎯 순위 (1위부터)
  final bool showHotIcon; // 🚀 급상승 표시 여부
  final bool enableBlinkAnimation; // 깜빡임 애니메이션 여부
  
  const VolumeTile({
    Key? key, 
    required this.market,
    required this.totalVolume,
    required this.rank,
    this.showHotIcon = false,
    this.enableBlinkAnimation = false,
  }) : super(key: key);

  @override
  ConsumerState<VolumeTile> createState() => _VolumeTileState();
}

class _VolumeTileState extends ConsumerState<VolumeTile> 
    with SingleTickerProviderStateMixin {

  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;
  bool _shouldBlink = false;

  @override
  void initState() {
    super.initState();
    // ✨ 반짝임 애니메이션 초기화 (기존 방식)
    _blinkController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _blinkAnimation = Tween<double>(begin: 1.0, end: 0.3).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );
  }

  @override
  void didUpdateWidget(VolumeTile oldWidget) {
    super.didUpdateWidget(oldWidget);
    // 🎯 순위 변화 감지 (헬퍼 클래스 사용)
    if (BlinkAnimationHelper.checkRankChange(
      previousRanksMap: _previousRanks,
      key: widget.market,
      currentRank: widget.rank,
    )) {
      _startBlink();
    }
  }

  @override
  void dispose() {
    _blinkController.dispose();
    super.dispose();
  }

  /// 🔥 HOT 상태 체크 (5계단 이상 상승 시 10초간 유지)
  bool _checkIfHot() {
    final now = DateTime.now();
    
    // 1. 기존 HOT 상태 체크 (10초 유지)
    if (_hotMarkets.containsKey(widget.market)) {
      final hotStartTime = _hotMarkets[widget.market]!;
      if (now.difference(hotStartTime).inSeconds <= 20) {
        return true; // 아직 HOT 유지
      } else {
        _hotMarkets.remove(widget.market); // 시간 지나면 제거
      }
    }
    
    // 2. 새로운 HOT 조건 체크 (5계단 이상 상승)
    final previousRank = _previousRanks[widget.market];
    if (previousRank != null && previousRank - widget.rank >= 5) {
      _hotMarkets[widget.market] = now; // HOT 시작 기록
      return true;
    }
    
    return false;
  }

  /// 반짝임 시작 (설정 연동 추가)
  void _startBlink() {
    final blinkEnabled = ref.read(appSettingsProvider).blinkEnabled;
    if (!mounted || !blinkEnabled) return; // 🎯 설정 체크 추가!
    
    _shouldBlink = true;
    _blinkController.forward().then((_) {
      _blinkController.reverse().then((_) {
        if (mounted) {
          setState(() {
            _shouldBlink = false;
          });
        }
      });
    });
  }
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;
    
    // 🔥 HOT 상태 체크
    final isHot = _checkIfHot();
    
    // 🎯 표준 카드 위젯 생성
    Widget cardWidget = TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🏆 순위 부분: 고정 크기
          FlexChild.fixed(
            TileCommon.buildRankWidget(context, widget.rank), // ✅ 공통 함수
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 🎨 코인 로고 부분: 고정 크기
          FlexChild.fixed(
            CoinLogoProvider.buildCoinLogo(
              ticker: widget.market.replaceFirst('KRW-', ''),
              radius: 16,
            ),
          ),
          
          const FlexChild.fixed(SizedBox(width: 12)),
          
          // 📱 코인명 부분: flex 25
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Flexible(
                      child: Text(
                        TileCommon.getDisplayName(ref, widget.market), // ✅ 공통 함수
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                          fontSize: 16,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                    const SizedBox(width: 4),
                    // 🔥 HOT 아이콘 (실시간 계산)
                    if (TileCommon.buildHotIcon(isHot) case final hotIcon?) 
                      hotIcon, // ✅ 공통 함수
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  widget.market.replaceFirst('KRW-', ''), // 항상 티커는 표시
                  style: TextStyle(
                    color: onSurface.withValues(alpha: 0.7),
                    fontSize: 12,
                  ),
                ),
              ],
            ),
            flex: 25,
          ),
          
          // 💰 거래량 부분: flex 30 - 세로 가운데 정렬로 변경!
          FlexChild.expanded(
            Align(
              alignment: Alignment.centerRight,
              child: Consumer(
                builder: (context, ref, child) {
                  final amountDisplayMode = ref.watch(appSettingsProvider).amountDisplayMode;
                  
                  return amountDisplayMode == AmountDisplayMode.icon
                      ? AmountDisplayWidget( // ✅ 머니아이콘 모드
                          totalAmount: widget.totalVolume,
                          isBuy: true, // Volume은 중립적 색상
                          fontSize: 15,
                          fontWeight: FontWeight.w600,
                        )
                      : Text( // ✅ 숫자 모드 (기존 방식)
                          AmountFormatter.formatVolume(widget.totalVolume), // ✅ 공통 포맷터
                          style: TextStyle(
                            color: onSurface,
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1,
                        );
                },
              ),
            ),
            flex: 30,
          ),
        ],
      ),
    );

    // 🎯 반짝임 애니메이션 적용 (설정 체크 추가)
    final blinkEnabled = ref.watch(appSettingsProvider).blinkEnabled;
    
    Widget finalWidget = blinkEnabled 
        ? BlinkAnimationHelper.wrapWithBlinkEffect(
            child: cardWidget,
            shouldBlink: _shouldBlink,
            blinkAnimation: _blinkAnimation,
            blinkColor: Colors.amber, // Volume은 앰버 색상
          )
        : cardWidget;
    
    // 🎨 조건부 깜빡임 효과 (설정 확인)
    if (!_shouldBlink && widget.enableBlinkAnimation && blinkEnabled) {
      finalWidget = BlinkAnimationHelper.wrapWithConditionalBlink(
        child: cardWidget,
        enableBlinkAnimation: widget.enableBlinkAnimation,
        theme: theme,
      );
    }
    
    return finalWidget;
  }
}\n\n// ====== lib/presentation/widgets/signal_tile.dart ======\n
// lib/presentation/widgets/signal_tile.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/signal.dart';
import '../../shared/widgets/amount_display_widget.dart';
import '../../shared/widgets/coin_logo_provider.dart';
import '../../shared/utils/tile_common.dart';
import '../../shared/utils/blink_animation_mixin.dart';
import '../../shared/utils/amount_formatter.dart';

// 🎯 중복 반짝임 방지를 위한 전역 Set
final Set<String> _blinkedSignals = {};

/// 🚀 SignalTile V4.1 - Clean UI (온라인 지표 연동)
class SignalTile extends ConsumerStatefulWidget {
  final Signal signal;
  final bool showOnlineMetrics; // 🆕 V4.1 온라인 지표 표시 옵션

  const SignalTile({
    super.key, 
    required this.signal,
    this.showOnlineMetrics = true, // 기본값: 표시
  });

  @override
  ConsumerState<SignalTile> createState() => _SignalTileState();
}

class _SignalTileState extends ConsumerState<SignalTile>
    with SingleTickerProviderStateMixin {
  
  // 🕒 시간 포맷터만 유지 (고유 기능)
  static final _timeFormat = DateFormat('HH:mm:ss');

  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;
  bool _shouldBlink = false;

  @override
  void initState() {
    super.initState();
    // ✨ 반짝임 애니메이션 초기화 (기존 방식)
    _blinkController = AnimationController(
      duration: const Duration(milliseconds: 800), // Signal은 조금 더 길게
      vsync: this,
    );
    _blinkAnimation = Tween<double>(begin: 1.0, end: 0.2).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );

    _checkNewSignal();
  }

  /// 🎯 새로운 시그널 감지 및 반짝임 처리 (헬퍼 클래스 사용)
  void _checkNewSignal() {
    final signalKey = '${widget.signal.market}_${widget.signal.detectedAt.millisecondsSinceEpoch}';
    
    if (BlinkAnimationHelper.checkNewSignal(
      blinkedSignalsSet: _blinkedSignals,
      detectedAt: widget.signal.detectedAt,
      signalKey: signalKey,
      maxAgeSeconds: 10,
    )) {
      _startBlink();
    }
  }

  /// 반짝임 시작 (설정 연동 추가)
  void _startBlink() {
    final blinkEnabled = ref.read(appSettingsProvider).blinkEnabled;
    if (!mounted || !blinkEnabled) return; // 🎯 설정 체크 추가!
    
    _shouldBlink = true;
    _blinkController.forward().then((_) {
      _blinkController.reverse().then((_) {
        if (mounted) {
          setState(() {
            _shouldBlink = false;
          });
        }
      });
    });
  }

  @override
  void dispose() {
    _blinkController.dispose();
    super.dispose();
  }

  /// 🆕 V4.1 신뢰도 칩
  Widget? _buildConfidenceChip() {
    final confidence = widget.signal.confidence;
    if (confidence == null) return null;

    Color color;
    if (confidence >= 0.8) {
      color = Colors.green;
    } else if (confidence >= 0.6) {
      color = Colors.amber;
    } else {
      color = Colors.orange;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(4),
        color: color.withValues(alpha: 0.15),
        border: Border.all(color: color.withValues(alpha: 0.4), width: 0.5),
      ),
      child: Text(
        '${(confidence * 100).toStringAsFixed(0)}%',
        style: TextStyle(
          fontSize: 9,
          color: color,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  /// 🆕 V4.1 온라인 지표 칩들 생성
  List<Widget> _buildOnlineIndicatorChips() {
    if (!widget.showOnlineMetrics || !widget.signal.hasOnlineMetrics) {
      return [];
    }

    final indicators = widget.signal.onlineIndicators!;
    final chips = <Widget>[];

    // RSI 칩
    if (indicators.rsi != null) {
      Color rsiColor;
      String rsiText;
      
      if (indicators.rsi! >= 70) {
        rsiColor = Colors.red;
        rsiText = 'RSI${indicators.rsi!.toStringAsFixed(0)}';
      } else if (indicators.rsi! <= 30) {
        rsiColor = Colors.blue;
        rsiText = 'RSI${indicators.rsi!.toStringAsFixed(0)}';
      } else {
        rsiColor = Colors.grey[600]!;
        rsiText = 'RSI${indicators.rsi!.toStringAsFixed(0)}';
      }

      chips.add(_buildIndicatorChip(rsiText, rsiColor));
    }

    // MACD 칩
    if (indicators.macd != null && indicators.macdSignal != null) {
      final isBullish = indicators.macd! > indicators.macdSignal!;
      final macdColor = isBullish ? Colors.green : Colors.red;
      final macdText = isBullish ? 'M+' : 'M-';

      chips.add(_buildIndicatorChip(macdText, macdColor));
    }

    return chips;
  }

  /// 🆕 V4.1 지표 칩 위젯
  Widget _buildIndicatorChip(String text, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
      margin: const EdgeInsets.only(right: 4),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(4),
        color: color.withValues(alpha: 0.15),
        border: Border.all(color: color.withValues(alpha: 0.4), width: 0.5),
      ),
      child: Text(
        text,
        style: TextStyle(
          fontSize: 9,
          color: color,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  /// 🆕 V4.1 다이버전스 인디케이터
  Widget? _buildDivergenceIndicator() {
    final divergence = widget.signal.divergence;
    if (divergence == null || (!divergence.isBullish && !divergence.isBearish)) {
      return null;
    }

    Color color;
    IconData icon;
    
    if (divergence.isBullish) {
      color = Colors.green;
      icon = Icons.trending_up;
    } else {
      color = Colors.red;
      icon = Icons.trending_down;
    }

    return Container(
      padding: const EdgeInsets.all(3),
      margin: const EdgeInsets.only(right: 4),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(4),
        color: color.withValues(alpha: 0.15),
        border: Border.all(color: color.withValues(alpha: 0.4), width: 0.5),
      ),
      child: Icon(
        icon,
        size: 10,
        color: color,
      ),
    );
  }

  /// 🆕 V4.1 모든 배지들을 오버플로우 방지하며 배치
  Widget _buildBadgeRow() {
    final badges = <Widget>[];
    
    // 신뢰도 칩 추가
    final confidenceChip = _buildConfidenceChip();
    if (confidenceChip != null) {
      badges.add(confidenceChip);
    }
    
    // 온라인 지표 칩들 추가
    badges.addAll(_buildOnlineIndicatorChips());
    
    // 다이버전스 인디케이터 추가
    final divergenceIndicator = _buildDivergenceIndicator();
    if (divergenceIndicator != null) {
      badges.add(divergenceIndicator);
    }

    if (badges.isEmpty) {
      return const SizedBox.shrink();
    }

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        children: badges,
      ),
    );
  }

  /// 🆕 V4.1 패턴 색상 (온라인 지표 연동시 더 생동감있게)
  Color _getEnhancedPatternColor() {
    Color baseColor;
    
    switch (widget.signal.patternType) {
      case PatternType.surge:
        baseColor = Colors.red;
        break;
      case PatternType.flashFire:
        baseColor = Colors.orange;
        break;
      case PatternType.stackUp:
        baseColor = Colors.amber;
        break;
      case PatternType.stealthIn:
        baseColor = Colors.green;
        break;
      case PatternType.blackHole:
        baseColor = Colors.purple;
        break;
      case PatternType.reboundShot:
        baseColor = Colors.blue;
        break;
    }

    // 🆕 온라인 지표가 있으면 더 선명하게
    if (widget.signal.hasOnlineMetrics) {
      return baseColor;
    } else {
      return baseColor.withValues(alpha: 0.7);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;

    // 🎯 표준 카드 위젯 생성 (V4.1 Clean 버전)
    Widget cardWidget = TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🕒 시간 부분: flex 13
          FlexChild.expanded(
            Text(
              _timeFormat.format(widget.signal.detectedAt),
              style: TextStyle(color: onSurface, fontSize: 11),
            ),
            flex: 13,
          ),

          const FlexChild.fixed(SizedBox(width: 8)),

          // 🎨 코인 로고 부분: 고정 크기 (V4.1 패턴 색상 테두리 추가)
          FlexChild.fixed(
            Container(
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(
                  color: _getEnhancedPatternColor(),
                  width: 1.5,
                ),
              ),
              child: CoinLogoProvider.buildCoinLogo(
                ticker: widget.signal.market.replaceFirst('KRW-', ''),
                radius: 14,
              ),
            ),
          ),

          const FlexChild.fixed(SizedBox(width: 8)),

          // 🪙 코인명 + 배지들: flex 24 (🆕 Clean 버전)
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // 첫 번째 줄: 코인명 + NEW 뱃지
                Row(
                  children: [
                    Flexible(
                      child: Text(
                        TileCommon.getDisplayName(ref, widget.signal.market),
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                          fontSize: 15,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                    const SizedBox(width: 4),
                    // NEW 뱃지 (필요한 경우)
                    if (TileCommon.buildNewBadge(widget.signal.detectedAt) case final badge?) 
                      badge,
                  ],
                ),
                
                const SizedBox(height: 3),
                
                // 🆕 두 번째 줄: 모든 배지들 (오버플로우 방지)
                _buildBadgeRow(),
              ],
            ),
            flex: 24,
          ),

          // 💵 가격 + 변화율: flex 18 (신뢰도 칩 제거됨)
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Text(
                  '${AmountFormatter.formatPrice(widget.signal.currentPrice)}원',
                  style: TextStyle(color: onSurface, fontSize: 13),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
                const SizedBox(height: 2),
                Text(
                  TileCommon.formatChangePercent(widget.signal.changePercent),
                  style: TextStyle(
                    color: TileCommon.getChangeColor(widget.signal.changePercent),
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 1,
                ),
              ],
            ),
            flex: 18,
          ),

          const FlexChild.fixed(SizedBox(width: 8)),

          // 💰 거래대금: flex 18 (AmountDisplayWidget 사용)
          FlexChild.expanded(
            Align(
              alignment: Alignment.centerRight,
              child: AmountDisplayWidget(
                totalAmount: widget.signal.tradeAmount,
                isBuy: widget.signal.changePercent >= 0,
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
            ),
            flex: 18,
          ),
        ],
      ),
    );

    // 🎯 반짝임 애니메이션 적용 (V4.1 패턴 색상 연동)
    final blinkEnabled = ref.watch(appSettingsProvider).blinkEnabled;
    
    return blinkEnabled 
        ? BlinkAnimationHelper.wrapWithBlinkEffect(
            child: cardWidget,
            shouldBlink: _shouldBlink,
            blinkAnimation: _blinkAnimation,
            blinkColor: _getEnhancedPatternColor(), // 🆕 V4.1 동적 색상
          )
        : cardWidget;
  }
}

/// 🆕 V4.1 확장: AmountDisplayWidget에 highlightColor 파라미터 추가용 확장
/// (실제로는 AmountDisplayWidget 클래스에 추가해야 함)
extension AmountDisplayWidgetV41 on AmountDisplayWidget {
  /// V4.1 강조 색상이 적용된 위젯 생성
  static Widget withHighlight({
    required double totalAmount,
    required bool isBuy,
    double fontSize = 14,
    FontWeight fontWeight = FontWeight.w600,
    Color? highlightColor,
  }) {
    return Container(
      padding: highlightColor != null 
          ? const EdgeInsets.symmetric(horizontal: 4, vertical: 1)
          : null,
      decoration: highlightColor != null
          ? BoxDecoration(
              borderRadius: BorderRadius.circular(3),
              color: highlightColor.withValues(alpha: 0.1),
              border: Border.all(color: highlightColor.withValues(alpha: 0.3), width: 0.5),
            )
          : null,
      child: AmountDisplayWidget(
        totalAmount: totalAmount,
        isBuy: isBuy,
        fontSize: fontSize,
        fontWeight: fontWeight,
      ),
    );
  }
}