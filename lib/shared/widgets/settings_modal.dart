import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/app_settings.dart';

// üé® Í∏∞Ï°¥ ÏÑ∏Í∑∏Î®ºÌä∏ ÏúÑÏ†ØÎì§ Import (Í∏∞Ï°¥ Íµ¨Ï°∞ Ïú†ÏßÄ)
import 'settings/theme_mode_segment.dart';
import 'settings/slider_position_segment.dart';
import 'settings/font_segment.dart';

// üÜï ÏÉàÎ°ú ÎßåÎì† Í≥µÌÜµ ÏúÑÏ†ØÎì§ Import
import 'settings/common_segment.dart';
import 'settings/settings_constants.dart';

// üì± Ïï± Ï†ïÎ≥¥ Î™®Îã¨ Import
import '../information/app_information_modal.dart';

class SettingsModal {
  /// ÏÑ§Ï†ï Î™®Îã¨ ÌëúÏãú
  static void show(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black54,
      builder: (context) => const _SettingsModalContent(),
    );
  }
}

class _SettingsModalContent extends ConsumerWidget {
  const _SettingsModalContent();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settings = ref.watch(appSettingsProvider);
    final controller = ref.read(appSettingsProvider.notifier);

    return Container(
      margin: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha(26),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildHeader(context, ref),
          Divider(color: Colors.grey.shade300, height: 1),
          _buildContent(context, settings, controller, ref),
          SizedBox(height: MediaQuery.of(context).padding.bottom + 20),
        ],
      ),
    );
  }

  /// Ìó§Îçî (Ï†úÎ™© + Îã´Í∏∞ Î≤ÑÌäº)
  Widget _buildHeader(BuildContext context, WidgetRef ref) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Column(
        children: [
          Container(
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade400,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(height: 12),
          const Row(
            children: [
              SizedBox(width: 16),
              Icon(Icons.settings, color: Colors.orange),
              SizedBox(width: 8),
              Text(
                'ÏÑ§Ï†ï',
                style: TextStyle(
                  fontSize: 19,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// ÏÑ§Ï†ï Ïª®ÌÖêÏ∏† (Ïä§ÌÅ¨Î°§ Í∞ÄÎä•)
  Widget _buildContent(BuildContext context, AppSettings settings, dynamic controller, WidgetRef ref) {
    final scrollController = ScrollController();
    final screenHeight = MediaQuery.of(context).size.height;
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;
    final bottomPadding = MediaQuery.of(context).padding.bottom;
    
    final maxHeight = isLandscape 
        ? (screenHeight * 0.65 - bottomPadding).clamp(250.0, 300.0)
        : 420.0;
    
    return Container(
      constraints: BoxConstraints(maxHeight: maxHeight),
      child: RawScrollbar(
        controller: scrollController,
        thumbVisibility: false,
        trackVisibility: false,
        thickness: 6.4,
        radius: const Radius.circular(3.2),
        thumbColor: Colors.orange.withAlpha(128),
        trackColor: Colors.transparent,
        interactive: true,
        minThumbLength: 40,
        child: SingleChildScrollView(
          controller: scrollController,
          physics: const BouncingScrollPhysics(
            parent: AlwaysScrollableScrollPhysics(),
          ),
          padding: const EdgeInsets.only(left: 16, right: 20, top: 16, bottom: 16),
          child: Column(
            children: [
              // üé® ÌÖåÎßà ÏÑ§Ï†ï (Í∏∞Ï°¥ ÏúÑÏ†Ø Ïú†ÏßÄ)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.palette, color: Colors.orange),
                    title: const Text('ÌÖåÎßà', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getThemeDescription(settings.themeMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: ThemeModeSegment(
                      themeMode: settings.themeMode,
                      onChanged: (ThemeMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setThemeMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üí∞ ÏΩîÏù∏Î™Ö ÌëúÏãú Î∞©Ïãù (ÏÉà Í≥µÌÜµ ÏúÑÏ†Ø ÏÇ¨Ïö©)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.monetization_on, color: Colors.orange),
                    title: const Text('ÏΩîÏù∏Î™Ö ÌëúÏãú', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getDisplayModeDescription(settings.displayMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: CommonMultiSegment<DisplayMode>(
                      value: settings.displayMode,
                      options: const [DisplayMode.ticker, DisplayMode.korean, DisplayMode.english],
                      labels: const ['Ìã∞Ïª§', 'ÌïúÍ∏Ä', 'ÏòÅÎ¨∏'],
                      icons: const [Icons.code, Icons.language, Icons.translate],
                      onChanged: (DisplayMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setDisplayMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üíµ Í∏àÏï° ÌëúÏãú Î∞©Ïãù (ÏÉà Í≥µÌÜµ ÏúÑÏ†Ø ÏÇ¨Ïö©)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.account_balance_wallet, color: Colors.orange),
                    title: const Text('Í∏àÏï° ÌëúÏãú', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getAmountDisplayModeDescription(settings.amountDisplayMode),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: CommonMultiSegment<AmountDisplayMode>(
                      value: settings.amountDisplayMode,
                      options: const [AmountDisplayMode.number, AmountDisplayMode.icon],
                      labels: const ['Ïà´Ïûê', 'ÏïÑÏù¥ÏΩò'],
                      icons: const [Icons.format_list_numbered, Icons.account_balance_wallet],
                      onChanged: (AmountDisplayMode mode) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setAmountDisplayMode(mode);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üî§ Ìè∞Ìä∏ ÏÑ§Ï†ï (Í∏∞Ï°¥ ÏúÑÏ†Ø Ïú†ÏßÄ)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.font_download, color: Colors.orange),
                    title: const Text('Ìè∞Ìä∏', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getFontDescription(settings.fontFamily),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: FontSegment(
                      value: settings.fontFamily,
                      onChanged: (FontFamily font) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setFontFamily(font);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üéöÔ∏è Ïä¨ÎùºÏù¥Îçî ÏúÑÏπò (Í∏∞Ï°¥ ÏúÑÏ†Ø Ïú†ÏßÄ)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.tune, color: Colors.orange),
                    title: const Text('Ïä¨ÎùºÏù¥Îçî ÏúÑÏπò', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getSliderPositionDescription(settings.sliderPosition),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: SliderPositionSegment(
                      value: settings.sliderPosition,
                      onChanged: (SliderPosition position) {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        controller.setSliderPosition(position);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // ‚ú® Î∏îÎßÅÌÅ¨ Ìö®Í≥º
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.auto_awesome, color: Colors.orange),
                    title: const Text('Î∏îÎßÅÌÅ¨ Ìö®Í≥º', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getBlinkDescription(settings.blinkEnabled),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.blinkEnabled,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setBlinkEnabled(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),

              // üî• HOT ÏïÑÏù¥ÏΩò
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.local_fire_department, color: Colors.orange),
                    title: const Text('HOT ÏïÑÏù¥ÏΩò', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getHotIconDescription(settings.hotEnabled),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.hotEnabled,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setHotEnabled(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üì± ÌôîÎ©¥ Ìï≠ÏÉÅ ÏºúÍ∏∞
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.screen_lock_rotation, color: Colors.orange),
                    title: const Text('ÌôîÎ©¥ Ìï≠ÏÉÅ ÏºúÍ∏∞', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getKeepScreenDescription(settings.keepScreenOn),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.keepScreenOn,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setKeepScreenOn(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üì≥ ÌñÖÌã± ÌîºÎìúÎ∞±
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.vibration, color: Colors.orange),
                    title: const Text('ÌñÖÌã± ÌîºÎìúÎ∞±', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getHapticDescription(settings.isHapticEnabled),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.isHapticEnabled,
                    onChanged: (bool value) {
                      if (settings.isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setHapticEnabled(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üîí ÌôîÎ©¥ ÌöåÏ†Ñ Ïû†Í∏à
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: SwitchListTile(
                    secondary: const Icon(Icons.screen_rotation_outlined, color: Colors.orange),
                    title: const Text('ÏÑ∏Î°ú Î™®Îìú Í≥†Ï†ï', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: Text(
                      SettingsHelpers.getPortraitLockDescription(settings.isPortraitLocked),
                      style: const TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    value: settings.isPortraitLocked,
                    onChanged: (bool value) {
                      if (ref.read(appSettingsProvider).isHapticEnabled) {
                        HapticFeedback.lightImpact();
                      }
                      controller.setPortraitLocked(value);
                    },
                    activeColor: Colors.orange,
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üîß Ï∫êÏãú ÎπÑÏö∞Í∏∞ (ÏÉà Í≥µÌÜµ ÏúÑÏ†Ø ÏÇ¨Ïö©)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.cleaning_services, color: Colors.orange),
                    title: const Text('Ï∫êÏãú ÎπÑÏö∞Í∏∞', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      'ÏûÑÏãú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: CommonActionSegment(
                      icon: Icons.cleaning_services,
                      label: 'ÎπÑÏö∞Í∏∞',
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        _showClearCacheDialog(context, controller, ref);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üîÑ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî (ÏÉà Í≥µÌÜµ ÏúÑÏ†Ø ÏÇ¨Ïö©)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.restore, color: Colors.orange),
                    title: const Text('ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      'Î™®Îì† ÏÑ§Ï†ïÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÎêòÎèåÎ¶ΩÎãàÎã§',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: CommonActionSegment(
                      icon: Icons.restore,
                      label: 'Ï¥àÍ∏∞Ìôî',
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        _showResetDialog(context, controller, ref);
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 12),
              
              // üì± Ïï± Ï†ïÎ≥¥ (ÏÉà Í≥µÌÜµ ÏúÑÏ†Ø ÏÇ¨Ïö©)
              SizedBox(
                height: 80,
                child: Card(
                  elevation: 2,
                  child: ListTile(
                    leading: const Icon(Icons.info_outline, color: Colors.orange),
                    title: const Text('Ïï± Ï†ïÎ≥¥', style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold)),
                    subtitle: const Text(
                      'Î≤ÑÏ†Ñ Ï†ïÎ≥¥ Î∞è Í∞úÎ∞úÏûê Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï©ÎãàÎã§',
                      style: TextStyle(fontSize: 11),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: CommonActionSegment(
                      icon: Icons.info_outline,
                      label: 'Ï†ïÎ≥¥',
                      onPressed: () {
                        if (ref.read(appSettingsProvider).isHapticEnabled) {
                          HapticFeedback.lightImpact();
                        }
                        AppInformationModal.show(context);
                      },
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // üóÇÔ∏è Îã§Ïù¥ÏñºÎ°úÍ∑∏ Î©îÏÑúÎìúÎì§ (Í∏∞Ï°¥ Ïú†ÏßÄ)
  void _showClearCacheDialog(BuildContext context, dynamic controller, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ï∫êÏãú ÎπÑÏö∞Í∏∞'),
        content: const Text('ÏûÑÏãú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏï± ÏÑ±Îä•Ïù¥ Ìñ•ÏÉÅÎê† Ïàò ÏûàÏäµÎãàÎã§.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact();
              }
              Navigator.of(context).pop();
              await controller.clearCache();
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Ï∫êÏãúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§')),
                );
              }
            },
            child: const Text('ÏÇ≠Ï†ú', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }

  void _showResetDialog(BuildContext context, dynamic controller, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî'),
        content: const Text('Î™®Îì† ÏÑ§Ï†ïÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÎêòÎèåÎ¶¨ÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              if (ref.read(appSettingsProvider).isHapticEnabled) {
                HapticFeedback.lightImpact();
              }
              Navigator.of(context).pop();
              await controller.resetAllSettings();
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('ÏÑ§Ï†ïÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§')),
                );
              }
            },
            child: const Text('Ï¥àÍ∏∞Ìôî', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
}