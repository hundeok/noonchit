// File generated by FlutterFire CLI and modified for .env
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    _checkEnvKeys([
      'FIREBASE_WEB_API_KEY',
      'FIREBASE_WEB_APP_ID',
      'FIREBASE_WEB_MESSAGING_SENDER_ID',
      'FIREBASE_WEB_PROJECT_ID',
      'FIREBASE_WEB_AUTH_DOMAIN',
      'FIREBASE_WEB_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WEB_API_KEY']!,
      appId: dotenv.env['FIREBASE_WEB_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_WEB_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_WEB_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_WEB_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_WEB_STORAGE_BUCKET']!,
    );
  }

  static FirebaseOptions get android {
    _checkEnvKeys([
      'FIREBASE_ANDROID_API_KEY',
      'FIREBASE_ANDROID_APP_ID',
      'FIREBASE_ANDROID_MESSAGING_SENDER_ID',
      'FIREBASE_ANDROID_PROJECT_ID',
      'FIREBASE_ANDROID_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_ANDROID_API_KEY']!,
      appId: dotenv.env['FIREBASE_ANDROID_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_ANDROID_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_ANDROID_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_ANDROID_STORAGE_BUCKET']!,
    );
  }

  static FirebaseOptions get ios {
    _checkEnvKeys([
      'FIREBASE_IOS_API_KEY',
      'FIREBASE_IOS_APP_ID',
      'FIREBASE_IOS_MESSAGING_SENDER_ID',
      'FIREBASE_IOS_PROJECT_ID',
      'FIREBASE_IOS_STORAGE_BUCKET',
      'FIREBASE_IOS_BUNDLE_ID',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_IOS_API_KEY']!,
      appId: dotenv.env['FIREBASE_IOS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_IOS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_IOS_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_IOS_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get macos {
    _checkEnvKeys([
      'FIREBASE_MACOS_API_KEY',
      'FIREBASE_MACOS_APP_ID',
      'FIREBASE_MACOS_MESSAGING_SENDER_ID',
      'FIREBASE_MACOS_PROJECT_ID',
      'FIREBASE_MACOS_STORAGE_BUCKET',
      'FIREBASE_MACOS_BUNDLE_ID',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_MACOS_API_KEY']!,
      appId: dotenv.env['FIREBASE_MACOS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_MACOS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_MACOS_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_MACOS_STORAGE_BUCKET']!,
      iosBundleId: dotenv.env['FIREBASE_MACOS_BUNDLE_ID']!,
    );
  }

  static FirebaseOptions get windows {
    _checkEnvKeys([
      'FIREBASE_WINDOWS_API_KEY',
      'FIREBASE_WINDOWS_APP_ID',
      'FIREBASE_WINDOWS_MESSAGING_SENDER_ID',
      'FIREBASE_WINDOWS_PROJECT_ID',
      'FIREBASE_WINDOWS_AUTH_DOMAIN',
      'FIREBASE_WINDOWS_STORAGE_BUCKET',
    ]);
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WINDOWS_API_KEY']!,
      appId: dotenv.env['FIREBASE_WINDOWS_APP_ID']!,
      messagingSenderId: dotenv.env['FIREBASE_WINDOWS_MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['FIREBASE_WINDOWS_PROJECT_ID']!,
      authDomain: dotenv.env['FIREBASE_WINDOWS_AUTH_DOMAIN']!,
      storageBucket: dotenv.env['FIREBASE_WINDOWS_STORAGE_BUCKET']!,
    );
  }

  static void _checkEnvKeys(List<String> keys) {
    for (var key in keys) {
      if (dotenv.env[key] == null) {
        throw Exception('$key is missing in .env file');
      }
    }
  }
}