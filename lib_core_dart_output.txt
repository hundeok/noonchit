\n\n// ====== lib/core/di/trade_provider.dart ======\n
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../config/app_config.dart';
import '../services/hive_service.dart';          // 🎯 NEW
import '../network/api_client.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider; // 🆕 WebSocket import
import '../../data/datasources/trade_cache_ds.dart';
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/trade_repository_impl.dart';
import '../../domain/entities/trade.dart';
import '../../domain/usecases/trade_usecase.dart';

/// 🆕 마켓 정보 클래스
class MarketInfo {
  final String market;      // KRW-BTC
  final String koreanName;  // 비트코인
  final String englishName; // Bitcoin

  const MarketInfo({
    required this.market,
    required this.koreanName,
    required this.englishName,
  });

  factory MarketInfo.fromJson(Map<String, dynamic> json) {
    return MarketInfo(
      market: json['market'] ?? '',
      koreanName: json['korean_name'] ?? '',
      englishName: json['english_name'] ?? '',
    );
  }
}

/// 0) REST API client
final apiClientProvider = Provider<ApiClient>((ref) => ApiClient(
      apiKey: AppConfig.apiKey,
      apiSecret: AppConfig.apiSecret,
    ));

/// 🎯 HiveService Provider (main.dart에서 override)
final hiveServiceProvider = Provider<HiveService>((ref) {
  throw UnimplementedError('HiveService must be provided via main.dart override');
});

/// 🆕 마켓 정보 Provider (1시간 캐시 + market_warning 필터링)
final marketInfoProvider = FutureProvider<Map<String, MarketInfo>>((ref) async {
  final client = ref.read(apiClientProvider);
  
  try {
    final result = await client.request<List<dynamic>>(
      method: 'GET',
      path: '${AppConfig.upbitRestBase}/market/all',
      cacheDur: const Duration(hours: 1), // 1시간 캐시
    );
    
    return result.when(
      ok: (markets) {
        final Map<String, MarketInfo> marketMap = {};
        int filteredCount = 0;
        
        for (final market in markets) {
          if (market is Map<String, dynamic>) {
            // 🔒 market_warning 필터링 (업비트 백서 준수)
            final warning = market['market_warning'] as String?;
            if (warning == 'CAUTION') {
              filteredCount++;
              if (AppConfig.enableTradeLog) {
                log.d('Filtered CAUTION market: ${market['market']}');
              }
              continue; // CAUTION 종목은 건너뛰기
            }
            
            final info = MarketInfo.fromJson(market);
            marketMap[info.market] = info;
          }
        }
        
        if (AppConfig.enableTradeLog) {
          log.i('마켓 정보 로드됨: ${marketMap.length}개 (CAUTION 필터링: $filteredCount개)');
        }
        return marketMap;
      },
      err: (error) {
        log.w('마켓 정보 로드 실패: $error');
        return <String, MarketInfo>{};
      },
    );
  } catch (e) {
    log.e('마켓 정보 로드 중 오류: $e');
    return <String, MarketInfo>{};
  }
});

/// 1) KRW market list (top 199 by volume + essentials) + market_warning 필터링
final marketsProvider = FutureProvider<List<String>>((ref) async {
  final client = ref.read(apiClientProvider);

  // fetch all markets (cache 5 minutes)
  final marketResult = await client.request<List<dynamic>>(
    method: 'GET',
    path: '${AppConfig.upbitRestBase}/market/all',
    cacheDur: const Duration(minutes: 5),
  );
  final allMarkets =
      marketResult.when(ok: (v) => v, err: (_) => <dynamic>[]);

  // 🔒 filter KRW markets + market_warning 필터링 (업비트 백서 준수)
  final krwMarkets = <String>[];
  int cautionCount = 0;
  
  for (final market in allMarkets.whereType<Map<String, dynamic>>()) {
    final marketCode = market['market'] as String?;
    if (marketCode != null && marketCode.startsWith('KRW-')) {
      // CAUTION 종목은 WebSocket 구독에서 제외
      final warning = market['market_warning'] as String?;
      if (warning == 'CAUTION') {
        cautionCount++;
        continue;
      }
      krwMarkets.add(marketCode);
    }
  }
  
  if (AppConfig.enableTradeLog && cautionCount > 0) {
    log.i('CAUTION 종목 $cautionCount개 제외됨 (WebSocket 구독 안전성)');
  }

  // pick top by 24h volume (or acc_trade_price when outside 9–10am)
  final now = DateTime.now();
  final isEarly = now.hour >= 9 && now.hour < 10;
  final key = isEarly ? 'acc_trade_price_24h' : 'acc_trade_price';

  // real-time ticker lookup (no cache)
  final tickerResult = await client.request<List<dynamic>>(
    method: 'GET',
    path: '${AppConfig.upbitRestBase}/ticker',
    query: {'markets': krwMarkets.join(',')},
    cacheDur: null,
  );
  final tickers = tickerResult
      .when(ok: (v) => v, err: (_) => <dynamic>[])  
      .whereType<Map<String, dynamic>>()
      .toList()
    ..sort((a, b) =>
        ((b[key] as num?) ?? 0).compareTo((a[key] as num?) ?? 0));

  // ─── WS 구독 종목 슬라이싱 로직 (essentials 우선 + 중복 제거 후 상위 199개) ───
  const essentials = ['KRW-BTC', 'KRW-ETH', 'KRW-XRP', 'KRW-SOL'];
  final sortedMarkets = tickers.map((e) => e['market'] as String).toList();
  final combined = [
    ...essentials.where((market) => krwMarkets.contains(market)), // 🔒 essentials도 CAUTION 체크
    ...sortedMarkets.where((m) => !essentials.contains(m)),
  ];
  return combined.take(199).toList();
});

final cacheDSProvider = Provider<TradeCacheDataSource>((ref) {
  final hive = ref.watch(hiveServiceProvider);
  return TradeCacheDataSource(hive.tradeBox);
});

final remoteDSProvider = Provider((ref) => TradeRemoteDataSource(
      ref.read(wsClientProvider), // 🔄 websocket_provider에서 import
      ref.read(signalBusProvider),
      useTestData: AppConfig.useTestDataInDev,
    ));

final repoProvider = Provider((ref) => TradeRepositoryImpl(
      ref.read(remoteDSProvider),
      ref.read(cacheDSProvider),
    ));

final usecaseProvider = Provider((ref) => TradeUsecase(ref.read(repoProvider)));

/// 3) Filter state
final tradeFilterIndexProvider = StateProvider<int>((_) => 0);
final tradeFilterThresholdProvider = StateProvider<double>((ref) =>
    AppConfig.tradeFilters.firstWhere(
      (f) => f >= 20000000,
      orElse: () => AppConfig.tradeFilters.last,
    ));

/// 4) Filtered trades stream
final tradeListProvider = StreamProvider.autoDispose<List<Trade>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  // 현재 threshold 값과 markets를 읽어 스트림 구독
  final threshold = ref.watch(tradeFilterThresholdProvider);
  final markets = await ref.watch(marketsProvider.future);
  final repository = ref.read(repoProvider);

  // threshold 변경 시 Repository에도 업데이트
  ref.listen<double>(tradeFilterThresholdProvider, (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i(
          'Threshold changed: ${prev.toStringAsFixed(0)} → ${next.toStringAsFixed(0)}',
        );
      }
      repository.updateThreshold(next);
    }
  });

  // 실제 필터된 거래 스트림 방출
  yield* repository.watchFilteredTrades(threshold, markets);
});

/// 5) Aggregated trades stream
final aggregatedTradeProvider = StreamProvider.autoDispose<Trade>((ref) {
  // Prevent dispose on background
  ref.keepAlive();
  final repository = ref.read(repoProvider);
  return repository.watchAggregatedTrades();
});

/// 6) Helper to change threshold & index
final tradeThresholdController = Provider((ref) => TradeThresholdController(ref));

class TradeThresholdController {
  final Ref ref;
  TradeThresholdController(this.ref);

  void updateThreshold(double threshold, int index) {
    final options =
        AppConfig.tradeFilters.where((f) => f >= 20000000).toList();
    if (index < 0 || index >= options.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid threshold index: $index');
      return;
    }
    ref.read(tradeFilterThresholdProvider.notifier).state = threshold;
    ref.read(tradeFilterIndexProvider.notifier).state = index;
    AppConfig.updateFilters(options);
    if (AppConfig.enableTradeLog) {
      log.i(
        'Threshold updated: ${threshold.toStringAsFixed(0)} (index: $index)',
      );
    }
  }

  double get currentThreshold => ref.read(tradeFilterThresholdProvider);
  int get currentIndex => ref.read(tradeFilterIndexProvider);
  List<double> get availableThresholds =>
      AppConfig.tradeFilters.where((f) => f >= 20000000).toList();
}\n\n// ====== lib/core/di/websocket_provider.dart ======\n
// lib/core/di/websocket_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../config/app_config.dart';
import '../network/websocket/trade_ws_client.dart';
import '../network/websocket/base_ws_client.dart'; // WsStatus enum
import '../utils/logger.dart';
import '../bridge/signal_bus.dart';

/// 🆕 WebSocket 상세 통계 클래스 (시간/연결/앱생명주기 중심)
class WebSocketStats {
  final DateTime? connectTime;
  final int reconnectCount;
  final int totalSessions;
  final Duration cumulativeConnectTime;
  final int connectionAttempts;
  final DateTime? lastStateChangeTime;
  
  const WebSocketStats({
    this.connectTime,
    this.reconnectCount = 0,
    this.totalSessions = 0,
    this.cumulativeConnectTime = Duration.zero,
    this.connectionAttempts = 0,
    this.lastStateChangeTime,
  });

  /// 연결 지속 시간 계산
  Duration? get uptime {
    if (connectTime == null) return null;
    return DateTime.now().difference(connectTime!);
  }

  /// 평균 연결 지속 시간
  Duration get averageSessionDuration {
    if (totalSessions == 0) return Duration.zero;
    return Duration(
      milliseconds: cumulativeConnectTime.inMilliseconds ~/ totalSessions,
    );
  }

  /// 연결 성공률 (%)
  double get connectionSuccessRate {
    if (connectionAttempts == 0) return 0.0;
    return (totalSessions / connectionAttempts) * 100;
  }
}

/// 🔄 SignalBus Provider (순환 참조 방지)
final signalBusProvider = Provider<SignalBus>((ref) {
  final bus = SignalBus();
  ref.onDispose(() => bus.dispose());
  return bus;
});

/// 🆕 WebSocket 상태 관리
final wsStatusProvider = StateProvider<WsStatus>((ref) => WsStatus.disconnected);

/// 🆕 WebSocket 통계 관리 (개별 Provider들 - 시간/연결/앱생명주기)
final wsConnectTimeProvider = StateProvider<DateTime?>((ref) => null);
final wsReconnectCountProvider = StateProvider<int>((ref) => 0);
final wsTotalSessionsProvider = StateProvider<int>((ref) => 0);
final wsCumulativeConnectTimeProvider = StateProvider<Duration>((ref) => Duration.zero);
final wsConnectionAttemptsProvider = StateProvider<int>((ref) => 0);
final wsLastStateChangeTimeProvider = StateProvider<DateTime?>((ref) => null);

/// 🆕 통합 WebSocket 통계 Provider (개별 Provider들을 조합)
final wsStatsProvider = Provider<WebSocketStats>((ref) {
  final connectTime = ref.watch(wsConnectTimeProvider);
  final reconnectCount = ref.watch(wsReconnectCountProvider);
  final totalSessions = ref.watch(wsTotalSessionsProvider);
  final cumulativeConnectTime = ref.watch(wsCumulativeConnectTimeProvider);
  final connectionAttempts = ref.watch(wsConnectionAttemptsProvider);
  final lastStateChangeTime = ref.watch(wsLastStateChangeTimeProvider);

  return WebSocketStats(
    connectTime: connectTime,
    reconnectCount: reconnectCount,
    totalSessions: totalSessions,
    cumulativeConnectTime: cumulativeConnectTime,
    connectionAttempts: connectionAttempts,
    lastStateChangeTime: lastStateChangeTime,
  );
});

/// 🆕 WebSocket 클라이언트 (기본 - 기존 그대로)
final wsClientProvider = Provider<TradeWsClient>((ref) {
  return TradeWsClient(
    onStatusChange: (status) {
      final now = DateTime.now();
      ref.read(wsStatusProvider.notifier).state = status;
      ref.read(wsLastStateChangeTimeProvider.notifier).state = now;
      
      // 간단한 통계 업데이트 (시간/연결/앱생명주기)
      switch (status) {
        case WsStatus.connecting:
          // 연결 시도 카운트
          final attempts = ref.read(wsConnectionAttemptsProvider);
          ref.read(wsConnectionAttemptsProvider.notifier).state = attempts + 1;
          break;
          
        case WsStatus.connected:
          // 연결 성공
          ref.read(wsConnectTimeProvider.notifier).state = now;
          
          // 총 세션 수 증가
          final sessions = ref.read(wsTotalSessionsProvider);
          ref.read(wsTotalSessionsProvider.notifier).state = sessions + 1;
          break;
          
        case WsStatus.reconnecting:
          // 재연결 카운트
          final currentCount = ref.read(wsReconnectCountProvider);
          ref.read(wsReconnectCountProvider.notifier).state = currentCount + 1;
          break;
          
        case WsStatus.disconnected:
          // 연결 종료 시 누적 시간 업데이트
          final connectTime = ref.read(wsConnectTimeProvider);
          if (connectTime != null) {
            final sessionDuration = now.difference(connectTime);
            final cumulative = ref.read(wsCumulativeConnectTimeProvider);
            ref.read(wsCumulativeConnectTimeProvider.notifier).state = 
                cumulative + sessionDuration;
          }
          ref.read(wsConnectTimeProvider.notifier).state = null;
          break;
          
        default:
          break;
      }
      
      if (AppConfig.enableTradeLog) {
        log.i('WebSocket status changed: $status');
      }
    },
  );
});\n\n// ====== lib/core/di/signal_provider.dart ======\n
// lib/core/di/signal_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import '../utils/pattern_detector.dart';
import '../utils/pattern_config.dart';
import '../utils/advanced_metrics.dart';
import 'trade_provider.dart'; // 전체 import (app_providers.dart 패턴)
import '../../data/repositories/signal_repository_impl.dart';
import '../../domain/entities/signal.dart';
import '../../domain/repositories/signal_repository.dart';
import '../../domain/usecases/signal_usecase.dart';

// ==========================================================================
// 🚀 V4.1 온라인 지표 의존성 주입 구조
// ==========================================================================

/// AdvancedMetrics Provider (온라인 계산기 관리)
final advancedMetricsProvider = Provider<AdvancedMetrics>((ref) {
  final metrics = AdvancedMetrics(
    maxGap: const Duration(seconds: 10),     // 스트림 끊김 감지 시간
    staleThreshold: const Duration(seconds: 30), // 데이터 만료 시간
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() {
    metrics.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 AdvancedMetrics disposed - 온라인 지표 정리 완료');
    }
  });
  
  return metrics;
});

/// PatternConfig Provider (상태 관리 가능)
final patternConfigProvider = StateNotifierProvider<PatternConfigNotifier, PatternConfig>((ref) {
  return PatternConfigNotifier();
});

/// PatternDetector Provider (온라인 지표 의존성 주입)
final patternDetectorProvider = Provider<PatternDetector>((ref) {
  final config = ref.watch(patternConfigProvider);
  final metrics = ref.watch(advancedMetricsProvider);
  
  final detector = PatternDetector(
    config: config,
    metrics: metrics,
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() {
    detector.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 PatternDetector disposed - 쿨다운 및 지표 정리 완료');
    }
  });
  
  return detector;
});

/// Signal Repository Provider (V4.1 온라인 지표 의존성 주입)
final signalRepoProvider = Provider<SignalRepository>((ref) {
  final remoteDS = ref.read(remoteDSProvider);
  final patternDetector = ref.watch(patternDetectorProvider);
  final patternConfig = ref.watch(patternConfigProvider);
  
  final repository = SignalRepositoryImpl(
    remoteDS,
    patternDetector: patternDetector,
    patternConfig: patternConfig,
  );
  
  // Provider dispose시 리소스 정리
  ref.onDispose(() async {
    await repository.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 SignalRepository V4.1 disposed - 모든 리소스 정리 완료');
    }
  });
  
  return repository;
});

/// Signal UseCase Provider
final signalUsecaseProvider = Provider<SignalUseCase>((ref) {
  final repository = ref.read(signalRepoProvider);
  return SignalUseCase(repository);
});

// ==========================================================================
// 🎯 상태 관리 Providers (V4.1 확장)
// ==========================================================================

/// 현재 선택된 패턴 인덱스 (슬라이더 위치)
final signalPatternIndexProvider = StateProvider<int>((_) => 0);

/// 현재 선택된 패턴 타입
final signalPatternTypeProvider = StateProvider<PatternType>((ref) {
  final index = ref.watch(signalPatternIndexProvider);
  final patternName = AppConfig.getSignalPatternByIndex(index);
  
  // AppConfig 패턴명을 PatternType으로 변환
  switch (patternName) {
    case 'surge':
      return PatternType.surge;
    case 'flashFire':
      return PatternType.flashFire;
    case 'stackUp':
      return PatternType.stackUp;
    case 'stealthIn':
      return PatternType.stealthIn;
    case 'blackHole':
      return PatternType.blackHole;
    case 'reboundShot':
      return PatternType.reboundShot;
    default:
      return PatternType.surge; // 기본값
  }
});

/// 패턴별 임계값 관리 (V4.1 PatternConfig 기반)
final signalThresholdProvider = StateProvider.family<double, PatternType>((ref, pattern) {
  final config = ref.watch(patternConfigProvider);
  return config.getConfigValue(pattern, 'priceChangePercent');
});

/// 패턴별 활성화 상태 관리
final signalPatternEnabledProvider = StateProvider.family<bool, PatternType>((ref, pattern) => true);

/// 🆕 온라인 지표 건강성 모니터링
final onlineMetricsHealthProvider = StreamProvider.autoDispose<Map<String, dynamic>>((ref) async* {
  final metrics = ref.watch(advancedMetricsProvider);
  
  yield* Stream.periodic(const Duration(seconds: 5), (_) {
    return metrics.getSystemHealth();
  });
});

/// 🆕 시스템 성능 모니터링
final systemPerformanceProvider = StreamProvider.autoDispose<Map<String, dynamic>>((ref) async* {
  final repository = ref.watch(signalRepoProvider) as SignalRepositoryImpl;
  
  yield* repository.watchPerformanceMetrics();
});

// ==========================================================================
// 🔥 스트림 Providers (V4.1 온라인 지표 연동)
// ==========================================================================

/// 현재 패턴의 시그널 스트림 (온라인 지표 연동)
final signalListProvider = StreamProvider.autoDispose<List<Signal>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  // 현재 선택된 패턴과 마켓 정보 구독
  final patternType = ref.watch(signalPatternTypeProvider);
  final repository = ref.read(signalRepoProvider);

  // marketsProvider에서 데이터 로드 (Trade와 동일한 패턴)
  final markets = await ref.watch(marketsProvider.future);

  // 패턴 변경 시 로그
  if (AppConfig.enableTradeLog) {
    log.i('🎯 Signal pattern changed to: ${patternType.displayName} (V4.1-Online)');
  }

  // 🆕 온라인 지표 상태 모니터링
  ref.listen(onlineMetricsHealthProvider, (prev, next) {
    if (next.hasValue) {
      final health = next.value!;
      final staleMarkets = health['staleMarkets'] ?? 0;
      if (staleMarkets > 0 && AppConfig.enableTradeLog) {
        log.w('⚠️ 온라인 지표 경고: $staleMarkets개 마켓 데이터 만료');
      }
    }
  });

  // 임계값 변경 감지 및 Repository 업데이트
  ref.listen<double>(signalThresholdProvider(patternType), (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i('📊 Signal threshold changed: ${patternType.displayName} ${prev.toStringAsFixed(2)} → ${next.toStringAsFixed(2)}');
      }
      repository.updatePatternThreshold(patternType, next);
    }
  });

  // 패턴 활성화 상태 변경 감지
  ref.listen<bool>(signalPatternEnabledProvider(patternType), (prev, next) {
    if (prev != null && prev != next) {
      if (AppConfig.enableTradeLog) {
        log.i('🔄 Signal pattern ${next ? "enabled" : "disabled"}: ${patternType.displayName}');
      }
      repository.setPatternEnabled(patternType, next);
    }
  });

  // 패턴별 시그널 스트림 방출
  yield* repository.watchSignalsByPattern(patternType, markets);
});

/// 모든 패턴의 시그널 통합 스트림 (온라인 지표 연동)
final allSignalsProvider = StreamProvider.autoDispose<List<Signal>>((ref) async* {
  // Prevent dispose on background
  ref.keepAlive();
  
  final repository = ref.read(signalRepoProvider);
  
  // marketsProvider에서 데이터 로드 (Trade와 동일한 패턴)
  final markets = await ref.watch(marketsProvider.future);
  
  if (AppConfig.enableTradeLog) {
    log.i('🚀 All signals stream initialized with ${markets.length} markets (V4.1-Online)');
  }
  
  yield* repository.watchAllSignals(markets);
});

// ==========================================================================
// 🛠️ PatternConfig StateNotifier (V4.1 온라인 지표 설정 관리)
// ==========================================================================

class PatternConfigNotifier extends StateNotifier<PatternConfig> {
  PatternConfigNotifier() : super(PatternConfig());

  /// 특정 패턴의 설정값 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    try {
      state.updatePatternConfig(pattern, key, value);
      // 상태 갱신을 위해 새 인스턴스 생성
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('⚙️ Pattern config updated: ${pattern.name}.$key = $value');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Pattern config update failed: $e');
      }
    }
  }

  /// 패턴 프리셋 적용
  void applyPreset(String presetName) {
    try {
      switch (presetName.toLowerCase()) {
        case 'conservative':
          state.applyConservativePreset();
          break;
        case 'aggressive':
          state.applyAggressivePreset();
          break;
        case 'balanced':
          state.applyBalancedPreset();
          break;
        default:
          throw ArgumentError('Unknown preset: $presetName');
      }
      
      // 상태 갱신
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('🎯 Pattern preset applied: $presetName');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Preset application failed: $e');
      }
    }
  }

  /// 설정 가져오기/내보내기
  void importConfig(Map<String, dynamic> config) {
    try {
      state.importConfig(config);
      state = PatternConfig(customConfig: state.getAllPatternConfigs());
      
      if (AppConfig.enableTradeLog) {
        log.i('📥 Pattern config imported successfully');
      }
    } catch (e) {
      if (AppConfig.enableTradeLog) {
        log.e('❌ Config import failed: $e');
      }
    }
  }

  Map<String, dynamic> exportConfig() {
    return state.exportConfig();
  }

  /// 기본값으로 리셋
  void resetToDefault([PatternType? pattern]) {
    state.resetToDefault(pattern);
    state = PatternConfig(customConfig: state.getAllPatternConfigs());
    
    if (AppConfig.enableTradeLog) {
      final message = pattern != null 
          ? 'Pattern ${pattern.name} reset to default'
          : 'All patterns reset to default';
      log.i('🔄 $message');
    }
  }
}

// ==========================================================================
// 🎮 Signal 패턴 컨트롤러 (V4.1 온라인 지표 확장)
// ==========================================================================

final signalPatternController = Provider((ref) => SignalPatternControllerV4(ref));

class SignalPatternControllerV4 {
  final Ref ref;
  SignalPatternControllerV4(this.ref);

  /// 패턴 인덱스 변경 (슬라이더 이동)
  void updatePatternIndex(int index) {
    final maxIndex = AppConfig.signalPatterns.length - 1;
    if (index < 0 || index > maxIndex) {
      if (AppConfig.enableTradeLog) {
        log.w('⚠️ Invalid pattern index: $index (max: $maxIndex)');
      }
      return;
    }

    ref.read(signalPatternIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      final patternName = AppConfig.getSignalPatternByIndex(index);
      log.i('🎯 Pattern index updated: $index (${AppConfig.getSignalPatternName(patternName)})');
    }
  }

  /// 현재 패턴의 임계값 변경 (V4.1 PatternConfig 연동)
  void updateThreshold(double threshold) {
    final currentPattern = ref.read(signalPatternTypeProvider);
    
    // PatternConfig에도 반영
    ref.read(patternConfigProvider.notifier)
        .updatePatternConfig(currentPattern, 'priceChangePercent', threshold);
    
    // Provider 상태 업데이트
    ref.read(signalThresholdProvider(currentPattern).notifier).state = threshold;
  }

  /// 🆕 V4.1 고급 설정 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    ref.read(patternConfigProvider.notifier).updatePatternConfig(pattern, key, value);
  }

  /// 🆕 프리셋 적용
  void applyPreset(String presetName) {
    ref.read(patternConfigProvider.notifier).applyPreset(presetName);
  }

  /// 패턴 활성화/비활성화
  void setPatternEnabled(PatternType pattern, bool enabled) {
    ref.read(signalPatternEnabledProvider(pattern).notifier).state = enabled;
  }

  /// 시그널 초기화
  void clearSignals([PatternType? pattern]) {
    final repository = ref.read(signalRepoProvider);
    repository.clearSignals(pattern);
    
    if (AppConfig.enableTradeLog) {
      final message = pattern != null 
          ? 'Signals cleared for pattern: ${pattern.displayName}'
          : 'All signals cleared';
      log.i('🧹 $message');
    }
  }

  /// 🆕 V4.1 온라인 지표 리셋
  void resetOnlineMetrics([String? market]) {
    final metrics = ref.read(advancedMetricsProvider);
    
    if (market != null) {
      metrics.resetMarket(market);
      if (AppConfig.enableTradeLog) {
        log.i('🔄 Online metrics reset for market: $market');
      }
    } else {
      metrics.resetAll();
      if (AppConfig.enableTradeLog) {
        log.i('🔄 All online metrics reset');
      }
    }
  }

  /// 🆕 V4.1 시스템 헬스 체크
  Future<Map<String, dynamic>> getSystemHealth() async {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return await repository.getSystemHealth();
  }

  /// 🆕 V4.1 패턴별 통계 (온라인 지표 포함)
  Future<Map<String, dynamic>> getPatternStats(PatternType pattern) async {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return await repository.getPatternStats(pattern);
  }

  /// 🆕 V4.1 온라인 지표 상태 조회
  Map<String, dynamic> getOnlineMetricsHealth() {
    final metricsHealth = ref.read(onlineMetricsHealthProvider);
    return metricsHealth.when(
      data: (health) => health,
      loading: () => {'status': 'loading'},
      error: (error, stack) => {'status': 'error', 'message': error.toString()},
    );
  }

  /// 🆕 V4.1 설정 내보내기/가져오기
  Map<String, dynamic> exportConfiguration() {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return repository.exportConfiguration();
  }

  void importConfiguration(Map<String, dynamic> config) {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    repository.importConfiguration(config);
    
    if (AppConfig.enableTradeLog) {
      log.i('📥 Configuration imported successfully');
    }
  }

  /// 현재 상태 조회
  int get currentIndex => ref.read(signalPatternIndexProvider);
  PatternType get currentPattern => ref.read(signalPatternTypeProvider);
  double get currentThreshold => ref.read(signalThresholdProvider(currentPattern));
  bool get isCurrentPatternEnabled => ref.read(signalPatternEnabledProvider(currentPattern));

  /// 사용 가능한 패턴 정보
  List<String> get availablePatterns => AppConfig.signalPatterns;
  List<String> get patternDisplayNames => 
      AppConfig.signalPatterns.map((p) => AppConfig.getSignalPatternName(p)).toList();
  List<String> get patternDescriptions => 
      AppConfig.signalPatterns.map((p) => AppConfig.getSignalPatternDescription(p)).toList();

  /// V4.1 패턴별 기본 임계값 조회 (PatternConfig 기반)
  double getDefaultThreshold(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getConfigValue(pattern, 'priceChangePercent');
  }

  /// V4.1 패턴별 쿨다운 시간 조회
  Duration getCooldownDuration(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getCooldownDuration(pattern);
  }

  /// V4.1 패턴 설정 전체 조회
  Map<String, double> getPatternConfig(PatternType pattern) {
    final config = ref.read(patternConfigProvider);
    return config.getPatternConfig(pattern);
  }

  /// 패턴별 시간 윈도우 조회 (기존 호환성)
  int getTimeWindow(PatternType pattern) {
    final patternName = _getPatternConfigName(pattern);
    return AppConfig.getSignalTimeWindow(patternName);
  }

  /// 패턴 통계 조회 (V4.1 온라인 지표 확장)
  Map<String, dynamic> getPatternStatsOverview() {
    final allSignals = ref.read(allSignalsProvider).value ?? [];
    final patternCounts = <PatternType, int>{};
    
    for (final signal in allSignals) {
      patternCounts[signal.patternType] = 
          (patternCounts[signal.patternType] ?? 0) + 1;
    }
    
    // 온라인 지표 건강성 추가
    final onlineHealth = getOnlineMetricsHealth();
    
    return {
      'totalSignals': allSignals.length,
      'patternCounts': patternCounts,
      'lastUpdate': allSignals.isNotEmpty ? allSignals.first.detectedAt : null,
      'version': '4.1-Online',
      'onlineMetrics': onlineHealth,
    };
  }

  /// 🆕 V4.1 성능 모니터링 스트림
  Stream<Map<String, dynamic>> watchPerformanceMetrics() {
    final repository = ref.read(signalRepoProvider) as SignalRepositoryImpl;
    return repository.watchPerformanceMetrics();
  }

  /// 🆕 V4.1 온라인 지표 모니터링 스트림
  Stream<Map<String, dynamic>> watchOnlineMetricsHealth() {
    return Stream.periodic(const Duration(seconds: 5), (_) {
      final metrics = ref.read(advancedMetricsProvider);
      return metrics.getSystemHealth();
    });
  }
}

/// Helper function: PatternType을 AppConfig 패턴명으로 변환
String _getPatternConfigName(PatternType pattern) {
  switch (pattern) {
    case PatternType.surge:
      return 'surge';
    case PatternType.flashFire:
      return 'flashFire';
    case PatternType.stackUp:
      return 'stackUp';
    case PatternType.stealthIn:
      return 'stealthIn';
    case PatternType.blackHole:
      return 'blackHole';
    case PatternType.reboundShot:
      return 'reboundShot';
  }
}

// ==========================================================================
// 🔍 개발자용 디버깅 Providers
// ==========================================================================

/// 🆕 디버깅용 Provider - 전체 시스템 상태
final debugSystemStatusProvider = FutureProvider.autoDispose<Map<String, dynamic>>((ref) async {
  final controller = ref.watch(signalPatternController);
  final systemHealth = await controller.getSystemHealth();
  final onlineHealth = controller.getOnlineMetricsHealth();
  
  return {
    'timestamp': DateTime.now().toIso8601String(),
    'version': 'V4.1-Online-Debug',
    'systemHealth': systemHealth,
    'onlineMetrics': onlineHealth,
    'currentPattern': controller.currentPattern.name,
    'activeProviders': {
      'advancedMetrics': 'active',
      'patternDetector': 'active', 
      'signalRepository': 'active',
      'patternConfig': 'active',
    },
  };
});

/// Repository dispose 관리 (V4.1)
final signalRepositoryDisposeProvider = Provider.autoDispose<SignalRepository>((ref) {
  final repository = ref.watch(signalRepoProvider);
  
  ref.onDispose(() async {
    await repository.dispose();
    if (AppConfig.enableTradeLog) {
      log.i('🔥 Signal repository V4.1 disposed - 온라인 지표 포함 완전 정리');
    }
  });
  
  return repository;
});\n\n// ====== lib/core/di/sector_provider.dart ======\n
// lib/core/di/sector_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'volume_provider.dart' show volumeUsecaseProvider;
import 'trade_provider.dart' show marketsProvider;
import '../../domain/entities/volume.dart';
import '../../shared/widgets/sector_classification.dart';

// ═══════════════════════════════════════════════════════════════════════════════
// 🆕 SECTOR 전용 Provider들 (SectorClassificationProvider 연동)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🆕 섹터 분류 Provider (SectorClassificationProvider 연동)
final sectorClassificationProvider = ChangeNotifierProvider<SectorClassificationProvider>(
  (ref) => SectorClassificationProvider(),
);

/// 🆕 섹터 시간대 상태 (볼륨과 독립적으로 관리)
final sectorTimeFrameIndexProvider = StateProvider<int>((ref) => 0);

final sectorTimeFrameProvider = StateProvider<String>((ref) {
  final index = ref.watch(sectorTimeFrameIndexProvider);
  final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  if (index >= 0 && index < timeFrames.length) {
    return timeFrames[index];
  }
  return '1m';
});

/// 🆕 섹터별 거래대금 데이터 스트림 (SectorClassificationProvider 활용)
final sectorVolumeDataProvider = StreamProvider.autoDispose<List<Volume>>((ref) async* {
  ref.keepAlive();

  try {
    final timeFrame = ref.watch(sectorTimeFrameProvider);
    final usecase = ref.read(volumeUsecaseProvider);
    
    // markets AsyncValue 처리
    final marketsAsync = ref.watch(marketsProvider);
    final markets = marketsAsync.when(
      data: (data) => data,
      loading: () => <String>[],
      error: (_, __) => <String>[],
    );

    if (markets.isEmpty) {
      yield <Volume>[];
      return;
    }

    if (AppConfig.enableTradeLog) {
      log.i('Sector volume stream started: $timeFrame, ${markets.length} markets');
    }

    // 개별 코인 볼륨을 섹터별로 변환
    yield* usecase.getVolumeRanking(timeFrame, markets).map((result) {
      return result.when(
        ok: (coinVolumes) {
          // SectorClassificationProvider에서 현재 섹터 매핑 가져오기
          final sectorProvider = ref.read(sectorClassificationProvider);
          final sectorMapping = sectorProvider.currentSectors;
          
          final sectorVolumes = _aggregateVolumesBySector(coinVolumes, sectorMapping);
          
          if (AppConfig.enableTradeLog) {
            log.d('Sector volumes aggregated: ${sectorVolumes.length} sectors from ${coinVolumes.length} coins');
          }
          
          return sectorVolumes;
        },
        err: (error) {
          log.e('Sector Volume error: ${error.message}');
          return <Volume>[];
        },
      );
    });
    
  } catch (e, stackTrace) {
    log.e('Sector volume stream error: $e', e, stackTrace);
    yield <Volume>[];
  }
});

/// 🎯 핵심 로직: 개별 코인 볼륨을 섹터별로 합산
List<Volume> _aggregateVolumesBySector(List<Volume> coinVolumes, Map<String, List<String>> sectorMapping) {
  if (coinVolumes.isEmpty) return [];
  
  final Map<String, double> sectorVolumeMap = {};
  final sampleVolume = coinVolumes.first;
  
  // 각 코인을 해당 섹터에 합산
  for (final coinVolume in coinVolumes) {
    final ticker = coinVolume.market.replaceFirst('KRW-', '');
    final sectors = _findSectorsForCoin(ticker, sectorMapping);
    
    for (final sector in sectors) {
      sectorVolumeMap[sector] = (sectorVolumeMap[sector] ?? 0.0) + coinVolume.totalVolume;
    }
  }
  
  // 볼륨이 0인 섹터 제거
  sectorVolumeMap.removeWhere((key, value) => value <= 0);
  
  // Volume 객체로 변환
  final sectorVolumes = sectorVolumeMap.entries
      .map((entry) => Volume(
            market: 'SECTOR-${entry.key}', // 섹터 구분용 prefix
            totalVolume: entry.value,
            lastUpdatedMs: sampleVolume.lastUpdatedMs,
            timeFrame: sampleVolume.timeFrame,
            timeFrameStartMs: sampleVolume.timeFrameStartMs,
          ))
      .toList();
  
  // 볼륨 순 정렬 (높은 순)
  sectorVolumes.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
  return sectorVolumes;
}

/// 🎯 특정 코인이 속한 섹터들 찾기
List<String> _findSectorsForCoin(String ticker, Map<String, List<String>> sectorMapping) {
  final sectors = <String>[];
  sectorMapping.forEach((sectorName, coins) {
    if (coins.contains(ticker)) {
      sectors.add(sectorName);
    }
  });
  return sectors;
}

/// 🆕 섹터 컨트롤러
final sectorTimeFrameController = Provider((ref) => SectorTimeFrameController(ref));

class SectorTimeFrameController {
  final Ref ref;
  SectorTimeFrameController(this.ref);

  /// 시간대 변경
  void updateTimeFrame(String timeFrame, int index) {
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    if (index < 0 || index >= timeFrames.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid sector timeFrame index: $index');
      return;
    }
    
    ref.read(sectorTimeFrameProvider.notifier).state = timeFrame;
    ref.read(sectorTimeFrameIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      log.i('Sector TimeFrame updated: $timeFrame (index: $index)');
    }
  }

  /// 🆕 섹터 분류 토글 (SectorClassificationProvider 연동)
  void toggleSectorClassification() {
    ref.read(sectorClassificationProvider.notifier).toggleClassificationType();
    
    if (AppConfig.enableTradeLog) {
      final currentName = ref.read(sectorClassificationProvider).currentClassificationName;
      log.i('Sector classification toggled: $currentName');
    }
  }

  /// 현재 시간대 정보
  String get currentTimeFrame => ref.read(sectorTimeFrameProvider);
  int get currentIndex => ref.read(sectorTimeFrameIndexProvider);
  
  /// 현재 섹터 분류 정보 (SectorClassificationProvider 연동)
  bool get isDetailedClassification => ref.read(sectorClassificationProvider).isDetailedClassification;
  String get currentSectorClassificationName => ref.read(sectorClassificationProvider).currentClassificationName;
  int get totalSectors => ref.read(sectorClassificationProvider).currentSectors.length;
  
  /// 기본 정보
  List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  
  String getTimeFrameName(String timeFrame) {
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    return AppConfig.timeFrameNames[minutes] ?? timeFrame;
  }

  /// 🆕 섹터 관련 유틸리티 (SectorClassificationProvider 연동)
  Map<String, int> getSectorSizes() {
    return ref.read(sectorClassificationProvider).sectorSizes;
  }

  List<String> getCoinsInSector(String sectorName) {
    return ref.read(sectorClassificationProvider).getCoinsInSector(sectorName);
  }

  List<String> getSectorsForCoin(String ticker) {
    return ref.read(sectorClassificationProvider).getSectorsForCoin(ticker);
  }

  /// 수동 리셋 메서드들 (볼륨 UseCase 재사용)
  void resetCurrentTimeFrame() {
    final usecase = ref.read(volumeUsecaseProvider);
    final timeFrame = ref.read(sectorTimeFrameProvider);
    
    final result = usecase.resetTimeFrame(timeFrame);
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Sector volume reset: $timeFrame');
        }
      },
      err: (error) {
        log.e('Sector volume reset failed: ${error.message}');
      },
    );
  }

  void resetAllTimeFrames() {
    final usecase = ref.read(volumeUsecaseProvider);
    
    final result = usecase.resetAllTimeFrames();
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Sector volume reset: all timeframes');
        }
      },
      err: (error) {
        log.e('Sector volume reset all failed: ${error.message}');
      },
    );
  }

  /// 다음 리셋 시간 조회
  DateTime? getNextResetTime() {
    final usecase = ref.read(volumeUsecaseProvider);
    final timeFrame = ref.read(sectorTimeFrameProvider);
    
    final result = usecase.getNextResetTime(timeFrame);
    return result.when(
      ok: (resetTime) => resetTime,
      err: (error) {
        log.e('Get sector reset time failed: ${error.message}');
        return null;
      },
    );
  }
}\n\n// ====== lib/core/di/app_providers.dart ======\n
// lib/core/di/app_providers.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../bridge/signal_bus.dart';

/// ▶ App lifecycle
export '../utils/app_life_cycle_manager.dart'
    show appLifecycleManagerProvider;

/// ▶ Settings DI + state
export 'settings_provider.dart'
    show
        sharedPreferencesProvider,
        settingsLocalDSProvider,
        settingsRepositoryProvider,
        settingsUsecaseProvider,
        appSettingsProvider;

/// ▶ Domain entities
export '../../domain/entities/app_settings.dart'
    show
        DisplayMode,
        SliderPosition;

/// ▶ WebSocket DI & stats
export 'websocket_provider.dart'
    show
        wsStatusProvider,
        wsClientProvider,
        wsStatsProvider,
        WebSocketStats;

/// ▶ Trade DI & streams
export 'trade_provider.dart';

/// ▶ Volume DI & streams
export 'volume_provider.dart'
    show
        volumeRemoteDSProvider,
        volumeRepositoryProvider,
        volumeUsecaseProvider,
        volumeTimeFrameIndexProvider,
        volumeTimeFrameProvider,
        volumeDataProvider,
        volumeTimeFrameController;

/// ▶ Sector DI & streams
export 'sector_provider.dart'
    show
        sectorClassificationProvider,
        sectorTimeFrameIndexProvider,
        sectorTimeFrameProvider,
        sectorVolumeDataProvider,
        sectorTimeFrameController;

/// ▶ Signal DI & streams (V4.1 Online)
export 'signal_provider.dart'
    show
        // 🔥 V4.1 의존성 주입
        advancedMetricsProvider,
        patternConfigProvider,
        patternDetectorProvider,
        signalRepoProvider,
        signalUsecaseProvider,
        
        // 🎯 상태 관리
        signalPatternIndexProvider,
        signalPatternTypeProvider,
        signalThresholdProvider,
        signalPatternEnabledProvider,
        
        // 🔥 스트림 (온라인 지표 연동)
        signalListProvider,
        allSignalsProvider,
        
        // 🆕 V4.1 모니터링
        onlineMetricsHealthProvider,
        systemPerformanceProvider,
        
        // 🎮 V4.1 컨트롤러
        signalPatternController,
        SignalPatternControllerV4,
        
        // 🛠️ StateNotifier
        PatternConfigNotifier,
        
        // 🔍 디버깅
        debugSystemStatusProvider;

/// ▶ Market Mood DI & streams
export 'market_mood_provider.dart'
    show
        coinGeckoApiClientProvider,
        marketMoodRemoteDSProvider,
        marketMoodLocalDSProvider,
        marketMoodRepositoryProvider,
        marketMoodUsecaseProvider,
        exchangeRateProvider,
        marketMoodProvider,
        marketMoodComputedDataProvider, // UI에서 로딩/에러 상태 처리를 위해 export
        volumeComparisonProvider,
        currentMarketMoodProvider,
        marketMoodSummaryProvider,
        marketMoodSystemProvider,
        marketMoodControllerProvider,
        MarketMoodComputedData;

/// ▶ Market Mood Domain Entities
export '../../domain/entities/market_mood.dart'
    show
        MarketMood,
        VolumeData,
        MarketMoodData,
        ComparisonResult,
        ComparisonData,
        MarketMoodSystemState,
        VolumeConstants;

/// ▶ Sector 분류 관리 (shared layer)
export '../../shared/widgets/sector_classification.dart'
    show SectorClassificationProvider;

/// ▶ 전역 SnackBar key
final scaffoldMessengerKeyProvider =
    Provider<GlobalKey<ScaffoldMessengerState>>((ref) {
  return GlobalKey<ScaffoldMessengerState>();
});

/// ▶ BottomTab 인덱스
final selectedTabProvider = StateProvider<int>((ref) => 0);

/// ▶ SignalBus 싱글턴
final signalBusProvider = Provider<SignalBus>((ref) {
  final bus = SignalBus();
  ref.onDispose(() => bus.dispose());
  return bus;
});\n\n// ====== lib/core/di/notification_provider.dart ======\n
// lib/core/di/notification_provider.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import '../utils/logger.dart';
import 'app_providers.dart'; // scaffoldMessengerKeyProvider

/// 🔔 알림 타입 enum
enum NotificationType {
  trade,       // 체결 알림
  priceAlert,  // 가격 알림  
  volume,      // 거래량 알림
  surge,       // 급등락 알림
  system,      // 시스템 알림
}

/// 🔔 알림 상태 enum  
enum NotificationStatus {
  unread,      // 읽지 않음
  read,        // 읽음
  archived,    // 보관됨
}

/// 🔔 알림 데이터 모델 (임시)
class NotificationData {
  final String id;
  final String title;
  final String message;
  final NotificationType type;
  final NotificationStatus status;
  final DateTime createdAt;
  final Map<String, dynamic>? extra;

  const NotificationData({
    required this.id,
    required this.title,
    required this.message,
    required this.type,
    this.status = NotificationStatus.unread,
    required this.createdAt,
    this.extra,
  });

  NotificationData copyWith({
    NotificationStatus? status,
    Map<String, dynamic>? extra,
  }) {
    return NotificationData(
      id: id,
      title: title,
      message: message,
      type: type,
      status: status ?? this.status,
      createdAt: createdAt,
      extra: extra ?? this.extra,
    );
  }
}

/// 🔔 알림 목록 Provider
final notificationListProvider = StateProvider<List<NotificationData>>((ref) => []);

/// 🔔 읽지 않은 알림 개수
final unreadNotificationCountProvider = Provider<int>((ref) {
  final notifications = ref.watch(notificationListProvider);
  return notifications.where((n) => n.status == NotificationStatus.unread).length;
});

/// 🔔 알림 필터 Provider
final notificationFilterProvider = StateProvider<NotificationType?>((ref) => null);

/// 🔔 필터된 알림 목록
final filteredNotificationProvider = Provider<List<NotificationData>>((ref) {
  final notifications = ref.watch(notificationListProvider);
  final filter = ref.watch(notificationFilterProvider);
  
  if (filter == null) return notifications;
  return notifications.where((n) => n.type == filter).toList();
});

/// 🔔 알림 관리 서비스
final notificationServiceProvider = Provider((ref) => NotificationService(ref));

/// 알림 서비스 클래스
class NotificationService {
  final Ref ref;
  StreamSubscription<RemoteMessage>? _onMessageSub;
  StreamSubscription<RemoteMessage>? _onMessageOpenedSub;
  
  NotificationService(this.ref);

  /// 🆕 Firebase 리스너 설정 (AppRouter에서 이동됨)
  void setupFirebaseListeners(GlobalKey<NavigatorState> navigatorKey) {
    final messenger = ref.read(scaffoldMessengerKeyProvider).currentState;
    
    // 앱이 실행 중일 때 알림 수신
    _onMessageSub = FirebaseMessaging.onMessage.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        // 알림 Provider에 저장
        addNotification(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
        
        // SnackBar로도 표시
        if (messenger != null) {
          messenger
            ..hideCurrentSnackBar()
            ..showSnackBar(SnackBar(content: Text('${n.title}: ${n.body}')));
        }
      }
    });
    
    // 앱이 종료된 상태에서 알림 클릭해서 앱 시작
    FirebaseMessaging.instance.getInitialMessage().then((msg) {
      if (msg != null) {
        final n = msg.notification;
        if (n != null) {
          addNotification(
            title: n.title ?? '알림',
            message: n.body ?? '',
            type: _getNotificationType(msg.data),
            extra: msg.data,
          );
        }
        
        // TODO: 나중에 특정 알림 모달 자동 열기 기능 추가 가능
        // NotificationModal.show(navigatorKey.currentContext!);
      }
    });
    
    // 앱이 백그라운드에 있을 때 알림 클릭
    _onMessageOpenedSub = FirebaseMessaging.onMessageOpenedApp.listen((msg) {
      final n = msg.notification;
      if (n != null) {
        addNotification(
          title: n.title ?? '알림',
          message: n.body ?? '',
          type: _getNotificationType(msg.data),
          extra: msg.data,
        );
        
        // TODO: 나중에 특정 알림 모달 자동 열기 기능 추가 가능
        // NotificationModal.show(navigatorKey.currentContext!);
      }
    });
    
    log.i('🔔 Firebase 알림 리스너 설정 완료');
  }

  /// Firebase 메시지 데이터로부터 알림 타입 추론
  NotificationType _getNotificationType(Map<String, dynamic>? data) {
    if (data == null) return NotificationType.system;
    
    final type = data['type']?.toString().toLowerCase();
    switch (type) {
      case 'trade':
      case 'execution':
        return NotificationType.trade;
      case 'price':
      case 'price_alert':
        return NotificationType.priceAlert;
      case 'volume':
        return NotificationType.volume;
      case 'surge':
      case 'pump':
      case 'dump':
        return NotificationType.surge;
      default:
        return NotificationType.system;
    }
  }
  
  /// Firebase 리스너 정리
  void dispose() {
    _onMessageSub?.cancel();
    _onMessageOpenedSub?.cancel();
    log.i('🧹 Firebase 알림 리스너 정리됨');
  }
  
  /// 알림 추가
  void addNotification({
    required String title,
    required String message,
    required NotificationType type,
    Map<String, dynamic>? extra,
  }) {
    final notification = NotificationData(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: title,
      message: message,
      type: type,
      createdAt: DateTime.now(),
      extra: extra,
    );
    
    final currentList = ref.read(notificationListProvider);
    ref.read(notificationListProvider.notifier).state = [
      notification,
      ...currentList,
    ];
    
    log.i('🔔 알림 추가: $title');
  }
  
  /// 알림 읽음 처리
  void markAsRead(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) {
      if (notification.id == notificationId) {
        return notification.copyWith(status: NotificationStatus.read);
      }
      return notification;
    }).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 알림 읽음: $notificationId');
  }
  
  /// 알림 제거
  void removeNotification(String notificationId) {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.where((n) => n.id != notificationId).toList();
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('🗑️ 알림 제거: $notificationId');
  }
  
  /// 모든 알림 읽음 처리
  void markAllAsRead() {
    final currentList = ref.read(notificationListProvider);
    final updatedList = currentList.map((notification) => 
      notification.copyWith(status: NotificationStatus.read)
    ).toList();
    
    ref.read(notificationListProvider.notifier).state = updatedList;
    log.i('👁️ 모든 알림 읽음 처리');
  }
  
  /// 모든 알림 제거
  void clearAllNotifications() {
    ref.read(notificationListProvider.notifier).state = [];
    log.i('🧹 모든 알림 제거');
  }
  
  /// 필터 설정
  void setFilter(NotificationType? type) {
    ref.read(notificationFilterProvider.notifier).state = type;
    log.i('🔍 알림 필터: ${type?.name ?? "전체"}');
  }
  
  /// 읽지 않은 알림 개수
  int getUnreadCount() {
    return ref.read(unreadNotificationCountProvider);
  }
}\n\n// ====== lib/core/di/volume_provider.dart ======\n
// lib/core/di/volume_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider;
import 'trade_provider.dart' show marketsProvider; // 🎯 마켓 리스트 재사용
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/volume_repository_impl.dart';
import '../../domain/repositories/volume_repository.dart';
import '../../domain/usecases/volume_usecase.dart'; // 🆕 UseCase import
import '../../domain/entities/volume.dart'; // 🆕 Volume 엔티티 import 추가!


// ═══════════════════════════════════════════════════════════════════════════════
// 🆕 VOLUME 전용 Provider들 (브로드캐스트 스트림 기반)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🎯 볼륨 전용 RemoteDataSource (TradeRemoteDataSource와 동일한 인스턴스)
final volumeRemoteDSProvider = Provider<TradeRemoteDataSource>((ref) {
 return TradeRemoteDataSource(
   ref.read(wsClientProvider),
   ref.read(signalBusProvider),
   useTestData: AppConfig.useTestDataInDev,
 );
});

/// 🆕 VolumeRepository
final volumeRepositoryProvider = Provider<VolumeRepository>((ref) {
 return VolumeRepositoryImpl(
   ref.read(volumeRemoteDSProvider),
 );
});

/// 🆕 VolumeUsecase
final volumeUsecaseProvider = Provider<VolumeUsecase>((ref) {
 return VolumeUsecase(
   ref.read(volumeRepositoryProvider),
 );
});

/// 🆕 볼륨 시간대 상태 (기본값: 1분)
final volumeTimeFrameIndexProvider = StateProvider<int>((_) => 0); // 1분이 기본 (0:1m, 1:5m, 2:15m)

final volumeTimeFrameProvider = StateProvider<String>((ref) {
 final index = ref.watch(volumeTimeFrameIndexProvider);
 final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
 if (index >= 0 && index < timeFrames.length) {
   return timeFrames[index];
 }
 return '1m'; // fallback (기본값 1분)
});

/// 🚀 볼륨 데이터 스트림 (100ms 배치 업데이트)
final volumeDataProvider = StreamProvider.autoDispose<List<Volume>>((ref) async* {
 // Prevent immediate dispose on loss of listeners
 ref.keepAlive();

 try {
   // 현재 시간대와 markets를 읽어서 스트림 구독
   final timeFrame = ref.watch(volumeTimeFrameProvider);
   final markets = await ref.watch(marketsProvider.future);
   final usecase = ref.read(volumeUsecaseProvider); // 🆕 UseCase 사용

   if (AppConfig.enableTradeLog) {
     log.i('Volume stream started: $timeFrame, ${markets.length} markets');
   }

   // 🚀 배치 처리된 볼륨 데이터 스트림 방출 (UseCase를 통해)
   yield* usecase.getVolumeRanking(timeFrame, markets).map((result) {
     return result.when(
       ok: (volumes) => volumes,
       err: (error) {
         log.e('Volume UseCase error: ${error.message}');
         return <Volume>[]; // 에러 시 빈 리스트
       },
     );
   });
   
 } catch (e, stackTrace) {
   log.e('Volume stream error: $e', e, stackTrace);
   
   // 에러 시 빈 리스트 방출
   yield <Volume>[];
 }
});

/// 🆕 볼륨 시간대 컨트롤러
final volumeTimeFrameController = Provider((ref) => VolumeTimeFrameController(ref));

class VolumeTimeFrameController {
 final Ref ref;
 VolumeTimeFrameController(this.ref);

 void updateTimeFrame(String timeFrame, int index) {
   final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
   if (index < 0 || index >= timeFrames.length) {
     if (AppConfig.enableTradeLog) log.w('Invalid timeFrame index: $index');
     return;
   }
   
   ref.read(volumeTimeFrameProvider.notifier).state = timeFrame;
   ref.read(volumeTimeFrameIndexProvider.notifier).state = index;
   
   if (AppConfig.enableTradeLog) {
     log.i('Volume TimeFrame updated: $timeFrame (index: $index)');
   }
 }

 /// 수동 리셋 메서드들 (UseCase를 통해)
 void resetCurrentTimeFrame() {
   final usecase = ref.read(volumeUsecaseProvider);
   final timeFrame = ref.read(volumeTimeFrameProvider);
   
   final result = usecase.resetTimeFrame(timeFrame);
   result.when(
     ok: (_) {
       if (AppConfig.enableTradeLog) {
         log.i('Volume reset: $timeFrame');
       }
     },
     err: (error) {
       log.e('Volume reset failed: ${error.message}');
     },
   );
 }

 void resetAllTimeFrames() {
   final usecase = ref.read(volumeUsecaseProvider);
   
   final result = usecase.resetAllTimeFrames();
   result.when(
     ok: (_) {
       if (AppConfig.enableTradeLog) {
         log.i('Volume reset: all timeframes');
       }
     },
     err: (error) {
       log.e('Volume reset all failed: ${error.message}');
     },
   );
 }

 /// 다음 리셋 시간 조회 (UseCase를 통해)
 DateTime? getNextResetTime() {
   final usecase = ref.read(volumeUsecaseProvider);
   final timeFrame = ref.read(volumeTimeFrameProvider);
   
   final result = usecase.getNextResetTime(timeFrame);
   return result.when(
     ok: (resetTime) => resetTime,
     err: (error) {
       log.e('Get reset time failed: ${error.message}');
       return null;
     },
   );
 }

 /// Getters
 String get currentTimeFrame => ref.read(volumeTimeFrameProvider);
 int get currentIndex => ref.read(volumeTimeFrameIndexProvider);
 List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
 
 /// 시간대 한국어 이름
 String getTimeFrameName(String timeFrame) {
   final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
   return AppConfig.timeFrameNames[minutes] ?? timeFrame;
 }
}\n\n// ====== lib/core/di/market_mood_provider copy.dart ======\n
\n\n// ====== lib/core/di/surge_provider.dart ======\n
// lib/core/di/surge_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/app_config.dart';
import '../utils/logger.dart';
import 'app_providers.dart' show signalBusProvider;
import 'websocket_provider.dart' show wsClientProvider;
import 'trade_provider.dart' show marketsProvider; // 🎯 마켓 리스트 재사용
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/surge_repository_impl.dart';
import '../../domain/repositories/surge_repository.dart';
import '../../domain/usecases/surge_usecase.dart'; // 🆕 UseCase import
import '../../domain/entities/surge.dart'; // 🆕 Surge 엔티티 import 추가!

// ═══════════════════════════════════════════════════════════════════════════════
// 🚀 SURGE 전용 Provider들 (브로드캐스트 스트림 기반)
// ═══════════════════════════════════════════════════════════════════════════════

/// 🎯 급등/급락 전용 RemoteDataSource (TradeRemoteDataSource와 동일한 인스턴스)
final surgeRemoteDSProvider = Provider<TradeRemoteDataSource>((ref) {
  return TradeRemoteDataSource(
    ref.read(wsClientProvider),
    ref.read(signalBusProvider),
    useTestData: AppConfig.useTestDataInDev,
  );
});

/// 🚀 SurgeRepository
final surgeRepositoryProvider = Provider<SurgeRepository>((ref) {
  return SurgeRepositoryImpl(
    ref.read(surgeRemoteDSProvider),
  );
});

/// 🚀 SurgeUsecase
final surgeUsecaseProvider = Provider<SurgeUsecase>((ref) {
  return SurgeUsecase(
    ref.read(surgeRepositoryProvider),
  );
});

/// 🚀 급등/급락 시간대 상태 (기본값: 1분)
final surgeTimeFrameIndexProvider = StateProvider<int>((_) => 0); // 1분이 기본 (0:1m, 1:5m, 2:15m)

final surgeTimeFrameProvider = StateProvider<String>((ref) {
  final index = ref.watch(surgeTimeFrameIndexProvider);
  final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  if (index >= 0 && index < timeFrames.length) {
    return timeFrames[index];
  }
  return '1m'; // fallback (기본값 1분)
});

/// 🚀 급등/급락 데이터 스트림 (실시간 즉시 업데이트)
final surgeDataProvider = StreamProvider.autoDispose<List<Surge>>((ref) async* {
  // Prevent immediate dispose on loss of listeners
  ref.keepAlive();

  try {
    // 현재 시간대와 markets를 읽어서 스트림 구독
    final timeFrame = ref.watch(surgeTimeFrameProvider);
    final markets = await ref.watch(marketsProvider.future);
    final usecase = ref.read(surgeUsecaseProvider); // 🚀 UseCase 사용

    if (AppConfig.enableTradeLog) {
      log.i('Surge stream started: $timeFrame, ${markets.length} markets');
    }

    // 🚀 실시간 급등/급락 데이터 스트림 방출 (UseCase를 통해)
    yield* usecase.getSurgeRanking(timeFrame, markets).map((result) {
      return result.when(
        ok: (surges) => surges,
        err: (error) {
          log.e('Surge UseCase error: ${error.message}');
          return <Surge>[]; // 에러 시 빈 리스트
        },
      );
    });
    
  } catch (e, stackTrace) {
    log.e('Surge stream error: $e', e, stackTrace);
    
    // 에러 시 빈 리스트 방출
    yield <Surge>[];
  }
});

/// 🚀 급등/급락 시간대 컨트롤러
final surgeTimeFrameController = Provider((ref) => SurgeTimeFrameController(ref));

class SurgeTimeFrameController {
  final Ref ref;
  SurgeTimeFrameController(this.ref);

  void updateTimeFrame(String timeFrame, int index) {
    final timeFrames = AppConfig.timeFrames.map((tf) => '${tf}m').toList();
    if (index < 0 || index >= timeFrames.length) {
      if (AppConfig.enableTradeLog) log.w('Invalid timeFrame index: $index');
      return;
    }
    
    ref.read(surgeTimeFrameProvider.notifier).state = timeFrame;
    ref.read(surgeTimeFrameIndexProvider.notifier).state = index;
    
    if (AppConfig.enableTradeLog) {
      log.i('Surge TimeFrame updated: $timeFrame (index: $index)');
    }
  }

  /// 수동 리셋 메서드들 (UseCase를 통해)
  void resetCurrentTimeFrame() {
    final usecase = ref.read(surgeUsecaseProvider);
    final timeFrame = ref.read(surgeTimeFrameProvider);
    
    final result = usecase.resetTimeFrame(timeFrame);
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Surge reset: $timeFrame');
        }
      },
      err: (error) {
        log.e('Surge reset failed: ${error.message}');
      },
    );
  }

  void resetAllTimeFrames() {
    final usecase = ref.read(surgeUsecaseProvider);
    
    final result = usecase.resetAllTimeFrames();
    result.when(
      ok: (_) {
        if (AppConfig.enableTradeLog) {
          log.i('Surge reset: all timeframes');
        }
      },
      err: (error) {
        log.e('Surge reset all failed: ${error.message}');
      },
    );
  }

  /// 다음 리셋 시간 조회 (UseCase를 통해)
  DateTime? getNextResetTime() {
    final usecase = ref.read(surgeUsecaseProvider);
    final timeFrame = ref.read(surgeTimeFrameProvider);
    
    final result = usecase.getNextResetTime(timeFrame);
    return result.when(
      ok: (resetTime) => resetTime,
      err: (error) {
        log.e('Get reset time failed: ${error.message}');
        return null;
      },
    );
  }

  /// Getters
  String get currentTimeFrame => ref.read(surgeTimeFrameProvider);
  int get currentIndex => ref.read(surgeTimeFrameIndexProvider);
  List<String> get availableTimeFrames => AppConfig.timeFrames.map((tf) => '${tf}m').toList();
  
  /// 시간대 한국어 이름
  String getTimeFrameName(String timeFrame) {
    final minutes = int.tryParse(timeFrame.replaceAll('m', ''));
    return AppConfig.timeFrameNames[minutes] ?? timeFrame;
  }
}\n\n// ====== lib/core/di/market_mood_provider.dart ======\n
// lib/core/di/market_mood_provider.dart
// 🚀 Performance Optimized Provider - 메모이제이션, 배치처리, 선택적 무효화, 주기적 갱신 적용

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:rxdart/rxdart.dart'; // 🚀 debounceTime, distinctUntilChanged
import 'dart:async';

import '../network/api_client_coingecko.dart';
import '../utils/logger.dart';
import 'trade_provider.dart' show hiveServiceProvider;
import '../../data/datasources/market_mood_remote_ds.dart';
import '../../data/datasources/market_mood_local_ds.dart';
import '../../data/repositories/market_mood_repository_impl.dart';
import '../../domain/entities/market_mood.dart';
import '../../domain/usecases/market_mood_usecase.dart';

/// 🌐 CoinGecko API 클라이언트 Provider
final coinGeckoApiClientProvider = Provider<CoinGeckoApiClient>((ref) {
  return CoinGeckoApiClient();
});

/// 🔥 Remote DataSource Provider
final marketMoodRemoteDSProvider = Provider<MarketMoodRemoteDataSource>((ref) {
  final client = ref.read(coinGeckoApiClientProvider);
  return MarketMoodRemoteDataSource(client);
});

/// 🔥 Local DataSource Provider
final marketMoodLocalDSProvider = Provider<MarketMoodLocalDataSource>((ref) {
  final hive = ref.watch(hiveServiceProvider);
  return MarketMoodLocalDataSource(hive);
});

/// 🔥 Repository Provider
final marketMoodRepositoryProvider = Provider<MarketMoodRepositoryImpl>((ref) {
  final remoteDS = ref.read(marketMoodRemoteDSProvider);
  final localDS = ref.read(marketMoodLocalDSProvider);
  return MarketMoodRepositoryImpl(remoteDS, localDS);
});

/// 🔥 UseCase Provider
final marketMoodUsecaseProvider = Provider<MarketMoodUsecase>((ref) {
  final repository = ref.read(marketMoodRepositoryProvider);
  return MarketMoodUsecase(repository);
});

/// 🚀 메모이제이션된 환율 Provider - 캐시 유지 (TTL 필요 시 autoDispose로 변경)
final exchangeRateProvider = FutureProvider.autoDispose<double>((ref) async {
  final usecase = ref.read(marketMoodUsecaseProvider);
  try {
    final rate = await usecase.getExchangeRate();
    log.d('환율 조회 성공: $rate (캐시됨)');
    return rate;
  } catch (e, st) {
    log.w('환율 조회 실패, 기본값 1400 사용: $e', e, st);
    return 1400.0;
  }
});

/// 🚀 최적화된 마켓 데이터 스트림 - distinct + debounceTime 적용
final marketMoodProvider = StreamProvider<MarketMoodData>((ref) {
  final repository = ref.read(marketMoodRepositoryProvider);

  ref.onDispose(repository.dispose);

  return repository
      .getMarketDataStream()
      .distinct((prev, next) => prev.totalVolumeUsd == next.totalVolumeUsd)
      .debounceTime(const Duration(milliseconds: 100));
});

/// 🚀 통합 계산 Provider - 주기적 갱신 및 포그라운드 복귀 시 자동 invalidate 적용
final marketMoodComputedDataProvider = FutureProvider.autoDispose<MarketMoodComputedData>((ref) async {
  // 1) autoDispose 비활성화 링크 (keepAlive)
  final link = ref.keepAlive();

  // 2) 15분마다 재계산
  final timer = Timer.periodic(const Duration(minutes: 15), (_) {
    ref.invalidateSelf();
  });

  // 3) 앱 복귀 시 재계산
  ref.onResume(() {
    ref.invalidateSelf();
  });

  // 4) 종료 시 정리
  ref.onDispose(() {
    timer.cancel();
    link.close();
  });

  // 기존 로직
  final moodAsync = ref.watch(marketMoodProvider);
  final exchangeAsync = ref.watch(exchangeRateProvider);
  final usecase = ref.read(marketMoodUsecaseProvider);

  return moodAsync.when(
    data: (marketData) async {
      final exchangeRate = exchangeAsync.asData?.value ?? 1400.0;
      try {
        final results = await Future.wait(
          [
            usecase.calculateCurrentMood(marketData.totalVolumeUsd),
            usecase.calculateVolumeComparison(marketData.totalVolumeUsd),
          ],
          eagerError: false,
        );
        final currentMood = results[0] as MarketMood;
        final volumeComparison = results[1] as ComparisonData;
        final moodSummary = usecase.generateMoodSummary(currentMood);

        return MarketMoodComputedData(
          marketData: marketData,
          currentMood: currentMood,
          volumeComparison: volumeComparison,
          moodSummary: moodSummary,
          exchangeRate: exchangeRate,
          computedAt: DateTime.now(),
        );
      } catch (e, st) {
        // [수정됨] 이름 있는 파라미터(named parameter) 대신 위치 기반 파라미터(positional parameter) 사용
        log.e('배치 계산 오류: $e', e, st);
        return MarketMoodComputedData.error();
      }
    },
    loading: () async => MarketMoodComputedData.loading(),
    error: (error, stack) async {
      // [수정됨] 이름 있는 파라미터(named parameter) 대신 위치 기반 파라미터(positional parameter) 사용
      log.e('마켓무드 계산 오류: $error', error, stack);
      return MarketMoodComputedData.error();
    },
  );
});

/// 🎯 개별 데이터 접근 Provider들 - 메모이제이션된 결과에서 추출
final currentMarketMoodProvider = Provider<MarketMood>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.currentMood,
    loading: () => MarketMood.sideways,
    error: (_, __) => MarketMood.sideways,
  );
});

final volumeComparisonProvider = Provider<ComparisonData>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.volumeComparison,
    loading: () => ComparisonData.loading(),
    error: (_, __) => ComparisonData.error(),
  );
});

final marketMoodSummaryProvider = Provider<String>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  return computedAsync.when(
    data: (computed) => computed.moodSummary,
    loading: () => '로딩중...',
    error: (_, __) => '오류 발생',
  );
});

/// 🌐 최적화된 시스템 상태 Provider
final marketMoodSystemProvider = Provider<MarketMoodSystemState>((ref) {
  final computedAsync = ref.watch(marketMoodComputedDataProvider);
  final usecase = ref.read(marketMoodUsecaseProvider);

  return computedAsync.when(
    data: (computed) => usecase.createSystemState(
      marketData: computed.marketData,
      comparisonData: computed.volumeComparison,
      currentMood: computed.currentMood,
      exchangeRate: computed.exchangeRate,
      isLoading: false,
      hasError: false,
    ),
    loading: () => usecase.createSystemState(
      marketData: null,
      comparisonData: ComparisonData.loading(),
      currentMood: MarketMood.sideways,
      exchangeRate: 1400.0,
      isLoading: true,
      hasError: false,
    ),
    error: (_, __) => usecase.createSystemState(
      marketData: null,
      comparisonData: ComparisonData.error(),
      currentMood: MarketMood.sideways,
      exchangeRate: 1400.0,
      isLoading: false,
      hasError: true,
    ),
  );
});

/// 🎮 최적화된 마켓 무드 컨트롤러
final marketMoodControllerProvider = Provider((ref) => OptimizedMarketMoodController(ref));

class OptimizedMarketMoodController {
  final Ref ref;
  DateTime? _lastRefresh;
  static const _refreshCooldown = Duration(seconds: 30);

  OptimizedMarketMoodController(this.ref);

  /// 🚀 스마트 새로고침 - 쿨다운 적용
  void refresh() {
    final now = DateTime.now();
    if (_lastRefresh != null && now.difference(_lastRefresh!) < _refreshCooldown) {
      // [수정됨] + 연산자 대신 인접 문자열 연결 사용
      log.d('새로고침 쿨다운 중... '
          '${_refreshCooldown.inSeconds - now.difference(_lastRefresh!).inSeconds}초 후 가능');
      return;
    }

    _lastRefresh = now;
    ref.invalidate(marketMoodProvider);
    ref.invalidate(exchangeRateProvider);
    log.d('마켓무드 데이터 새로고침 완료');
  }

  /// 🚀 캐시된 현재 무드 조회
  MarketMood getCurrentMood() => ref.read(currentMarketMoodProvider);

  /// 🚀 캐시된 비교 데이터 조회
  ComparisonData getComparisonData() => ref.read(volumeComparisonProvider);

  /// 🚀 환율만 선택적 새로고침
  Future<void> refreshExchangeRate() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    await usecase.refreshExchangeRate();
    ref.invalidate(exchangeRateProvider);
    log.d('환율 새로고침 완료');
  }

  /// 🚀 시스템 헬스 체크 (캐시 활용)
  Future<Map<String, dynamic>> getSystemHealth() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    final state = ref.read(marketMoodSystemProvider);
    return {
      ...await usecase.getSystemHealth(),
      'cached_state': {
        'is_loading': state.isLoading,
        'has_error': state.hasError,
        'last_update': state.marketData?.updatedAt.toIso8601String(),
      }
    };
  }

  /// 🚀 성능 통계 로깅
  Future<void> logSystemStatus() async {
    final usecase = ref.read(marketMoodUsecaseProvider);
    final computedAsync = ref.read(marketMoodComputedDataProvider);
    await usecase.logSystemStatus();
    computedAsync.whenData((computed) {
      log.i('성능 통계 - 계산 시간: ${DateTime.now().difference(computed.computedAt).inMilliseconds}ms');
    });
  }

  /// 🚀 메모리 정리 (필요 시 호출)
  void clearCache() {
    ref.invalidate(marketMoodComputedDataProvider);
    ref.invalidate(exchangeRateProvider);
    ref.invalidate(marketMoodProvider);
    log.d('캐시 정리 완료');
  }
}

/// 🚀 통합 계산 결과 데이터 클래스
class MarketMoodComputedData {
  final MarketMoodData? marketData;
  final MarketMood currentMood;
  final ComparisonData volumeComparison;
  final String moodSummary;
  final double exchangeRate;
  final DateTime computedAt;

  const MarketMoodComputedData({
    this.marketData,
    required this.currentMood,
    required this.volumeComparison,
    required this.moodSummary,
    required this.exchangeRate,
    required this.computedAt,
  });

  factory MarketMoodComputedData.loading() => MarketMoodComputedData(
        currentMood: MarketMood.sideways,
        volumeComparison: ComparisonData.loading(),
        moodSummary: '로딩중...',
        exchangeRate: 1400.0,
        computedAt: DateTime.now(),
      );

  factory MarketMoodComputedData.error() => MarketMoodComputedData(
        currentMood: MarketMood.sideways,
        volumeComparison: ComparisonData.error(),
        moodSummary: '오류 발생',
        exchangeRate: 1400.0,
        computedAt: DateTime.now(),
      );

  /// 🚀 데이터 신선도 체크 (15분 이상 오래되면 갱신 필요)
  bool get isStale => DateTime.now().difference(computedAt) > const Duration(minutes: 15);

  /// 🚀 성능 메트릭
  Duration get age => DateTime.now().difference(computedAt);
}\n\n// ====== lib/core/di/settings_provider.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // SystemChrome용
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import '../../data/datasources/settings_local_ds.dart';
import '../../data/repositories/settings_repository_impl.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/repositories/settings_repository.dart';
import '../../domain/usecases/settings_usecase.dart';
import '../utils/logger.dart';

/// 1) SharedPreferences 인스턴스 (main.dart에서 override)
final sharedPreferencesProvider = Provider<SharedPreferences>((ref) {
  throw UnimplementedError(
    'main.dart에서 SharedPreferences.getInstance() 후 overrides로 주입하세요.'
  );
});

/// 2) Local DataSource
final settingsLocalDSProvider = Provider<SettingsLocalDataSource>((ref) {
  final prefs = ref.watch(sharedPreferencesProvider);
  return SettingsLocalDataSource(prefs);
});

/// 3) Repository
final settingsRepositoryProvider = Provider<SettingsRepository>((ref) {
  final ds = ref.watch(settingsLocalDSProvider);
  return SettingsRepositoryImpl(ds);
});

/// 4) UseCase
final settingsUsecaseProvider = Provider<SettingsUsecase>((ref) {
  final repo = ref.watch(settingsRepositoryProvider);
  return SettingsUsecase(repo);
});

/// 5) 통합 설정 Provider
final appSettingsProvider = StateNotifierProvider<AppSettingsNotifier, AppSettings>((ref) {
  final usecase = ref.watch(settingsUsecaseProvider);
  return AppSettingsNotifier(usecase);
});

/// 통합 설정 관리 클래스
class AppSettingsNotifier extends StateNotifier<AppSettings> {
  final SettingsUsecase _usecase;

  AppSettingsNotifier(this._usecase) : super(const AppSettings()) {
    _loadSettings();
  }

  /// 초기 설정 로드
  Future<void> _loadSettings() async {
    try {
      final settings = await _usecase.getSettings();
      state = settings;
      _applyKeepScreen(settings.keepScreenOn);
      _applyOrientationLock(settings.isPortraitLocked);
      log.i('⚙️ 설정 로드 완료: ${settings.toString()}');
    } catch (e, st) {
      log.e('설정 로드 실패', e, st);
    }
  }

  /// 테마 모드 변경
  Future<void> setThemeMode(ThemeMode mode) async {
    try {
      await _usecase.updateThemeMode(mode);
      state = state.copyWith(themeMode: mode);
      log.i('🎨 테마 모드 변경: ${mode.name}');
    } catch (e, st) {
      log.e('테마 모드 변경 실패', e, st);
    }
  }

  /// 화면 항상 켜기 설정
  Future<void> setKeepScreenOn(bool keep) async {
    try {
      await _usecase.updateKeepScreenOn(keep);
      state = state.copyWith(keepScreenOn: keep);
      _applyKeepScreen(keep);
      log.i('📱 화면 항상 켜기: $keep');
    } catch (e, st) {
      log.e('화면 켜기 설정 실패', e, st);
    }
  }

  /// 슬라이더 위치 변경
  Future<void> setSliderPosition(SliderPosition position) async {
    try {
      await _usecase.updateSliderPosition(position);
      state = state.copyWith(sliderPosition: position);
      log.i('🎚️ 슬라이더 위치: ${position.name}');
    } catch (e, st) {
      log.e('슬라이더 위치 변경 실패', e, st);
    }
  }

  /// 코인명 표시 방식 변경
  Future<void> setDisplayMode(DisplayMode mode) async {
    try {
      await _usecase.updateDisplayMode(mode);
      state = state.copyWith(displayMode: mode);
      log.i('💰 코인명 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('코인명 표시 방식 변경 실패', e, st);
    }
  }

  /// 금액 표시 방식 변경
  Future<void> setAmountDisplayMode(AmountDisplayMode mode) async {
    try {
      await _usecase.updateAmountDisplayMode(mode);
      state = state.copyWith(amountDisplayMode: mode);
      log.i('💵 금액 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('금액 표시 방식 변경 실패', e, st);
    }
  }

  /// 반짝임 효과 설정
  Future<void> setBlinkEnabled(bool enabled) async {
    try {
      await _usecase.updateBlinkEnabled(enabled);
      state = state.copyWith(blinkEnabled: enabled);
      log.i('✨ 반짝임 효과: $enabled');
    } catch (e, st) {
      log.e('반짝임 효과 변경 실패', e, st);
    }
  }

  /// 폰트 패밀리 변경
  Future<void> setFontFamily(FontFamily font) async {
    try {
      await _usecase.updateFontFamily(font);
      state = state.copyWith(fontFamily: font);
      log.i('🔤 폰트 설정: ${font.fontName}');
    } catch (e, st) {
      log.e('폰트 설정 실패', e, st);
    }
  }

  /// 햅틱 피드백 설정
  Future<void> setHapticEnabled(bool enabled) async {
    try {
      await _usecase.updateHapticEnabled(enabled);
      state = state.copyWith(isHapticEnabled: enabled);
      log.i('📳 햅틱 피드백: $enabled');
    } catch (e, st) {
      log.e('햅틱 피드백 설정 실패', e, st);
    }
  }

  /// 화면 회전 잠금 설정
  Future<void> setPortraitLocked(bool locked) async {
    try {
      await _usecase.updatePortraitLocked(locked);
      state = state.copyWith(isPortraitLocked: locked);
      _applyOrientationLock(locked);
      log.i('🔒 화면 회전 잠금: $locked');
    } catch (e, st) {
      log.e('화면 회전 잠금 설정 실패', e, st);
    }
  }

  /// 캐시 비우기
  Future<void> clearCache() async {
    try {
      await _usecase.clearCache();
      log.i('🗂️ 캐시 비우기 완료');
      await refresh();
    } catch (e, st) {
      log.e('캐시 비우기 실패', e, st);
    }
  }

  /// 모든 설정 초기화
  Future<void> resetAllSettings() async {
    try {
      await _usecase.resetSettings();
      state = const AppSettings();
      _applyKeepScreen(false);
      _applyOrientationLock(false);
      log.i('🔄 모든 설정 초기화 완료');
    } catch (e, st) {
      log.e('설정 초기화 실패', e, st);
    }
  }

  /// 화면 켜기 실제 적용
  void _applyKeepScreen(bool keep) {
    if (keep) {
      WakelockPlus.enable();
    } else {
      WakelockPlus.disable();
    }
  }

  /// 화면 회전 잠금 실제 적용
  void _applyOrientationLock(bool locked) {
    if (locked) {
      // 세로 모드만 허용
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
    } else {
      // 모든 방향 허용
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeRight,
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
    }
  }

  /// 설정 새로고침
  Future<void> refresh() async {
    await _loadSettings();
  }
}\n\n// ====== lib/core/di/momentary_provider.dart ======\n
\n\n// ====== lib/core/config/app_config.dart ======\n
// lib/core/config/app_config.dart

import 'dart:collection';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:logger/logger.dart';
import '../utils/logger.dart';

/// Application-wide configuration and constants,
/// optimized per Upbit REST & WebSocket specifications.
class AppConfig {
  AppConfig._();

  /// Call once at startup to initialize dynamic config (env variables)
  static Future<void> init({String? envPath}) async {
    // Load .env (optional custom path) + validate
    try {
      if (envPath != null && envPath.isNotEmpty) {
        await dotenv.load(fileName: envPath);
      } else {
        await dotenv.load();
      }
      log.i('[AppConfig] .env loaded');
      _loadEnv();
    } catch (e, st) {
      log.e('[AppConfig] ⚠️ Failed to load required env vars', e, st);
      throw Exception('[AppConfig] ⚠️ Failed to load required env vars: $e');
    }

    log.i('[AppConfig] initialized (debug=$isDebugMode)');
  }

  static void _loadEnv() {
    const requiredKeys = ['UPBIT_API_KEY', 'UPBIT_API_SECRET'];
    for (final key in requiredKeys) {
      final value = dotenv.env[key];
      if (value == null || value.isEmpty) {
        throw Exception('[AppConfig] Missing required env var: $key');
      }
    }

    _upbitRestBase = dotenv.env['UPBIT_REST_URL']?.isNotEmpty == true
        ? dotenv.env['UPBIT_REST_URL']!
        : _upbitRestBase;
    _upbitWsUrl = dotenv.env['UPBIT_WS_URL']?.isNotEmpty == true
        ? dotenv.env['UPBIT_WS_URL']!
        : _upbitWsUrl;

    _apiKey = dotenv.env['UPBIT_API_KEY']!;
    _apiSecret = dotenv.env['UPBIT_API_SECRET']!;
  }

  // ──────────────── 🆕 통일된 Bool 해석 유틸리티 ────────────────
  /// 환경변수에서 boolean 값을 안전하고 일관되게 파싱
  /// 지원하는 true 값: 'true', '1', 'yes', 'on'
  /// 지원하는 false 값: 'false', '0', 'no', 'off', null, 빈 문자열
  static bool _getBool(String key, {bool fallback = false}) {
    final value = dotenv.env[key]?.toLowerCase().trim();
    if (value == null || value.isEmpty) return fallback;
    
    // true 값들
    if (value == 'true' || value == '1' || value == 'yes' || value == 'on') {
      return true;
    }
    
    // false 값들
    if (value == 'false' || value == '0' || value == 'no' || value == 'off') {
      return false;
    }
    
    // 알 수 없는 값이면 fallback 사용
    return fallback;
  }

  // ─────────────────── API Credentials ───────────────────
  static String _apiKey = '';
  static String _apiSecret = '';
  static String get apiKey => _apiKey;
  static String get apiSecret => _apiSecret;

  // ──────────────── Environment Flags ────────────────
  /// `true` when not in Dart VM product mode.
  static const bool isDebugMode = !bool.fromEnvironment('dart.vm.product');

  // ──────────────── Logging Configuration ────────────────
  /// 로그 레벨 설정 (개발 중 조절 가능)
  static Level get logLevel {
    if (!isDebugMode) return Level.warning;
    final envLevel = dotenv.env['LOG_LEVEL']?.toLowerCase();
    switch (envLevel) {
      case 'verbose':
        return Level.verbose;
      case 'debug':
        return Level.debug;
      case 'info':
        return Level.info;
      case 'warning':
        return Level.warning;
      case 'error':
        return Level.error;
      default:
        return Level.debug;
    }
  }

  /// 🔧 특정 모듈 로그 on/off (통일된 방식 적용)
  static bool get enableSignalBusLog =>
      _getBool('ENABLE_SIGNAL_BUS_LOG', fallback: true);
  static bool get enableWebSocketLog =>
      _getBool('ENABLE_WEBSOCKET_LOG', fallback: true);
  static bool get enableTradeLog =>
      _getBool('ENABLE_TRADE_LOG', fallback: true);
  static bool get enableAdaptiveBackoffLog =>
      _getBool('ENABLE_ADAPTIVE_BACKOFF_LOG', fallback: true);

  // ──────────────── REST Configuration (업비트 2025 스펙) ────────────────
  static String _upbitRestBase = 'https://api.upbit.com/v1';
  static String get upbitRestBase => _upbitRestBase;
  
  /// 🆕 업비트 백서 2025 기준 레이트리밋 (그룹별)
  /// 공개 API: 초당 30회 / 사적 API: 초당 8회
  static const Map<String, int> rateLimitByGroup = {
    'market': 30,      // 공개 API: /market/all, /ticker 등
    'candles': 30,     // 공개 API: /candles 등  
    'trades': 30,      // 공개 API: /trades 등
    'orderbook': 30,   // 공개 API: /orderbook 등
    'orders': 8,       // 사적 API: 주문 관련
    'accounts': 8,     // 사적 API: 계정 관련
    'withdraws': 8,    // 사적 API: 출금 관련
    'deposits': 8,     // 사적 API: 입금 관련
    'default': 8,      // 기본값: 사적 API 기준
  };
  
  /// 🆕 그룹별 레이트리밋 조회
  static int getRateLimitForGroup(String group) {
    return rateLimitByGroup[group] ?? rateLimitByGroup['default']!;
  }
  
  /// 🆕 경로 기반 그룹 자동 판별
  static String getGroupFromPath(String path) {
    final normalizedPath = path.toLowerCase();
    
    // 공개 API 그룹들
    if (normalizedPath.contains('/market/')) return 'market';
    if (normalizedPath.contains('/ticker')) return 'market';
    if (normalizedPath.contains('/candles/')) return 'candles';
    if (normalizedPath.contains('/trades')) return 'trades';  
    if (normalizedPath.contains('/orderbook')) return 'orderbook';
    
    // 사적 API 그룹들
    if (normalizedPath.contains('/orders')) return 'orders';
    if (normalizedPath.contains('/accounts')) return 'accounts';
    if (normalizedPath.contains('/withdraws')) return 'withdraws';
    if (normalizedPath.contains('/deposits')) return 'deposits';
    
    // 기본값 (사적 API)
    return 'default';
  }
  
  /// 레거시 호환용 (기존 코드 호환성)
  @Deprecated('Use rateLimitByGroup instead')
  static const int restRateLimitCount = 8; // 사적 API 기준으로 보수적 설정
  static const Duration restRateLimitPeriod = Duration(seconds: 1);

  // ──────────────── WebSocket Configuration ────────────────
  static String _upbitWsUrl = 'wss://api.upbit.com/websocket/v1';
  static String get upbitWsUrl => _upbitWsUrl;
  static const int wsMaxSubscriptionCount = 200;

  // Upbit 권장 타이밍으로 변경 (30s Ping / 60s Pong):
  static const Duration wsPingInterval = Duration(seconds: 30);
  static const Duration wsPongTimeout = Duration(seconds: 60);

  static const int wsMaxRetryCount = 5;
  static const Duration wsInitialBackoff = Duration(seconds: 1);
  static const Duration wsMaxBackoff = Duration(seconds: 30);

  // ──────────────── Aggregation ────────────────
  static const int mergeWindowMs = 1000;
  static const Duration globalResetInterval = Duration(seconds: 30);

  // ──────────────── Dev/Test Flags ────────────────
  static bool useTestDataInDev = false;

  // ──────────────── Trade Filters ────────────────
  static final List<double> _filters = [
    2e6, 5e6, 1e7, 2e7, 5e7,
    1e8, 2e8, 3e8, 4e8, 5e8,
    1e9,
  ];
  static UnmodifiableListView<double> get tradeFilters =>
      UnmodifiableListView(_filters);

  /// Human-readable labels always in sync with `_filters`
  static Map<double, String> get filterNames => Map.unmodifiable({
        for (final f in _filters) f: _formatFilterLabel(f),
      });

  /// Update the trade filters at runtime (ensures positive & sorted)
  static void updateFilters(List<double> newFilters) {
    _filters
      ..clear()
      ..addAll(newFilters.where((f) => f > 0))
      ..sort();
    log.i('[AppConfig] filters updated → $_filters');
  }

  static String _formatFilterLabel(double f) {
    if (f >= 1e8 && f % 1e8 == 0) return '${(f / 1e8).toInt()}억';
    if (f >= 1e7 && f % 1e7 == 0) return '${(f / 1e7).toInt()}천만';
    if (f >= 1e6 && f % 1e6 == 0) return '${(f / 1e6).toInt()}백만';
    return f.toStringAsFixed(0);
  }

  // ──────────────── Candle Timeframes ────────────────
  static const List<int> timeFrames = [
    1, 5, 15, 30, 60, 120, 240, 480, 720, 1440
  ];
  static final Map<int, String> timeFrameNames = Map.unmodifiable({
    1: '1분',
    5: '5분',
    15: '15분',
    30: '30분',
    60: '1시간',
    120: '2시간',
    240: '4시간',
    480: '8시간',
    720: '12시간',
    1440: '1일',
  });

  // ──────────────── Surge Detection ────────────────
  static const double surgeThresholdPercent = 1.1;
  static const Duration surgeWindowDuration = Duration(minutes: 1);

  // ──────────────── Signal Detection Configuration ────────────────
  
  /// Signal 패턴 목록 (슬라이더 순서와 동일)
  static const List<String> signalPatterns = [
    'surge', 'flashFire', 'stackUp', 'stealthIn', 'blackHole', 'reboundShot'
  ];

  /// Signal 패턴 표시명
  static const Map<String, String> signalPatternNames = {
    'surge': '급등',
    'flashFire': '불티🔥',
    'stackUp': '스택업💰',
    'stealthIn': '침투자👣',
    'blackHole': '블랙홀🕳️',
    'reboundShot': '쇼트터치⚡',
  };

  /// Signal 패턴 설명
  static const Map<String, String> signalPatternDescriptions = {
    'surge': '1분 전 대비 1.1% 이상 상승',
    'flashFire': '3분 거래대금 급증 감지',
    'stackUp': '연속 매집 패턴 감지',
    'stealthIn': '은밀한 유입 감지',
    'blackHole': '이상 체결 패턴 감지',
    'reboundShot': '반등 타이밍 감지',
  };

  /// 패턴별 기본 임계값
  static const Map<String, double> signalThresholds = {
    'surge': 1.1,           // 1.1% 상승 (기존 surgeThresholdPercent와 동일)
    'flashFire': 2.0,       // 2배 급증
    'stackUp': 3.0,         // 3연속
    'stealthIn': 5000000.0, // 500만원
    'blackHole': 0.1,       // 0.1% 변동
    'reboundShot': 1.5,     // 1.5% 급락 후 반등
  };

  /// 패턴별 시간 윈도우 (분)
  static const Map<String, int> signalTimeWindows = {
    'surge': 1,       // 1분
    'flashFire': 3,   // 3분
    'stackUp': 3,     // 3분 (1분씩 3번)
    'stealthIn': 5,   // 5분
    'blackHole': 3,   // 3분
    'reboundShot': 2, // 2분 (급락 1분 + 반등 1분)
  };

  /// Signal 성능 최적화 상수
  static const int maxSignalsPerPattern = 100;
  static const int signalHistorySize = 200;
  static const int signalCacheSize = 1000;
  static const Duration signalHistoryRetention = Duration(minutes: 10);
  static const Duration signalBatchInterval = Duration(milliseconds: 100); // Trade와 동일

  /// Signal 분석용 최소값들
  static const int minTradeCountForAnalysis = 10;
  static const int avgIntervalThreshold = 30; // 초
  static const double blackHoleMinAmount = 50000000.0; // 5천만원

  /// Signal 패턴 인덱스로 패턴명 조회
  static String getSignalPatternByIndex(int index) {
    if (index < 0 || index >= signalPatterns.length) {
      return signalPatterns.first; // 기본값
    }
    return signalPatterns[index];
  }

  /// Signal 패턴명으로 인덱스 조회
  static int getSignalPatternIndex(String pattern) {
    final index = signalPatterns.indexOf(pattern);
    return index >= 0 ? index : 0; // 없으면 첫 번째 패턴
  }

  /// Signal 패턴별 임계값 조회
  static double getSignalThreshold(String pattern) {
    return signalThresholds[pattern] ?? signalThresholds['surge']!;
  }

  /// Signal 패턴별 시간 윈도우 조회
  static int getSignalTimeWindow(String pattern) {
    return signalTimeWindows[pattern] ?? signalTimeWindows['surge']!;
  }

  /// Signal 패턴 표시명 조회
  static String getSignalPatternName(String pattern) {
    return signalPatternNames[pattern] ?? pattern;
  }

  /// Signal 패턴 설명 조회
  static String getSignalPatternDescription(String pattern) {
    return signalPatternDescriptions[pattern] ?? '';
  }
}\n\n// ====== lib/core/config/trade_config.dart ======\n
\n\n// ====== lib/core/bridge/signal_bus.dart ======\n
import 'dart:async';

import '../utils/logger.dart';           // log.d, log.i, log.w, log.e
import '../event/app_event.dart';        // Json typedef

/// Types of signals carried by the bus.
enum SignalEventType { trade, orderBook, notification }

/// Supported exchange platforms.
enum ExchangePlatform { upbit, binance, bybit, bithumb }

/// Global singleton event bus.
/// Dispatches all AppEvent payloads by type & platform.
///
/// ⚠️ Remember to call `SignalBus().dispose()` on app shutdown or via
/// Riverpod's `ref.onDispose` to clean up streams.
class SignalBus {
  SignalBus._();
  static final SignalBus _instance = SignalBus._();
  factory SignalBus() => _instance;

  final StreamController<Json> _globalController = StreamController<Json>.broadcast();
  final Map<SignalEventType, StreamController<Json>> _typeControllers = {};
  final Map<String, StreamController<Json>> _platformControllers = {};
  final StreamController<String> _errorController = StreamController<String>.broadcast();

  /// All events as raw JSON maps.
  Stream<Json> get events => _globalController.stream;

  /// Events of a specific type.
  Stream<Json> eventsOfType(SignalEventType type) =>
      _typeControllers.putIfAbsent(type, () {
        final ctrl = StreamController<Json>.broadcast();
        log.d('SignalBus: Created type controller for $type');
        return ctrl;
      }).stream;

  /// 🆕 타입 안전한 이벤트 스트림 (제네릭)
  Stream<T> eventsOf<T>(SignalEventType type, T Function(Json) converter) =>
      eventsOfType(type).map(converter);

  /// Events of a specific type and platform, cached for efficiency.
  Stream<Json> eventsOfPlatform(SignalEventType type, ExchangePlatform platform) {
    final key = '${type.name}_${platform.name}';
    return _platformControllers.putIfAbsent(key, () {
      final ctrl = StreamController<Json>.broadcast();
      eventsOfType(type)
          .where((m) => (m['platform'] as String? ?? '') == platform.name)
          .listen(
            ctrl.add,
            onError: ctrl.addError,
            onDone: () {
              ctrl.close();
              _platformControllers.remove(key);
              log.d('SignalBus: Closed platform controller for $key');
            },
          );
      log.d('SignalBus: Created platform controller for $key');
      return ctrl;
    }).stream;
  }

  /// 🆕 타입 안전한 플랫폼별 이벤트 스트림
  Stream<T> eventsOfPlatformTyped<T>(
    SignalEventType type,
    ExchangePlatform platform,
    T Function(Json) converter,
  ) => eventsOfPlatform(type, platform).map(converter);

  /// Errors from bus internals.
  Stream<String> get errors => _errorController.stream;

  // ───────────────────────────────────────────────────────────────────────
  // Emitters for raw payloads
  // ───────────────────────────────────────────────────────────────────────

  void fireTrade(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.trade, data, platform);

  void fireOrderBook(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.orderBook, data, platform);

  void fireNotification(Json data, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.notification, data, platform);

  // ───────────────────────────────────────────────────────────────────────
  // Emitters for AppEvent
  // ───────────────────────────────────────────────────────────────────────

  void fireTradeEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.trade, event.toJson(), platform);

  void fireOrderBookEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.orderBook, event.toJson(), platform);

  void fireNotificationEvent(AppEvent event, {ExchangePlatform platform = ExchangePlatform.upbit}) =>
      _fire(SignalEventType.notification, event.toJson(), platform);

  // ───────────────────────────────────────────────────────────────────────
  // Internal dispatch logic
  // ───────────────────────────────────────────────────────────────────────

  void _fire(SignalEventType type, Json data, ExchangePlatform platform) {
    try {
      final enriched = <String, dynamic>{...data, 'platform': platform.name};

      // Broadcast to global subscribers
      if (!_globalController.isClosed) {
        _globalController.add(enriched);
      } else {
        log.w('SignalBus: Global controller closed, skipping event $type');
      }

      // Type-specific subscribers
      final typeCtrl = _typeControllers[type];
      if (typeCtrl != null && !typeCtrl.isClosed) {
        typeCtrl.add(enriched);
      } else if (typeCtrl != null) {
        log.w('SignalBus: Type controller for $type closed, removing');
        _typeControllers.remove(type);
      }

      // Debug preview (limited to 100 chars)
      final msg = enriched.toString();
      if (msg.length <= 100) {
        log.d('SignalBus: $type @${platform.name} → $msg');
      } else {
        log.d('SignalBus: $type @${platform.name} → ${msg.substring(0, 100)}…');
      }
    } catch (e, st) {
      final errMsg = 'SignalBus error: $e';
      log.e(errMsg, e, st);
      if (!_errorController.isClosed) {
        _errorController.add(errMsg);
      } else {
        log.w('SignalBus: Error controller closed, error not dispatched: $errMsg');
      }
    }
  }

  /// Log current memory status for debugging.
  void logMemoryStatus() {
    log.d('SignalBus Memory Status:');
    log.d('  - Type controllers: ${_typeControllers.length}');
    log.d('  - Platform controllers: ${_platformControllers.length}');
    log.d('  - Global controller active: ${_globalController.hasListener}');
    log.d('  - Error controller active: ${_errorController.hasListener}');
  }

  /// Close all controllers to free resources and log cleanup.
  void dispose() {
    // Close type-specific controllers
    for (final entry in _typeControllers.entries) {
      final ctrl = entry.value;
      if (!ctrl.isClosed) {
        ctrl.close();
        log.d('SignalBus: Closed type controller for ${entry.key}');
      }
    }
    _typeControllers.clear();

    // Close platform-specific controllers
    for (final entry in _platformControllers.entries) {
      final ctrl = entry.value;
      if (!ctrl.isClosed) {
        ctrl.close();
        log.d('SignalBus: Closed platform controller for ${entry.key}');
      }
    }
    _platformControllers.clear();

    // Close global and error controllers
    if (!_globalController.isClosed) {
      _globalController.close();
      log.d('SignalBus: Closed global controller');
    }
    if (!_errorController.isClosed) {
      _errorController.close();
      log.d('SignalBus: Closed error controller');
    }

    log.i('SignalBus: fully disposed');
  }
}\n\n// ====== lib/core/network/websocket/ticker_ws_client.dart ======\n
// lib/core/network/websocket/ticker_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “현재가” 스트림: List<Map<String, dynamic>>
class TickerWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  TickerWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket': 'ticker-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'ticker',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/candle_ws_client.dart ======\n
// lib/core/network/websocket/candle_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “캔들” 스트림: List<Map<String, dynamic>>
/// [timeFrame]: e.g. "1m", "5m", "15m", ...
class CandleWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  CandleWsClient({
    required String timeFrame,
    void Function(WsStatus)? onStatusChange,
  }) : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket':
                    'candle-$timeFrame-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'candles_$timeFrame',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/trade_ws_client.dart ======\n
// lib/core/network/websocket/trade_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “체결” 스트림: List<Map<String, dynamic>>
class TradeWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  TradeWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket': 'trade-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'trade',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/websocket/base_ws_client.dart ======\n
// lib/core/network/websocket/base_ws_client.dart

import 'dart:async';
import 'dart:convert';

import 'package:web_socket_channel/web_socket_channel.dart';

import '../../config/app_config.dart';
import '../../error/app_exception.dart';
import '../adaptive_backoff.dart';               // AdaptiveBackoff 연동
import '../ws_rate_limiter_interceptor.dart';
import '../../utils/logger.dart';                // ← logger import

typedef DecodeFn<T> = T Function(dynamic json);
typedef EncodeFn = String Function(List<String> symbols);

/// WebSocket connection status notifications.
enum WsStatus {
  connecting,
  connected,
  failed,
  disconnected,
  error,
  reconnecting,
  pongTimeout,
  maxRetryExceeded,
}

/// Common WebSocket client: connect, subscribe, reconnect, emit
class BaseWsClient<T> {
  /// Helper to decode a JSON list (or single object) into a List<Map<String, dynamic>>.
  static List<Map<String, dynamic>> decodeJsonList(dynamic raw) {
    final jsonObj = raw is String ? jsonDecode(raw) : raw;
    final list = jsonObj is List ? jsonObj : [jsonObj];
    return list
        .cast<Map<String, dynamic>>()
        .map((e) => Map<String, dynamic>.from(e))
        .toList();
  }

  final String url;
  final DecodeFn<T> decode;
  final EncodeFn encodeSubscribe;
  final void Function(WsStatus)? onStatusChange;
  final WsRateLimiter _rateLimiter;
  final AdaptiveBackoffCalculator _backoffCalculator =
      AdaptiveBackoffCalculator();
  final Set<StreamSubscription> _activeSubscriptions = {};
  Timer? _memoryCleanupTimer;

  WebSocketChannel? _channel;
  final _controller = StreamController<T>.broadcast();
  List<String> _symbols = [];
  Timer? _pingTimer;
  Timer? _pongTimer;
  bool _disposed = false;
  bool _reconnecting = false;
  int _retryCount = 0;

  BaseWsClient({
    required this.url,
    required this.decode,
    required this.encodeSubscribe,
    this.onStatusChange,
    WsRateLimiter? rateLimiter,
  }) : _rateLimiter = rateLimiter ?? WsRateLimiter() {
    _startMemoryCleanup();
  }

  /// Start periodic cleanup of inactive subscriptions.
  void _startMemoryCleanup() {
    _memoryCleanupTimer =
        Timer.periodic(const Duration(seconds: 30), (_) {
      _cleanupInactiveSubscriptions();
    });
  }

  /// Clean up paused subscriptions to prevent memory leaks.
  void _cleanupInactiveSubscriptions() {
    final toRemove =
        _activeSubscriptions.where((sub) => sub.isPaused).toList();
    for (final sub in toRemove) {
      sub.cancel();
      _activeSubscriptions.remove(sub);
    }
    if (toRemove.isNotEmpty) {
      log.d('WSClient: Cleaned up ${toRemove.length} inactive subscriptions');
    }
  }

  /// 🔥 재연결 시 기존 구독들 안전하게 정리 (메모리 누수 방지)
  void _cleanupActiveSubscriptions() {
    if (_activeSubscriptions.isNotEmpty) {
      log.d('🧹 기존 구독 ${_activeSubscriptions.length}개 정리 중...');
      
      for (final subscription in _activeSubscriptions) {
        try {
          subscription.cancel();
        } catch (e) {
          log.w('⚠️ 구독 취소 중 에러: $e');
        }
      }
      
      _activeSubscriptions.clear();
      log.d('✅ 구독 정리 완료');
    }
  }

  /// Exposed stream of decoded messages.
  Stream<T> get stream => _controller.stream;

  /// Connect or reconnect with a new set of symbols.
  Future<void> connect(List<String> symbols) async {
    _notify(WsStatus.connecting);
    if (_disposed) return;
    _symbols = List.from(symbols);
    
    // 🔥 재연결 시 기존 구독들 정리 (메모리 누수 방지)
    _cleanupActiveSubscriptions();
    
    await _channel?.sink.close();

    try {
      if (_symbols.length > AppConfig.wsMaxSubscriptionCount) {
        throw const WebSocketException('Subscribe limit exceeded');
      }
      _channel = WebSocketChannel.connect(Uri.parse(url));
      _setupPing();
      _send(encodeSubscribe(_symbols));

      final subscription = _channel!.stream.listen(
        _handleData,
        onDone: _handleDone,
        onError: _handleError,
        cancelOnError: true,
      );
      _activeSubscriptions.add(subscription);

      _retryCount = 0;
      _backoffCalculator.recordSuccess();
      _notify(WsStatus.connected);
      log.i('WS connected to $url (subscriptions: ${_symbols.length})');
    } catch (e, st) {
      log.w('WS connect failed: $e', e, st);
      _backoffCalculator.recordFailure();
      _notify(WsStatus.failed);
      _scheduleReconnect();
    }
  }

  void _handleData(dynamic raw) {
    _pongTimer?.cancel();
    try {
      final text = raw is List<int> ? utf8.decode(raw) : raw.toString();
      final jsonObj = jsonDecode(text);
      final data = decode(jsonObj);
      _controller.add(data);
    } catch (e, st) {
      log.e('WS processing error', e, st);
    }
  }

  void _handleDone() {
    log.i('WS closed by server');
    _notify(WsStatus.disconnected);
    _scheduleReconnect();
  }

  void _handleError(dynamic e) {
    log.e('WS error', e);
    _backoffCalculator.recordFailure();
    _notify(WsStatus.error);
    _scheduleReconnect();
  }

  void _send(String msg) => _rateLimiter.enqueue(() {
        try {
          _channel?.sink.add(msg);
          log.d('WS ▶ $msg');
        } catch (e, st) {
          log.e('WS send error', e, st);
        }
      });

  void _setupPing() {
    _pingTimer?.cancel();
    _pongTimer?.cancel();
    _pingTimer =
        Timer.periodic(AppConfig.wsPingInterval, (_) {
      _send(jsonEncode({'type': 'ping'}));
      _pongTimer = Timer(AppConfig.wsPongTimeout, () {
        log.w('Pong timeout, reconnecting');
        _notify(WsStatus.pongTimeout);
        _scheduleReconnect();
      });
    });
    log.d('WS ping/pong timers set');
  }

  /// Schedule reconnection with adaptive backoff.
  void _scheduleReconnect() {
    if (_disposed || _reconnecting) return;
    _reconnecting = true;
    _pingTimer?.cancel();
    _pongTimer?.cancel();

    _backoffCalculator
        .calculateBackoff(
          _retryCount,
          AppConfig.wsInitialBackoff,
          AppConfig.wsMaxBackoff,
        )
        .then((delay) {
      if (_disposed) return;
      Future.delayed(delay, () {
        if (_disposed) return;
        if (_retryCount < AppConfig.wsMaxRetryCount) {
          _retryCount++;
          log.i(
            'Reconnect attempt #$_retryCount after ${delay.inMilliseconds}ms',
          );
          _notify(WsStatus.reconnecting);
          connect(_symbols).whenComplete(() => _reconnecting = false);
        } else {
          log.w('Max WS retries exceeded');
          _notify(WsStatus.maxRetryExceeded);
          _retryCount = 0;
          _reconnecting = false;
        }
      });
    });
  }

  void _notify(WsStatus status) => onStatusChange?.call(status);

  /// Dispose resources: timers, subscriptions, channel, controller, and backoff state.
  Future<void> dispose() async {
    _disposed = true;
    _pingTimer?.cancel();
    _pongTimer?.cancel();
    _memoryCleanupTimer?.cancel();

    // 🔥 dispose 시에도 안전하게 정리
    _cleanupActiveSubscriptions();

    _rateLimiter.dispose();
    await _channel?.sink.close();
    await _controller.close();
    _backoffCalculator.recordSuccess(); // reset
    log.i('WSClient disposed');
  }
}\n\n// ====== lib/core/network/websocket/orderbook_ws_client.dart ======\n
// lib/core/network/websocket/orderbook_ws_client.dart

import 'dart:convert';
import '../../config/app_config.dart';
import 'base_ws_client.dart';

/// “호가” 스트림: List<Map<String, dynamic>>
class OrderbookWsClient extends BaseWsClient<List<Map<String, dynamic>>> {
  OrderbookWsClient({void Function(WsStatus)? onStatusChange})
      : super(
          url: AppConfig.upbitWsUrl,
          onStatusChange: onStatusChange,
          decode: BaseWsClient.decodeJsonList,
          encodeSubscribe: (markets) {
            final codes = markets.take(AppConfig.wsMaxSubscriptionCount).toList();
            return jsonEncode([
              {
                'ticket':
                    'orderbook-${DateTime.now().millisecondsSinceEpoch}'
              },
              {
                'type': 'orderbook',
                'codes': codes,
              },
              {'format': 'DEFAULT'},
            ]);
          },
        );
}
\n\n// ====== lib/core/network/api_client_coingecko.dart ======\n
// lib/core/network/api_client_coingecko.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import '../../data/models/market_mood_dto.dart';
import '../error/app_exception.dart';
import '../utils/logger.dart';

/// 🌐 CoinGecko API 클라이언트
class CoinGeckoApiClient {
  static const String _baseUrl = 'https://api.coingecko.com/api/v3';
  static const String _pathGlobal = '/global';
  static const String _exchangeRateUrl = 'https://api.exchangerate-api.com/v4/latest/USD';
  static const String _keyRates = 'rates';
  static const String _keyKrw = 'KRW';

  static const Duration _timeout = Duration(seconds: 10);
  
  final Dio _dio;
  
  CoinGeckoApiClient({Dio? dio}) : _dio = dio ?? _createDio();
  
  static Dio _createDio() {
    final dio = Dio(BaseOptions(
      baseUrl: _baseUrl,
      connectTimeout: _timeout,
      receiveTimeout: _timeout,
      sendTimeout: _timeout,
      headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
    ));
    
    if (kDebugMode) {
      dio.interceptors.add(LogInterceptor(
        requestBody: false,
        responseBody: false,
        logPrint: (object) => log.d('[CoinGecko API] $object'),
      ));
    }
    
    return dio;
  }
  
  /// 🎯 전체 시장 데이터 조회
  Future<CoinGeckoGlobalResponseDto> getGlobalMarketData() async {
    try {
      final response = await _dio.get(_pathGlobal);
      if (response.statusCode == 200 && response.data != null) {
        return CoinGeckoGlobalResponseDto.fromJson(response.data);
      } else {
        throw NetworkException(
          'Invalid response from CoinGecko API: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      log.e('[CoinGecko] DioException: ${e.message}', e);
      throw NetworkException.fromDio(e);
    } catch (e, stackTrace) {
      log.e('[CoinGecko] Unexpected error: $e', e, stackTrace);
      throw AppException('Failed to fetch market data: $e');
    }
  }

  /// 💱 USD → KRW 환율 조회
  Future<double> getUsdToKrwRate() async {
    try {
      final response = await _dio.get(_exchangeRateUrl);
      if (response.statusCode == 200 && response.data != null) {
        final data = response.data as Map<String, dynamic>;
        final rates = data[_keyRates] as Map<String, dynamic>;
        final krwRate = (rates[_keyKrw] ?? 1400.0).toDouble();
        return krwRate;
      } else {
        throw NetworkException('Invalid response from Exchange Rate API: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    } on DioException {
      log.w('[ExchangeRate] DioException, using fallback rate 1400.0');
      return 1400.0;
    } catch (e) {
      log.w('[ExchangeRate] Unexpected error: $e, using fallback rate 1400.0');
      return 1400.0;
    }
  }
}\n\n// ====== lib/core/network/auth_interceptor.dart ======\n
// lib/core/network/auth_interceptor.dart

import 'dart:convert';
import 'package:crypto/crypto.dart';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// Upbit REST API 호출 시 JWT 방식의 인증 헤더를 붙여줍니다.
/// - payload에 access_key, nonce, (query_hash, query_hash_alg)을 포함해야 합니다.
/// - 알고리즘: HS256
class AuthInterceptor extends Interceptor {
  final String apiKey;
  final String apiSecret;

  AuthInterceptor({required this.apiKey, required this.apiSecret});

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    try {
      final nonce = DateTime.now().millisecondsSinceEpoch.toString();
      final payload = <String, dynamic>{
        'access_key': apiKey,
        'nonce': nonce,
      };

      if (options.queryParameters.isNotEmpty || _hasRequestBody(options)) {
        final raw = options.queryParameters.isNotEmpty
            ? Uri(queryParameters: options.queryParameters).query
            : jsonEncode(options.data);
        payload['query_hash'] = sha512.convert(utf8.encode(raw)).toString();
        payload['query_hash_alg'] = 'SHA512';
      }

      // JWT Header and Payload
      const headerMap = {'alg': 'HS256', 'typ': 'JWT'};
      final headerJson = jsonEncode(headerMap);
      final payloadJson = jsonEncode(payload);
      final headerSeg = _base64UrlEncode(headerJson);
      final payloadSeg = _base64UrlEncode(payloadJson);

      // Signature
      final sigBytes = Hmac(sha256, utf8.encode(apiSecret))
          .convert(utf8.encode('$headerSeg.$payloadSeg'))
          .bytes;
      final sigSeg = base64Url.encode(sigBytes).replaceAll('=', '');

      options.headers['Authorization'] =
          'Bearer $headerSeg.$payloadSeg.$sigSeg';
    } catch (e, st) {
      log.e('AuthInterceptor error', e, st);
      return handler.reject(
        DioException(requestOptions: options, error: e),
      );
    }

    handler.next(options);
  }

  bool _hasRequestBody(RequestOptions options) {
    final data = options.data;
    if (data == null) return false;
    if (data is String) return data.isNotEmpty;
    if (data is Iterable || data is Map) return data.isNotEmpty;
    if (data is FormData) return data.fields.isNotEmpty || data.files.isNotEmpty;
    return true;
  }

  String _base64UrlEncode(String input) =>
      base64Url.encode(utf8.encode(input)).replaceAll('=', '');
}
\n\n// ====== lib/core/network/adaptive_backoff.dart ======\n
// lib/core/network/adaptive_backoff.dart

import 'dart:math' as math;
import 'package:connectivity_plus/connectivity_plus.dart';
import '../utils/logger.dart';

class AdaptiveBackoffCalculator {
  final Connectivity _connectivity = Connectivity();
  int _consecutiveFailures = 0;
  DateTime? _lastFailureTime;
  
  // 네트워크별 기본 지터 계수 (connectivity_plus 연동)
  static const Map<ConnectivityResult, double> _networkMultipliers = {
    ConnectivityResult.wifi: 0.8,      // WiFi는 빠른 재연결
    ConnectivityResult.mobile: 1.2,    // 모바일은 보수적
    ConnectivityResult.ethernet: 0.6,  // 유선은 가장 빠름
    ConnectivityResult.none: 2.0,      // 연결 없음은 매우 보수적
  };

  Future<Duration> calculateBackoff(int attempt, Duration baseDelay, Duration maxDelay) async {
    final connectivityResult = await _connectivity.checkConnectivity();
    final networkMultiplier = _networkMultipliers[connectivityResult] ?? 1.0; // 기본값
    
    final failurePenalty = _calculateFailurePenalty();
    
    final exponentialMs = baseDelay.inMilliseconds * (1 << attempt);
    final cappedMs = math.min(exponentialMs, maxDelay.inMilliseconds);
    
    // 지터 범위 20%로 빠른 재연결 보장
    final jitterRange = cappedMs * 0.2;
    final random = math.Random();
    final adaptiveJitter = random.nextDouble() * jitterRange * networkMultiplier * failurePenalty;
    
    final finalMs = math.max(0, cappedMs + adaptiveJitter.round());
    
    log.d('AdaptiveBackoff: attempt=$attempt, network=$connectivityResult, '
          'base=${cappedMs}ms, jitter=${adaptiveJitter.round()}ms, final=${finalMs}ms');
    
    return Duration(milliseconds: finalMs);
  }

  double _calculateFailurePenalty() {
    if (_lastFailureTime == null) return 1.0;
    
    final timeSinceLastFailure = DateTime.now().difference(_lastFailureTime!);
    if (timeSinceLastFailure > const Duration(minutes: 5)) {
      _consecutiveFailures = 0;
      return 1.0;
    }
    
    // 페널티 상한 1.5배로 조정 (그록의 수정사항 유지)
    return math.min(1.5, 1.0 + (_consecutiveFailures * 0.2));
  }

  void recordFailure() {
    _consecutiveFailures++;
    _lastFailureTime = DateTime.now();
  }

  void recordSuccess() {
    _consecutiveFailures = 0;
    _lastFailureTime = null;
  }
}\n\n// ====== lib/core/network/retry_interceptor.dart ======\n
import 'dart:async';
import 'dart:math';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// 429 혹은 5xx 에러에 대해 지수 백오프 + 지터 방식으로 재시도합니다.
class RetryInterceptor extends Interceptor {
  final Dio dio;
  final int maxRetries;
  final Duration initialBackoff;
  final Duration maxBackoff;
  final double jitterFactor;

  RetryInterceptor({
    required this.dio,
    this.maxRetries = 3,
    this.initialBackoff = const Duration(milliseconds: 500),
    this.maxBackoff = const Duration(seconds: 5),
    this.jitterFactor = 0.2,
  });

  @override
  Future<void> onError(DioException err, ErrorInterceptorHandler handler) async {
    final options = err.requestOptions;
    final retryCount = (options.extra['retry_count'] as int?) ?? 0;
    final status = err.response?.statusCode;

    if (_shouldRetry(err) && retryCount < maxRetries) {
      final next = retryCount + 1;
      options.extra['retry_count'] = next;

      // 429 응답일 경우 서버가 제공하는 헤더 우선 사용
      Duration delay;
      if (status == 429) {
        final retryAfter = err.response?.headers.value('Retry-After');
        if (retryAfter != null) {
          final secs = int.tryParse(retryAfter) ?? 0;
          delay = Duration(seconds: secs);
          log.i('Retry #$next after Retry-After header: ${delay.inSeconds}s');
        } else {
          final remaining = err.response?.headers.value('Remaining-Req');
          if (remaining != null) {
            log.d('Remaining-Req header: $remaining');
          }
          delay = _computeBackoff(next);
        }
      } else {
        // 5xx 에러는 기본 백오프 사용
        delay = _computeBackoff(next);
      }

      log.i('Retry #$next for [${options.method} ${options.path}] in ${delay.inMilliseconds}ms');
      await Future.delayed(delay);

      try {
        final response = await dio.fetch(options);
        return handler.resolve(response);
      } on DioException catch (e) {
        return handler.next(e);
      }
    }

    handler.next(err);
  }

  bool _shouldRetry(DioException err) {
    final status = err.response?.statusCode;
    return err.type == DioExceptionType.badResponse &&
        (status == 429 || (status != null && status >= 500 && status < 600));
  }

  Duration _computeBackoff(int attempt) {
    final expMs = initialBackoff.inMilliseconds * (1 << (attempt - 1));
    final cap = min(expMs, maxBackoff.inMilliseconds);
    final jitter = ((Random().nextDouble() * 2 - 1) * jitterFactor * cap).round();
    final finalMs = max(0, cap + jitter);
    return Duration(milliseconds: finalMs);
  }
}
\n\n// ====== lib/core/network/ws_rate_limiter_interceptor.dart ======\n
// lib/core/network/ws_rate_limiter_interceptor.dart

import 'dart:async';
import 'dart:collection';
import 'package:flutter/foundation.dart';
import '../utils/logger.dart';

/// Upbit WebSocket 구독 메시지 발행 간 최소 간격 보장 유틸
class WsRateLimiter {
  final Duration minInterval;
  final Queue<VoidCallback> _queue = Queue<VoidCallback>();
  bool _isFlushing = false;
  DateTime _lastSent = DateTime.fromMillisecondsSinceEpoch(0);

  WsRateLimiter({this.minInterval = const Duration(milliseconds: 500)});

  /// 메시지를 큐에 추가하고 즉시 전송 시도
  void enqueue(VoidCallback send) {
    _queue.add(send);
    _flushNext();
  }

  void _flushNext() {
    if (_isFlushing || _queue.isEmpty) return;
    _isFlushing = true;

    final now = DateTime.now();
    final elapsed = now.difference(_lastSent);
    final delay = elapsed >= minInterval ? Duration.zero : minInterval - elapsed;

    Timer(delay, () {
      final send = _queue.removeFirst();
      try {
        send();
        _lastSent = DateTime.now();
        log.d('WsRateLimiter sent, next after \${minInterval.inMilliseconds}ms');
      } catch (e, st) {
        log.e('WsRateLimiter send error', e, st);
      } finally {
        _isFlushing = false;
        if (_queue.isNotEmpty) _flushNext();
      }
    });
  }

  /// 큐를 비우고 사용 중지
  void dispose() {
    _queue.clear();
  }
}
\n\n// ====== lib/core/network/api_client.dart ======\n
// lib/core/network/api_client.dart

import 'dart:async';
import 'dart:collection';
import 'package:dio/dio.dart';
import '../config/app_config.dart';
import '../error/app_exception.dart';
import '../extensions/result.dart';
import '../utils/logger.dart';
import 'auth_interceptor.dart';
import 'retry_interceptor.dart';
import 'logging_interceptor.dart';

typedef Json = Map<String, dynamic>;

/// 🆕 업비트 백서 2025 기준 동적 레이트리밋 관리자
/// Remaining-Req 헤더를 파싱하여 그룹별 실시간 슬롯 계산
class _UpbitDynamicRateLimiter {
  final Map<String, _GroupRateLimiter> _groupLimiters = {};
  final Duration _defaultPeriod = const Duration(seconds: 1);
  
  /// 응답 헤더에서 레이트리밋 정보 업데이트
  /// 형식: "Remaining-Req: group=market; min=900; sec=29"
  void updateFromHeaders(Map<String, List<String>> headers) {
    try {
      final remainingReq = headers['remaining-req']?.first ?? 
                          headers['Remaining-Req']?.first;
      if (remainingReq == null) return;
      
      // 헤더 파싱: group=market; min=900; sec=29
      final parsedInfo = _parseRemainingReqHeader(remainingReq);
      if (parsedInfo != null) {
        _updateGroupLimiter(
          parsedInfo.group, 
          parsedInfo.remaining, 
          Duration(seconds: parsedInfo.windowSec)
        );
        
        if (AppConfig.enableTradeLog) {
          log.i('Rate limit updated: ${parsedInfo.group}=${parsedInfo.remaining} req in ${parsedInfo.windowSec}s');
        }
      }
      
      // Req-Group 헤더도 확인 (그룹 정보만)
      final reqGroup = headers['req-group']?.first ?? 
                      headers['Req-Group']?.first;
      if (reqGroup != null && _groupLimiters[reqGroup] == null) {
        _initializeGroupLimiter(reqGroup);
      }
      
    } catch (e, st) {
      log.w('Failed to parse rate limit headers: $e', e, st);
    }
  }
  
  /// Remaining-Req 헤더 파싱
  _RemainingReqInfo? _parseRemainingReqHeader(String header) {
    try {
      final parts = header.split(';').map((p) => p.trim()).toList();
      String? group;
      int? remaining;
      int? windowSec;
      
      for (final part in parts) {
        final kv = part.split('=');
        if (kv.length != 2) continue;
        
        final key = kv[0].trim().toLowerCase();
        final value = kv[1].trim();
        
        switch (key) {
          case 'group':
            group = value;
            break;
          case 'min':
          case 'remaining':
            remaining = int.tryParse(value);
            break;
          case 'sec':
          case 'window':
            windowSec = int.tryParse(value);
            break;
        }
      }
      
      if (group != null && remaining != null && windowSec != null) {
        return _RemainingReqInfo(group, remaining, windowSec);
      }
    } catch (e) {
      log.w('Failed to parse Remaining-Req header: $header, error: $e');
    }
    return null;
  }
  
  /// 그룹별 레이트리밋 초기화
  void _initializeGroupLimiter(String group) {
    final maxRequests = AppConfig.getRateLimitForGroup(group);
    _groupLimiters[group] = _GroupRateLimiter(
      group: group,
      maxRequests: maxRequests,
      period: _defaultPeriod,
    );
    
    if (AppConfig.enableTradeLog) {
      log.d('Initialized rate limiter for group: $group ($maxRequests rps)');
    }
  }
  
  /// 그룹별 레이트리밋 업데이트 (서버 응답 기반)
  void _updateGroupLimiter(String group, int remaining, Duration window) {
    var limiter = _groupLimiters[group];
    if (limiter == null) {
      _initializeGroupLimiter(group);
      limiter = _groupLimiters[group]!;
    }
    
    // 서버에서 받은 정보로 동적 업데이트
    limiter.updateFromServer(remaining, window);
  }
  
  /// 특정 그룹의 throttle 실행
  Future<void> throttle(String group, String path) async {
    // 그룹 리밋이 없으면 초기화
    if (!_groupLimiters.containsKey(group)) {
      _initializeGroupLimiter(group);
    }
    
    final limiter = _groupLimiters[group]!;
    await limiter.throttle(path);
  }
  
  /// 디버그 정보 제공
  Map<String, dynamic> getDebugInfo() {
    return {
      'activeGroups': _groupLimiters.keys.toList(),
      'groupStats': {
        for (final entry in _groupLimiters.entries)
          entry.key: entry.value.getStats(),
      },
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  /// 리소스 정리
  void dispose() {
    for (final limiter in _groupLimiters.values) {
      limiter.dispose();
    }
    _groupLimiters.clear();
  }
}

/// 헤더 파싱 결과 정보
class _RemainingReqInfo {
  final String group;
  final int remaining;
  final int windowSec;
  
  _RemainingReqInfo(this.group, this.remaining, this.windowSec);
}

/// 개별 그룹의 레이트리밋 관리자
class _GroupRateLimiter {
  final String group;
  int _maxRequests;
  final Duration _period;
  final Queue<DateTime> _timestamps = Queue<DateTime>();
  
  // 서버 기반 동적 정보
  int? _serverRemaining;
  DateTime? _serverUpdateTime;
  Duration? _serverWindow;
  
  _GroupRateLimiter({
    required this.group,
    required int maxRequests,
    required Duration period,
  }) : _maxRequests = maxRequests, _period = period;
  
  /// 서버 응답 기반 업데이트
  void updateFromServer(int remaining, Duration window) {
    _serverRemaining = remaining;
    _serverUpdateTime = DateTime.now();
    _serverWindow = window;
    
    // 서버 정보가 더 제한적이면 클라이언트 제한도 조정
    if (remaining < _maxRequests) {
      final adjustedMax = (remaining * 0.9).floor(); // 10% 여유
      if (adjustedMax > 0 && adjustedMax < _maxRequests) {
        log.i('Adjusting rate limit for $group: $_maxRequests → $adjustedMax (server: $remaining)');
        _maxRequests = adjustedMax;
      }
    }
  }
  
  /// throttle 실행
  Future<void> throttle(String path) async {
    final now = DateTime.now();
    
    // 서버 정보 기반 추가 체크
    if (_shouldWaitForServerLimit(now)) {
      final waitTime = _calculateServerWaitTime(now);
      if (waitTime > Duration.zero) {
        if (AppConfig.enableTradeLog) {
          log.d('Waiting ${waitTime.inMilliseconds}ms for server rate limit (group: $group)');
        }
        await Future.delayed(waitTime);
      }
    }
    
    // 클라이언트 사이드 레이트리밋
    _cleanOldTimestamps(now);
    
    if (_timestamps.length >= _maxRequests) {
      final oldestTime = _timestamps.first;
      final waitTime = _period - now.difference(oldestTime);
      if (waitTime > Duration.zero) {
        if (AppConfig.enableTradeLog) {
          log.d('Waiting ${waitTime.inMilliseconds}ms for client rate limit (group: $group)');
        }
        await Future.delayed(waitTime);
        _cleanOldTimestamps(DateTime.now());
      }
    }
    
    _timestamps.addLast(DateTime.now());
  }
  
  /// 서버 제한 대기 필요 여부
  bool _shouldWaitForServerLimit(DateTime now) {
    if (_serverRemaining == null || _serverUpdateTime == null || _serverWindow == null) {
      return false;
    }
    
    // 서버 정보가 5분 이상 오래됐으면 무시
    if (now.difference(_serverUpdateTime!).inMinutes > 5) {
      return false;
    }
    
    return _serverRemaining! <= 5; // 서버 잔여 요청이 5개 이하
  }
  
  /// 서버 기반 대기 시간 계산
  Duration _calculateServerWaitTime(DateTime now) {
    if (_serverUpdateTime == null || _serverWindow == null) {
      return Duration.zero;
    }
    
    final elapsed = now.difference(_serverUpdateTime!);
    final remaining = _serverWindow! - elapsed;
    
    return remaining > Duration.zero ? remaining : Duration.zero;
  }
  
  /// 오래된 타임스탬프 정리
  void _cleanOldTimestamps(DateTime now) {
    while (_timestamps.isNotEmpty && 
           now.difference(_timestamps.first) > _period) {
      _timestamps.removeFirst();
    }
  }
  
  /// 통계 정보
  Map<String, dynamic> getStats() {
    return {
      'group': group,
      'maxRequests': _maxRequests,
      'period': _period.inSeconds,
      'currentRequests': _timestamps.length,
      'serverRemaining': _serverRemaining,
      'serverLastUpdate': _serverUpdateTime?.toIso8601String(),
      'availableSlots': _maxRequests - _timestamps.length,
    };
  }
  
  void dispose() {
    _timestamps.clear();
  }
}

/// In-memory cache entry with timestamp.
class _MemCacheEntry<T> {
  final T data;
  final DateTime ts;
  _MemCacheEntry(this.data) : ts = DateTime.now();

  bool fresh(Duration dur) => DateTime.now().difference(ts) < dur;
}

/// Simple LRU cache based on insertion order, with a maxEntries limit.
class _MemCache {
  final int maxEntries;
  final Map<String, _MemCacheEntry<dynamic>> _box;

  _MemCache({this.maxEntries = 100}) : _box = <String, _MemCacheEntry<dynamic>>{};

  T? get<T>(String key, Duration dur) {
    final entry = _box[key];
    if (entry == null || !entry.fresh(dur)) return null;
    return entry.data as T;
  }

  void put<T>(String key, T data) {
    if (_box.length >= maxEntries) {
      final oldestKey = _box.keys.first;
      _box.remove(oldestKey);
    }
    _box[key] = _MemCacheEntry<T>(data);
  }

  void invalidate(String key) => _box.remove(key);

  void clear() => _box.clear();
}

/// Converts a query map into a stable, sorted query string.
/// Silently skips values that cannot be represented.
String _stableQueryString(Json? query) {
  if (query == null || query.isEmpty) return '';
  try {
    final entries = query.entries
      .where((e) => e.value != null)
      .toList()
      ..sort((a, b) => a.key.compareTo(b.key));
    final params = <String, String>{};
    for (final e in entries) {
      final v = e.value;
      if (v is List) {
        params[e.key] = v.join(',');
      } else {
        params[e.key] = v.toString();
      }
    }
    return Uri(queryParameters: params).query;
  } catch (e, st) {
    log.e('StableQueryString failed', e, st);
    return '';
  }
}

/// 🆕 응답 헤더에서 레이트리밋 정보를 파싱하는 인터셉터
class _RateLimitResponseInterceptor extends Interceptor {
  final _UpbitDynamicRateLimiter rateLimiter;
  
  _RateLimitResponseInterceptor(this.rateLimiter);
  
  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    // 업비트 응답 헤더에서 레이트리밋 정보 업데이트
    rateLimiter.updateFromHeaders(response.headers.map);
    handler.next(response);
  }
}

/// 🔥 완전히 재구현된 ApiClient - 업비트 백서 100% 준수
/// - 그룹별 동적 레이트리밋 (공개 30rps / 사적 8rps)
/// - Remaining-Req 헤더 실시간 파싱
/// - 서버 응답 기반 동적 슬롯 조정
class ApiClient {
  final Dio _dio;
  final _MemCache _cache;
  final _UpbitDynamicRateLimiter _rateLimiter;

  /// [apiKey], [apiSecret] 는 Upbit Open API 자격증명
  ApiClient({
    Dio? dio,
    required String apiKey,
    required String apiSecret,
    int cacheSize = 100,
  })  : _dio = dio ?? Dio(),
        _cache = _MemCache(maxEntries: cacheSize),
        _rateLimiter = _UpbitDynamicRateLimiter() {
    _dio.interceptors.addAll([
      AuthInterceptor(apiKey: apiKey, apiSecret: apiSecret),
      RetryInterceptor(dio: _dio),
      LoggingInterceptor(),
      _RateLimitResponseInterceptor(_rateLimiter), // 🆕 동적 레이트리밋 인터셉터
    ]);
  }

  /// [method]: GET, POST 등
  /// [path]: 전체 URL 또는 baseUrl 이후 경로
  /// [query]: URL 쿼리 파라미터
  /// [body]: JSON 바디
  /// [cacheDur]: null이 아닐 때 캐시 사용 (기간 지정)
  /// [rateLimitGroup]: 수동 그룹 지정 (선택적)
  Future<Result<R, NetworkException>> request<R>({
    required String method,
    required String path,
    Json? query,
    Json? body,
    Duration? cacheDur,
    String? rateLimitGroup,
  }) async {
    // 🔥 업비트 백서 기준 그룹별 동적 레이트리밋 적용
    final group = rateLimitGroup ?? AppConfig.getGroupFromPath(path);
    await _rateLimiter.throttle(group, path);

    String? cacheKey;
    if (cacheDur != null) {
      final qstr = _stableQueryString(query);
      cacheKey = '$method|$path|$qstr';
      final cached = _cache.get<R>(cacheKey, cacheDur);
      if (cached != null) {
        return Ok(cached);
      }
    }

    try {
      final response = await _dio.request<R>(
        path,
        queryParameters: query,
        data: body,
        options: Options(method: method),
      );

      final data = response.data;
      if (cacheKey != null && data != null) {
        _cache.put<R>(cacheKey, data as R);
      }

      return Ok(data as R);
    } on DioException catch (dioErr) {
      return Err(NetworkException.fromDio(dioErr));
    } catch (e, st) {
      log.e('ApiClient unexpected error', e, st);
      final ex = e is Exception ? e : Exception(e.toString());
      return Err(NetworkException(e.toString(), originalException: ex));
    }
  }
  
  /// 🆕 레이트리밋 디버그 정보 조회
  Map<String, dynamic> getRateLimitDebugInfo() {
    return _rateLimiter.getDebugInfo();
  }
  
  /// 🆕 리소스 정리
  void dispose() {
    _rateLimiter.dispose();
    _cache.clear();
  }
}\n\n// ====== lib/core/network/logging_interceptor.dart ======\n
// lib/core/network/logging_interceptor.dart

import 'dart:convert';
import 'package:dio/dio.dart';
import '../utils/logger.dart';

/// 모든 REST 요청과 응답, 오류를 로깅합니다.
/// 🔒 보안: access_key, signature 등 민감 정보 자동 마스킹
class LoggingInterceptor extends Interceptor {
  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(options.uri);
    log.i('--> ${options.method} $secureUri');
    
    // 🔒 헤더 보안 마스킹 (Authorization 헤더)
    if (options.headers.containsKey('Authorization')) {
      log.d('Headers: Authorization: Bearer ***[MASKED]***');
    }
    
    if (options.data != null && options.data is! String) {
      try {
        final sanitizedData = _sanitizeRequestData(options.data);
        log.d('Request Data:\n${const JsonEncoder.withIndent('  ').convert(sanitizedData)}');
      } catch (e, st) {
        log.d('Request Data serialization failed', e, st);
      }
    }
    handler.next(options);
  }

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(response.requestOptions.uri);
    log.i('<-- ${response.statusCode} $secureUri');
    
    final text = response.data is String
        ? response.data as String
        : response.data.toString();
    if (text.isNotEmpty) {
      log.d(text.length > 500 ? '${text.substring(0, 500)}...' : text);
    }
    handler.next(response);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    // 🔒 URL 보안 마스킹
    final secureUri = _sanitizeUri(err.requestOptions.uri);
    log.e('<-- Error ${err.response?.statusCode} $secureUri', err, err.stackTrace);
    handler.next(err);
  }

  /// 🔒 URI에서 민감 정보 마스킹
  String _sanitizeUri(Uri uri) {
    final uriString = uri.toString();
    return uriString
        .replaceAll(RegExp(r'access_key=[^&?#]+'), 'access_key=***')
        .replaceAll(RegExp(r'signature=[^&?#]+'), 'signature=***')
        .replaceAll(RegExp(r'nonce=[^&?#]+'), 'nonce=***')
        .replaceAll(RegExp(r'api_key=[^&?#]+'), 'api_key=***')
        .replaceAll(RegExp(r'secret=[^&?#]+'), 'secret=***');
  }

  /// 🔒 요청 데이터에서 민감 정보 마스킹
  dynamic _sanitizeRequestData(dynamic data) {
    if (data is Map<String, dynamic>) {
      final sanitized = <String, dynamic>{};
      for (final entry in data.entries) {
        final key = entry.key.toLowerCase();
        if (_isSensitiveKey(key)) {
          sanitized[entry.key] = '***[MASKED]***';
        } else {
          sanitized[entry.key] = _sanitizeRequestData(entry.value);
        }
      }
      return sanitized;
    } else if (data is List) {
      return data.map((item) => _sanitizeRequestData(item)).toList();
    }
    return data;
  }

  /// 🔒 민감한 키 판별
  bool _isSensitiveKey(String key) {
    const sensitiveKeys = {
      'access_key', 'accesskey', 'api_key', 'apikey',
      'secret', 'signature', 'nonce', 'password', 
      'token', 'auth', 'authorization'
    };
    return sensitiveKeys.contains(key);
  }
}\n\n// ====== lib/core/navigation/app_router.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../config/app_config.dart';
import '../../shared/widgets/notification_service.dart';
import '../../presentation/pages/main_page.dart'; // 🆕 MainPage 사용

/// 🗑️ 개별 라우트 enum 제거 (이제 MainPage에서 관리)
// enum AppRoute는 더 이상 필요 없음

class AppRouter {
  final WidgetRef ref;
  final GlobalKey<NavigatorState> navigatorKey;
  late final GoRouter router;

  AppRouter(this.ref, this.navigatorKey) {
    router = GoRouter(
      navigatorKey: navigatorKey,
      initialLocation: '/', // 메인 페이지로 시작
      debugLogDiagnostics: AppConfig.isDebugMode,
      routes: [
        // 🆕 단일 메인 라우트 (PageView 기반)
        GoRoute(
          path: '/',
          name: 'main',
          builder: (context, state) => const MainPage(),
        ),
        
        // 🔧 필요시 추가 라우트들 (설정, 상세 페이지 등)
        // GoRoute(
        //   path: '/detail/:id',
        //   name: 'detail',
        //   builder: (context, state) => DetailPage(id: state.params['id']!),
        // ),
      ],
    );
  }

  /// 🔧 Firebase 리스너 설정 (NotificationService에 위임)
  void setupFCMListeners() {
    final notificationService = ref.read(notificationServiceProvider);
    notificationService.setupFirebaseListeners(navigatorKey);
  }

  /// 🔧 리소스 정리 (NotificationService에 위임)
  void dispose() {
    final notificationService = ref.read(notificationServiceProvider);
    notificationService.dispose();
  }
}\n\n// ====== lib/core/utils/pattern_config.dart ======\n
import '../../domain/entities/signal.dart';

/// 🎯 PatternConfig - 패턴별 설정값 관리
/// 
/// 개선사항:
/// - 4,5번 패턴 완화된 설정값 적용
/// - 패턴별 개별 쿨다운 시간 관리
/// - 설정값 유효성 검사
/// - 런타임 설정 변경 지원
class PatternConfig {
  
  /// 📊 패턴별 기본 설정값 (4,5번 패턴 완화됨)
  static const Map<PatternType, Map<String, double>> _defaultConfig = {
    PatternType.surge: {
      'priceChangePercent': 0.4,       // 가격 변동률 0.4%
      'zScoreThreshold': 1.7,          // Z-score 임계값
      'minTradeAmount': 2500000,       // 최소 거래대금 (250만)
      'lvThreshold': 500,              // Liquidity Vortex
    },
    
    PatternType.flashFire: {
      'zScoreThreshold': 2.2,          // Z-score 임계값
      'minTradeAmount': 10000000,      // 최소 거래대금 (1000만)
      'buyRatioMin': 0.7,              // 매수 비율
      'volumeMultiplier': 2.0,         // 거래량 배수
      'mbrThreshold': 0.12,            // Micro Burst Radar
      'mrThreshold': 0.15,             // Machine Rush
    },
    
    PatternType.stackUp: {
      'consecutiveMin': 2,             // 최소 연속 횟수
      'minVolume': 5000000,            // 최소 거래량 (500만)
      'zScoreThreshold': 1.0,          // Z-score 임계값
      'volumeMultiplier': 1.5,         // 거래량 배수
      'rSquaredMin': 0.35,             // R² 최소값
    },
    
    // 🆕 StealthIn 패턴 - 완화된 설정 (감지율 향상)
    PatternType.stealthIn: {
      'minTradeAmount': 5000000,       // 2000만 → 500만 (대폭 완화)
      'intervalVarianceMax': 900,      // 거래 간격 분산 최대값
      'buyRatioMin': 0.6,              // 0.7 → 0.6 (완화)
      'avgTradeSizeRatio': 0.4,        // 평균 거래 크기 비율
      'minTradeCount': 20,             // 최소 거래 횟수
      'cvThreshold': 0.05,             // 변동계수 임계값 (5%)
    },
    
    // 🆕 BlackHole 패턴 - 완화된 설정 (감지율 향상)
    PatternType.blackHole: {
      'minTradeAmount': 10000000,      // 5000만 → 1000만 (대폭 완화)
      'cvThreshold': 0.02,             // 0.01 → 0.02 (완화)
      'buyRatioMin': 0.35,             // 0.4 → 0.35 (완화)
      'buyRatioMax': 0.65,             // 0.6 → 0.65 (완화)
      'priceZScoreMax': 1.0,           // 가격 Z-score 최대값
      'stdDevRatio': 0.02,             // 표준편차 비율 (2%)
    },
    
    PatternType.reboundShot: {
      'minVolume': 1000000,            // 최소 거래량 (100만)
      'priceRangeMin': 0.005,          // 최소 가격 범위 (0.5%)
      'jumpThreshold': 0,              // Jump Gate 임계값
    },
  };

  /// 🔒 패턴별 쿨다운 시간 (성능 최적화)
  static const Map<PatternType, Duration> _cooldownPeriods = {
    PatternType.surge: Duration(seconds: 2),        // 빠른 패턴
    PatternType.flashFire: Duration(seconds: 3),    // 중간 패턴
    PatternType.stackUp: Duration(seconds: 4),      // 중간 패턴
    PatternType.stealthIn: Duration(seconds: 8),    // 느린 패턴 (매집 특성상)
    PatternType.blackHole: Duration(seconds: 10),   // 가장 느린 패턴 (갇힘 특성상)
    PatternType.reboundShot: Duration(seconds: 3),  // 중간 패턴
  };

  /// 현재 설정값 (런타임 변경 가능)
  final Map<PatternType, Map<String, double>> _currentConfig;
  
  /// 생성자
  PatternConfig({Map<PatternType, Map<String, double>>? customConfig}) 
    : _currentConfig = customConfig != null 
        ? Map.from(customConfig)
        : _deepCopyConfig(_defaultConfig);

  /// 패턴별 설정값 조회
  Map<String, double> getPatternConfig(PatternType pattern) {
    return Map.from(_currentConfig[pattern] ?? <String, double>{});
  }

  /// 특정 설정값 조회
  double getConfigValue(PatternType pattern, String key) {
    return _currentConfig[pattern]?[key] ?? 0.0;
  }

  /// 패턴별 쿨다운 시간 조회
  Duration getCooldownDuration(PatternType pattern) {
    return _cooldownPeriods[pattern] ?? const Duration(seconds: 5);
  }

  /// 🛠️ 런타임 설정 변경
  
  /// 특정 패턴의 설정값 업데이트
  void updatePatternConfig(PatternType pattern, String key, double value) {
    if (_isValidConfigValue(pattern, key, value)) {
      _currentConfig[pattern] ??= <String, double>{};
      _currentConfig[pattern]![key] = value;
    } else {
      throw ArgumentError('Invalid config value: $key = $value for pattern ${pattern.name}');
    }
  }

  /// 패턴의 전체 설정 업데이트
  void updateFullPatternConfig(PatternType pattern, Map<String, double> config) {
    // 유효성 검사
    for (final entry in config.entries) {
      if (!_isValidConfigValue(pattern, entry.key, entry.value)) {
        throw ArgumentError('Invalid config value: ${entry.key} = ${entry.value} for pattern ${pattern.name}');
      }
    }
    
    _currentConfig[pattern] = Map.from(config);
  }

  /// 설정값을 기본값으로 리셋
  void resetToDefault(PatternType? pattern) {
    if (pattern != null) {
      _currentConfig[pattern] = Map.from(_defaultConfig[pattern] ?? <String, double>{});
    } else {
      _currentConfig.clear();
      _currentConfig.addAll(_deepCopyConfig(_defaultConfig));
    }
  }

  /// 🔍 설정값 유효성 검사
  bool _isValidConfigValue(PatternType pattern, String key, double value) {
    // 음수 값 방지
    if (value < 0) return false;
    
    // 패턴별 특수 검사
    switch (pattern) {
      case PatternType.surge:
        if (key == 'priceChangePercent' && (value < 0.1 || value > 10.0)) return false;
        if (key == 'zScoreThreshold' && (value < 0.5 || value > 5.0)) return false;
        break;
        
      case PatternType.flashFire:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'volumeMultiplier' && (value < 1.0 || value > 10.0)) return false;
        break;
        
      case PatternType.stackUp:
        if (key == 'consecutiveMin' && (value < 1 || value > 10)) return false;
        if (key == 'rSquaredMin' && (value < 0.0 || value > 1.0)) return false;
        break;
        
      case PatternType.stealthIn:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'cvThreshold' && (value < 0.001 || value > 0.5)) return false;
        break;
        
      case PatternType.blackHole:
        if (key == 'buyRatioMin' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'buyRatioMax' && (value < 0.0 || value > 1.0)) return false;
        if (key == 'cvThreshold' && (value < 0.001 || value > 0.5)) return false;
        break;
        
      case PatternType.reboundShot:
        if (key == 'priceRangeMin' && (value < 0.001 || value > 0.5)) return false;
        break;
    }
    
    return true;
  }

  /// 설정 깊은 복사
  static Map<PatternType, Map<String, double>> _deepCopyConfig(
    Map<PatternType, Map<String, double>> source
  ) {
    final result = <PatternType, Map<String, double>>{};
    for (final entry in source.entries) {
      result[entry.key] = Map.from(entry.value);
    }
    return result;
  }

  /// 📊 설정값 정보 조회
  
  /// 모든 패턴의 설정값 조회
  Map<PatternType, Map<String, double>> getAllPatternConfigs() {
    return _deepCopyConfig(_currentConfig);
  }

  /// 기본값과 현재값 비교
  Map<String, dynamic> getConfigComparison(PatternType pattern) {
    final current = _currentConfig[pattern] ?? <String, double>{};
    final defaultValues = _defaultConfig[pattern] ?? <String, double>{};
    
    final comparison = <String, Map<String, double>>{};
    final allKeys = <String>{...current.keys, ...defaultValues.keys};
    
    for (final key in allKeys) {
      comparison[key] = {
        'current': current[key] ?? 0.0,
        'default': defaultValues[key] ?? 0.0,
        'isModified': (current[key] ?? 0.0) != (defaultValues[key] ?? 0.0) ? 1.0 : 0.0,
      };
    }
    
    return {
      'pattern': pattern.name,
      'cooldownSeconds': getCooldownDuration(pattern).inSeconds,
      'configs': comparison,
      'totalModified': comparison.values
          .where((v) => v['isModified'] == 1.0)
          .length,
    };
  }

  /// 설정 요약 정보
  Map<String, dynamic> getConfigSummary() {
    final summary = <String, dynamic>{
      'version': '4.0',
      'totalPatterns': PatternType.values.length,
      'enhancedPatterns': ['stealthIn', 'blackHole'], // 완화된 패턴들
    };
    
    // 패턴별 쿨다운 시간
    final cooldowns = <String, String>{};
    for (final pattern in PatternType.values) {
      cooldowns[pattern.name] = '${getCooldownDuration(pattern).inSeconds}s';
    }
    summary['cooldownPeriods'] = cooldowns;
    
    // 변경된 설정값 개수
    int totalModified = 0;
    for (final pattern in PatternType.values) {
      final current = _currentConfig[pattern] ?? <String, double>{};
      final defaultValues = _defaultConfig[pattern] ?? <String, double>{};
      
      for (final key in current.keys) {
        if (current[key] != defaultValues[key]) {
          totalModified++;
        }
      }
    }
    summary['totalModifiedConfigs'] = totalModified;
    
    // 완화된 설정값들 (4,5번 패턴)
    summary['relaxedSettings'] = {
      'stealthIn': {
        'minTradeAmount': '2000만 → 500만 (75% 완화)',
        'buyRatioMin': '0.7 → 0.6 (14% 완화)',
        'cvThreshold': '추가됨 (5%)',
      },
      'blackHole': {
        'minTradeAmount': '5000만 → 1000만 (80% 완화)',
        'cvThreshold': '1% → 2% (100% 완화)',
        'buyRatioRange': '40-60% → 35-65% (25% 확대)',
      },
    };
    
    return summary;
  }

  /// 🎯 프리셋 설정

  /// 보수적 설정 (False Positive 최소화)
  void applyConservativePreset() {
    // Surge 패턴 강화
    updatePatternConfig(PatternType.surge, 'priceChangePercent', 0.6);
    updatePatternConfig(PatternType.surge, 'zScoreThreshold', 2.0);
    
    // FlashFire 패턴 강화
    updatePatternConfig(PatternType.flashFire, 'zScoreThreshold', 2.5);
    updatePatternConfig(PatternType.flashFire, 'buyRatioMin', 0.75);
    
    // StackUp 패턴 강화
    updatePatternConfig(PatternType.stackUp, 'consecutiveMin', 3);
    updatePatternConfig(PatternType.stackUp, 'rSquaredMin', 0.5);
    
    // StealthIn 패턴 강화 (하지만 여전히 기존보다는 완화)
    updatePatternConfig(PatternType.stealthIn, 'minTradeAmount', 8000000); // 800만
    updatePatternConfig(PatternType.stealthIn, 'buyRatioMin', 0.65);
    
    // BlackHole 패턴 강화 (하지만 여전히 기존보다는 완화)
    updatePatternConfig(PatternType.blackHole, 'minTradeAmount', 15000000); // 1500만
    updatePatternConfig(PatternType.blackHole, 'cvThreshold', 0.015);
  }

  /// 공격적 설정 (감지율 최대화)
  void applyAggressivePreset() {
    // Surge 패턴 완화
    updatePatternConfig(PatternType.surge, 'priceChangePercent', 0.3);
    updatePatternConfig(PatternType.surge, 'zScoreThreshold', 1.5);
    
    // FlashFire 패턴 완화
    updatePatternConfig(PatternType.flashFire, 'zScoreThreshold', 2.0);
    updatePatternConfig(PatternType.flashFire, 'buyRatioMin', 0.65);
    
    // StackUp 패턴 완화
    updatePatternConfig(PatternType.stackUp, 'consecutiveMin', 2);
    updatePatternConfig(PatternType.stackUp, 'rSquaredMin', 0.25);
    
    // StealthIn 패턴 최대 완화
    updatePatternConfig(PatternType.stealthIn, 'minTradeAmount', 3000000); // 300만
    updatePatternConfig(PatternType.stealthIn, 'buyRatioMin', 0.55);
    
    // BlackHole 패턴 최대 완화
    updatePatternConfig(PatternType.blackHole, 'minTradeAmount', 5000000); // 500만
    updatePatternConfig(PatternType.blackHole, 'cvThreshold', 0.03);
    updatePatternConfig(PatternType.blackHole, 'buyRatioMin', 0.3);
    updatePatternConfig(PatternType.blackHole, 'buyRatioMax', 0.7);
  }

  /// 균형 설정 (기본값)
  void applyBalancedPreset() {
    resetToDefault(null); // 모든 패턴을 기본값으로 리셋
  }

  /// 🧪 백테스팅용 설정 내보내기/가져오기
  
  /// 설정을 JSON 형태로 내보내기
  Map<String, dynamic> exportConfig() {
    final export = <String, dynamic>{
      'version': '4.0',
      'timestamp': DateTime.now().toIso8601String(),
      'patterns': <String, dynamic>{},
    };
    
    for (final pattern in PatternType.values) {
      export['patterns'][pattern.name] = {
        'config': getPatternConfig(pattern),
        'cooldownSeconds': getCooldownDuration(pattern).inSeconds,
      };
    }
    
    return export;
  }

  /// JSON에서 설정 가져오기
  void importConfig(Map<String, dynamic> configData) {
    if (configData['version'] != '4.0') {
      throw ArgumentError('Unsupported config version: ${configData['version']}');
    }
    
    final patterns = configData['patterns'] as Map<String, dynamic>?;
    if (patterns == null) return;
    
    for (final pattern in PatternType.values) {
      final patternData = patterns[pattern.name] as Map<String, dynamic>?;
      if (patternData == null) continue;
      
      final config = patternData['config'] as Map<String, dynamic>?;
      if (config == null) continue;
      
      // double 타입으로 변환하여 설정 적용
      final doubleConfig = <String, double>{};
      for (final entry in config.entries) {
        if (entry.value is num) {
          doubleConfig[entry.key] = (entry.value as num).toDouble();
        }
      }
      
      if (doubleConfig.isNotEmpty) {
        updateFullPatternConfig(pattern, doubleConfig);
      }
    }
  }

  /// 🎯 A/B 테스트용 설정 변형
  
  /// 특정 패턴만 조정한 변형 생성
  PatternConfig createVariant({
    PatternType? targetPattern,
    String? targetKey,
    double? multiplier,
  }) {
    if (targetPattern == null || targetKey == null || multiplier == null) {
      return PatternConfig(customConfig: getAllPatternConfigs());
    }
    
    final variantConfig = getAllPatternConfigs();
    final currentValue = getConfigValue(targetPattern, targetKey);
    
    if (currentValue > 0) {
      variantConfig[targetPattern] ??= <String, double>{};
      variantConfig[targetPattern]![targetKey] = currentValue * multiplier;
    }
    
    return PatternConfig(customConfig: variantConfig);
  }
}\n\n// ====== lib/core/utils/pattern_strategies.dart ======\n
\n\n// ====== lib/core/utils/date_time.dart ======\n
import 'package:intl/intl.dart';

/// DateTime extension utilities for formatting and comparison.
extension DateTimeX on DateTime {
  /// `2024-05-17 22:05:01` → `22:05:01`
  String hhmmss() => DateFormat('HH:mm:ss').format(this);

  /// `2024-05-17` 형식의 날짜 문자열 반환
  String yyyyMMdd() => DateFormat('yyyy-MM-dd').format(this);

  /// `22:05` 형식의 시간 문자열 반환
  String hhmm() => DateFormat('HH:mm').format(this);

  /// `2024-05-17 22:05` 형식의 날짜+시간 문자열 반환
  String yyyyMMddhhmm() => DateFormat('yyyy-MM-dd HH:mm').format(this);

  /// 현재 시간과의 차이를 사람이 읽기 쉬운 형태로 표시
  /// 예: '방금 전', '3분 전', '2시간 전', '어제', '3일 전', '2주 전', '5개월 전', '1년 전'
  String timeAgo() {
    final now = DateTime.now();
    final diff = now.difference(this);

    if (diff.inSeconds < 60) return '방금 전';
    if (diff.inMinutes < 60) return '${diff.inMinutes}분 전';
    if (diff.inHours < 24) return '${diff.inHours}시간 전';
    if (diff.inDays < 2) return '어제';
    if (diff.inDays < 7) return '${diff.inDays}일 전';
    if (diff.inDays < 30) return '${(diff.inDays / 7).floor()}주 전';
    if (diff.inDays < 365) return '${(diff.inDays / 30).floor()}개월 전';
    return '${(diff.inDays / 365).floor()}년 전';
  }

  /// UTC 밀리초(ms)를 로컬 DateTime으로 변환
  static DateTime fromEpochMs(int ms) =>
      DateTime.fromMillisecondsSinceEpoch(ms, isUtc: true).toLocal();

  /// ISO 8601 문자열을 로컬 DateTime으로 파싱
  static DateTime parseIso8601(String iso) =>
      DateTime.parse(iso).toLocal();

  /// 동일한 날짜인지 확인
  bool isSameDay(DateTime other) =>
      year == other.year && month == other.month && day == other.day;

  /// 오늘인지 확인
  bool get isToday => isSameDay(DateTime.now());

  /// 어제인지 확인
  bool get isYesterday =>
      isSameDay(DateTime.now().subtract(const Duration(days: 1)));
}
\n\n// ====== lib/core/utils/logger.dart ======\n
import 'package:logger/logger.dart';
import '../config/app_config.dart';

/// 글로벌 Logger 인스턴스
/// - 개발 모드: AppConfig.logLevel에 따라 동적 조절
/// - 프로덕션모드: warning 이상 자동
final Logger log = Logger(
  printer: PrettyPrinter(
    methodCount: 0,      // 스택 트레이스 라인 수
    errorMethodCount: 5, // 오류 시 표시할 스택 트레이스 라인 수
    lineLength: 120,     // 로그 한 줄 최대 길이
    colors: true,        // 컬러 출력 (터미널)
    printTime: true,     // 타임스탬프 포함
  ),
  level: AppConfig.logLevel, // 🔥 환경변수로 동적 조절 가능
);\n\n// ====== lib/core/utils/pattern_detector copy.dart ======\n
\n\n// ====== lib/core/utils/pattern_detector.dart ======\n
import 'dart:math';
import 'package:flutter/foundation.dart';
import '../../domain/entities/signal.dart';
import '../../domain/entities/trade.dart';
import 'advanced_metrics.dart';
import 'pattern_config.dart';
import 'market_data_context.dart';

/// 🚀 PatternDetector V4.1 - 온라인 지표 연동
/// 
/// 주요 개선사항:
/// 1. ✅ OnlineAdvancedMetrics 사용으로 O(1) 지표 계산
/// 2. ✅ 스트림 끊김 감지 및 자동 복구
/// 3. ✅ 실제 온라인 RSI/MACD 기반 다이버전스 계산
/// 4. ✅ 시한폭탄 문제 완전 해결
/// 5. ✅ 기존 인터페이스 호환성 유지
class PatternDetector {
  final PatternConfig _config;
  final AdvancedMetrics _metrics;
  
  // 🔒 쿨다운 시스템 (인스턴스 변수로 변경)
  final Map<String, DateTime> _lastSignalTime = {};
  
  PatternDetector({
    PatternConfig? config,
    AdvancedMetrics? metrics,
  }) : _config = config ?? PatternConfig(),
        _metrics = metrics ?? AdvancedMetrics();

  /// 🎯 메인 감지 함수 - 온라인 지표 연동
  Signal? detectPattern({
    required PatternType patternType,
    required Trade trade,
    required DateTime timestamp,
    required MarketDataContext context,
  }) {
    // 🔥 먼저 온라인 지표 업데이트 (O(1))
    _metrics.updatePrice(
      market: trade.market,
      price: trade.price,
      timestamp: timestamp,
    );
    
    // 🔒 쿨다운 체크
    if (_isInCooldown(trade.market, patternType, timestamp)) {
      return null;
    }
    
    Signal? signal;
    
    // 패턴별 감지 로직
    switch (patternType) {
      case PatternType.surge:
        signal = _detectSurge(trade, timestamp, context);
        break;
      case PatternType.flashFire:
        signal = _detectFlashFire(trade, timestamp, context);
        break;
      case PatternType.stackUp:
        signal = _detectStackUp(trade, timestamp, context);
        break;
      case PatternType.stealthIn:
        signal = _detectStealthIn(trade, timestamp, context);
        break;
      case PatternType.blackHole:
        signal = _detectBlackHole(trade, timestamp, context);
        break;
      case PatternType.reboundShot:
        signal = _detectReboundShot(trade, timestamp, context);
        break;
    }
    
    if (signal != null) {
      // 🔒 쿨다운 등록
      _updateCooldown(trade.market, patternType, timestamp);
      
      // 🆕 실제 온라인 RSI/MACD 기반 신뢰도 조정
      signal = _adjustSignalConfidence(signal, context);
    }
    
    return signal;
  }

  /// 🔒 쿨다운 체크 (패턴별 개별 쿨다운)
  bool _isInCooldown(String market, PatternType pattern, DateTime timestamp) {
    final cooldownKey = '$market-${pattern.name}';
    final lastTime = _lastSignalTime[cooldownKey];
    if (lastTime == null) return false;
    
    final cooldownDuration = _config.getCooldownDuration(pattern);
    return timestamp.difference(lastTime) < cooldownDuration;
  }
  
  /// 🔒 쿨다운 등록
  void _updateCooldown(String market, PatternType pattern, DateTime timestamp) {
    final cooldownKey = '$market-${pattern.name}';
    _lastSignalTime[cooldownKey] = timestamp;
  }

  /// 🎯 1. Surge 패턴 감지 (온라인 지표 포함)
  Signal? _detectSurge(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 60));
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (priceWindow.length < 2 || volumeWindow.isEmpty) return null;

    final config = _config.getPatternConfig(PatternType.surge);
    final currentPrice = trade.price;
    final prevPrice = priceWindow.values[1];
    final changePercent = prevPrice == 0 ? 0.0 : ((currentPrice - prevPrice) / prevPrice) * 100;
    
    // 기본 조건들
    final zScore = priceWindow.zScore(currentPrice);
    final conditions = [
      changePercent.abs() >= config['priceChangePercent']!,
      zScore.abs() >= config['zScoreThreshold']!,
      volumeWindow.sum >= config['minTradeAmount']!,
    ];
    
    // 🔥 온라인 지표 사용 (O(1) 복잡도)
    final rsi = _metrics.calculateRSI(market: trade.market);
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 고급 지표
    final lv = _metrics.calculateLiquidityVortex(priceWindow, volumeWindow);
    final flashPulse = _metrics.calculateFlashPulse(trade.total, volumeWindow);
    
    final advancedConditions = [
      lv >= config['lvThreshold']!,
      flashPulse > 0,
      // 🆕 온라인 RSI/MACD 조건 추가
      _isValidRSIForDirection(rsi, changePercent),
      macd.histogram.abs() > 0.1, // MACD 모멘텀 체크
    ];
    
    if (!conditions.every((c) => c) || !advancedConditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: currentPrice,
      changePercent: changePercent,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.surge,
      patternDetails: {
        'changePercent': changePercent,
        'zScore': zScore,
        'liquidityVortex': lv,
        'flashPulse': flashPulse,
        'rsi': rsi,
        'macd': macd.macd,
        'macdSignal': macd.signal,
        'macdHistogram': macd.histogram,
        'confidence': 0.8,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 2. FlashFire 패턴 감지 (온라인 지표 포함)
  Signal? _detectFlashFire(Trade trade, DateTime timestamp, MarketDataContext context) {
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    final buyRatioWindow = context.buyRatioWindow;
    
    if (volumeWindow.length < 10 || buyRatioWindow == null) return null;
    
    final config = _config.getPatternConfig(PatternType.flashFire);
    final volumeZScore = volumeWindow.zScore(trade.total);
    final buyRatio = buyRatioWindow.mean;
    
    // 🔥 온라인 RSI 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    
    // 기본 조건들
    final conditions = [
      volumeZScore >= config['zScoreThreshold']!,
      volumeWindow.sum >= config['minTradeAmount']!,
      buyRatio >= config['buyRatioMin']!,
      // 🆕 RSI 오버바잉/오버셀링 방지
      rsi > 20 && rsi < 80,
    ];
    
    // 고급 지표
    final microBurst = _metrics.calculateMicroBurstRadar(trade.total, volumeWindow);
    final machineRush = _metrics.calculateMachineRush(trade.total, volumeWindow.sum);
    
    final advancedConditions = [
      microBurst >= config['mbrThreshold']!,
      machineRush >= config['mrThreshold']!,
    ];
    
    if (!conditions.every((c) => c) || !advancedConditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.flashFire,
      patternDetails: {
        'volumeZScore': volumeZScore,
        'buyRatio': buyRatio,
        'microBurstRadar': microBurst,
        'machineRush': machineRush,
        'rsi': rsi,
        'confidence': 0.85,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 3. StackUp 패턴 감지 (온라인 지표 포함)
  Signal? _detectStackUp(Trade trade, DateTime timestamp, MarketDataContext context) {
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (volumeWindow.length < 4) return null;
    
    final config = _config.getPatternConfig(PatternType.stackUp);
    final consecutiveCount = volumeWindow.consecutiveIncreases;
    final volumeZScore = volumeWindow.zScore(trade.total);
    
    // 🔥 온라인 MACD 체크
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 기본 조건들
    final conditions = [
      consecutiveCount >= config['consecutiveMin']!,
      volumeWindow.sum >= config['minVolume']!,
      volumeZScore >= config['zScoreThreshold']!,
      // 🆕 MACD 상승 모멘텀 체크
      macd.histogram > 0, // MACD 히스토그램 상승
    ];
    
    // 추세 분석
    final slope = volumeWindow.slope;
    final rSquared = volumeWindow.rSquared;
    final trendOk = slope > 0 && rSquared > config['rSquaredMin']!;
    
    if (!conditions.every((c) => c) || !trendOk) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: volumeWindow.sum,
      detectedAt: timestamp,
      patternType: PatternType.stackUp,
      patternDetails: {
        'consecutiveCount': consecutiveCount,
        'slope': slope,
        'rSquared': rSquared,
        'volumeZScore': volumeZScore,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.75,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🎯 4. StealthIn 패턴 감지 (완화된 설정 + 온라인 지표)
  Signal? _detectStealthIn(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 300)); // 장기 윈도우 사용
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 300));
    final buyRatioWindow = context.buyRatioWindow;
    final intervalWindow = context.intervalWindow;
    
    if (volumeWindow.length < 15 || buyRatioWindow == null || intervalWindow == null) {
      return null;
    }
    
    final config = _config.getPatternConfig(PatternType.stealthIn);
    final totalAmount = volumeWindow.sum;
    final buyRatio = buyRatioWindow.mean;
    final priceStability = 1.0 - priceWindow.cv; // 변동계수의 역수
    
    // 🔥 온라인 RSI - 중립 구간 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    
    // 🆕 완화된 조건들 + RSI 체크
    final conditions = [
      // "조용히 매집" - 가격 안정성
      priceStability >= 0.95, // CV가 5% 이하
      priceWindow.zScore(trade.price).abs() <= 1.0,
      
      // "꾸준한 매수" - 완화된 임계값들  
      buyRatio >= config['buyRatioMin']!, // 0.6 (기존 0.7에서 완화)
      totalAmount >= config['minTradeAmount']!, // 500만 (기존 2000만에서 완화)
      volumeWindow.length >= config['minTradeCount']!,
      
      // "거래 간격 일정"
      intervalWindow.variance <= config['intervalVarianceMax']!,
      
      // 🆕 RSI 중립 구간 (조용한 매집시 극단값 회피)
      rsi >= 30 && rsi <= 70,
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: totalAmount,
      detectedAt: timestamp,
      patternType: PatternType.stealthIn,
      patternDetails: {
        'totalAmount': totalAmount,
        'buyRatio': buyRatio,
        'priceStability': priceStability,
        'tradeCount': volumeWindow.length,
        'rsi': rsi,
        'confidence': 0.7,
        'enhancement': 'V4.1 - Online + Relaxed Thresholds',
      },
    );
  }

  /// 🎯 5. BlackHole 패턴 감지 (완화된 설정 + 온라인 지표)
  Signal? _detectBlackHole(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 300)); // 장기 윈도우 사용
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 300));
    final buyRatioWindow = context.buyRatioWindow;
    
    if (priceWindow.length < 10 || volumeWindow.length < 10 || buyRatioWindow == null) {
      return null;
    }
    
    final config = _config.getPatternConfig(PatternType.blackHole);
    final totalVolume = volumeWindow.sum;
    final cv = priceWindow.cv;
    final buyRatio = buyRatioWindow.mean;
    
    // 🔥 온라인 MACD - 횡보 구간 체크
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // 🆕 완화된 조건들 + MACD 체크
    final conditions = [
      // "엄청난 거래량" - 완화된 임계값
      totalVolume >= config['minTradeAmount']!, // 1000만 (기존 5000만에서 완화)
      
      // "가격 갇힘" - 완화된 변동성 기준
      cv <= config['cvThreshold']!, // 2% (기존 1%에서 완화)
      priceWindow.zScore(trade.price).abs() <= config['priceZScoreMax']!,
      
      // "매수/매도 균형" - 완화된 범위
      buyRatio >= config['buyRatioMin']! && buyRatio <= config['buyRatioMax']!, // 35-65% (기존 40-60%에서 완화)
      
      // 🆕 MACD 횡보 구간 (갇힘 패턴 특성)
      macd.histogram.abs() < 50, // 작은 MACD 히스토그램
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: 0.0,
      volume: trade.volume,
      tradeAmount: totalVolume,
      detectedAt: timestamp,
      patternType: PatternType.blackHole,
      patternDetails: {
        'cv': cv,
        'buyRatio': buyRatio,
        'totalVolume': totalVolume,
        'stabilityIndex': 1.0 - cv,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.8,
        'enhancement': 'V4.1 - Online + Relaxed Thresholds',
      },
    );
  }

  /// 🎯 6. ReboundShot 패턴 감지 (온라인 지표 포함)
  Signal? _detectReboundShot(Trade trade, DateTime timestamp, MarketDataContext context) {
    final priceWindow = context.getPriceWindow(const Duration(seconds: 60));
    final volumeWindow = context.getVolumeWindow(const Duration(seconds: 60));
    
    if (priceWindow.length < 5) return null;
    
    final config = _config.getPatternConfig(PatternType.reboundShot);
    final prices = priceWindow.values;
    final low = prices.reduce(min);
    final high = prices.reduce(max);
    final recentVolume = volumeWindow.sum;
    
    // 🔥 온라인 RSI - 과매도에서 반등 체크
    final rsi = _metrics.calculateRSI(market: trade.market);
    final macd = _metrics.calculateMACD(market: trade.market);
    
    // Jump Gate 계산
    final jumpScore = _metrics.calculateJumpGate(trade.price, low, high, trade.total);
    final priceRange = (high - low) / low;
    
    final conditions = [
      // "의미있는 반등 범위"
      priceRange >= config['priceRangeMin']!,
      
      // "점프하는 움직임"
      jumpScore > 0,
      
      // "강력한 매수세"
      recentVolume >= config['minVolume']!,
      
      // 🆕 RSI 과매도에서 반등 or MACD 골든크로스
      (rsi < 35 && trade.price > low * 1.01) || // 과매도 반등
      (macd.histogram > 0 && macd.macd > macd.signal), // MACD 상승
    ];
    
    if (!conditions.every((c) => c)) {
      return null;
    }
    
    return Signal(
      market: trade.market,
      name: trade.market.replaceAll('KRW-', ''),
      currentPrice: trade.price,
      changePercent: ((trade.price - low) / low) * 100,
      volume: trade.volume,
      tradeAmount: recentVolume,
      detectedAt: timestamp,
      patternType: PatternType.reboundShot,
      patternDetails: {
        'jumpScore': jumpScore,
        'priceRange': priceRange,
        'lowPrice': low,
        'highPrice': high,
        'rsi': rsi,
        'macd': macd.macd,
        'macdHistogram': macd.histogram,
        'confidence': 0.9,
        'version': 'V4.1-Online',
      },
    );
  }

  /// 🆕 실제 온라인 RSI/MACD 기반 신뢰도 조정
  Signal _adjustSignalConfidence(Signal signal, MarketDataContext context) {
    try {
      final priceWindow = context.getPriceWindow(const Duration(seconds: 300));
      if (priceWindow.length < 5) return signal; // 다이버전스 계산 불가
      
      // 🔥 실제 온라인 RSI/MACD 사용한 다이버전스 감지
      final divergence = _metrics.detectDivergence(
        market: signal.market,
        prices: priceWindow.values,
        indicator: [], // 사용 안함 (온라인 RSI 사용)
      );
      
      // 신뢰도 조정
      double confidenceMultiplier = 1.0;
      
      if (signal.changePercent > 0 && divergence.isBearish) {
        // 상승 신호인데 Bearish 다이버전스 → 신뢰도 하락
        confidenceMultiplier = max(0.3, 1.0 - (divergence.strength * 0.5));
      } else if (signal.changePercent < 0 && divergence.isBullish) {
        // 하락 신호인데 Bullish 다이버전스 → 신뢰도 하락
        confidenceMultiplier = max(0.3, 1.0 - (divergence.strength * 0.5));
      } else if ((signal.changePercent > 0 && divergence.isBullish) ||
                 (signal.changePercent < 0 && divergence.isBearish)) {
        // 신호와 다이버전스 방향 일치 → 신뢰도 상승
        confidenceMultiplier = min(1.5, 1.0 + (divergence.strength * 0.3));
      }
      
      // 조정된 신뢰도로 신호 업데이트
      final adjustedDetails = Map<String, dynamic>.from(signal.patternDetails);
      adjustedDetails['originalConfidence'] = adjustedDetails['confidence'];
      adjustedDetails['confidenceMultiplier'] = confidenceMultiplier;
      adjustedDetails['finalConfidence'] = 
          (adjustedDetails['confidence'] as double) * confidenceMultiplier;
      adjustedDetails['divergence'] = {
        'isBullish': divergence.isBullish,
        'isBearish': divergence.isBearish,
        'strength': divergence.strength,
        'source': 'online-rsi', // 온라인 RSI 기반임을 명시
      };
      
      return Signal(
        market: signal.market,
        name: signal.name,
        currentPrice: signal.currentPrice,
        changePercent: signal.changePercent,
        volume: signal.volume,
        tradeAmount: signal.tradeAmount,
        detectedAt: signal.detectedAt,
        patternType: signal.patternType,
        patternDetails: adjustedDetails,
      );
      
    } catch (e) {
      if (kDebugMode) {
        print('Confidence adjustment failed: $e');
      }
      return signal; // 실패시 원본 반환
    }
  }

  /// 🛠️ 헬퍼 함수들

  /// 🆕 온라인 지표 접근자 (Repository에서 사용)
  AdvancedMetrics get metrics => _metrics;

  /// RSI 방향성 검증
  bool _isValidRSIForDirection(double rsi, double changePercent) {
    if (changePercent > 0) {
      // 상승시 RSI 80 이하 (과매수 회피)
      return rsi <= 80;
    } else if (changePercent < 0) {
      // 하락시 RSI 20 이상 (과매도 회피)
      return rsi >= 20;
    }
    return true; // 변화 없으면 통과
  }

  /// 쿨다운 상태 조회
  Map<String, dynamic> getCooldownStatus() {
    final now = DateTime.now();
    final status = <String, dynamic>{};
    
    for (final entry in _lastSignalTime.entries) {
      final parts = entry.key.split('-');
      final market = parts[0];
      final patternName = parts[1];
      
      final pattern = PatternType.values.firstWhere(
        (p) => p.name == patternName,
        orElse: () => PatternType.surge,
      );
      
      final cooldownDuration = _config.getCooldownDuration(pattern);
      final remainingMs = cooldownDuration.inMilliseconds - 
                         now.difference(entry.value).inMilliseconds;
      
      status[entry.key] = {
        'market': market,
        'pattern': patternName,
        'isInCooldown': remainingMs > 0,
        'remainingMs': max(0, remainingMs),
        'cooldownDurationSeconds': cooldownDuration.inSeconds,
      };
    }
    
    return status;
  }

  /// 특정 패턴의 쿨다운 해제 (디버깅용)
  void clearCooldown(String market, PatternType pattern) {
    final cooldownKey = '$market-${pattern.name}';
    _lastSignalTime.remove(cooldownKey);
  }

  /// 모든 쿨다운 해제 (디버깅용)
  void clearAllCooldowns() {
    _lastSignalTime.clear();
  }

  /// 🆕 시스템 헬스 체크 (온라인 지표 포함)
  Map<String, dynamic> getSystemHealth() {
    final metricsHealth = _metrics.getSystemHealth();
    
    return {
      'version': 'V4.1-Online',
      'patternDetector': {
        'activeCooldowns': _lastSignalTime.length,
        'cooldownEntries': getCooldownStatus(),
      },
      'onlineMetrics': metricsHealth,
      'improvements': [
        'Online RSI/MACD Integration',
        'Stream Gap Auto-Recovery',
        'O(1) Indicator Calculation',
        'Real Divergence Detection',
        'Stale Data Prevention',
      ],
    };
  }

  /// 리소스 정리
  void dispose() {
    _lastSignalTime.clear();
    _metrics.dispose();
  }
}\n\n// ====== lib/core/utils/advanced_metrics.dart ======\n
import 'dart:math';
import 'dart:developer' as developer;
import 'rolling_window.dart';

// ==========================================================================
// 🔥 스트림 동기화된 온라인 계산기들
// ==========================================================================

/// 스트림 생명주기와 동기화된 OnlineRSI
class StreamAwareOnlineRSI {
  final int period;
  final Duration maxGap; // 허용 가능한 최대 데이터 간격
  
  final List<double> _prices = [];
  double _avgGain = 0.0;
  double _avgLoss = 0.0;
  bool _isInitialized = false;
  DateTime? _lastUpdate;
  
  StreamAwareOnlineRSI({
    required this.period, 
    this.maxGap = const Duration(seconds: 10),
  });
  
  void update(double price, DateTime timestamp) {
    // 🔥 스트림 끊김 감지 및 자동 리셋
    if (_lastUpdate != null && 
        timestamp.difference(_lastUpdate!).abs() > maxGap) {
      reset();
      if (_prices.isNotEmpty) {
        developer.log('RSI Reset: Stream gap detected (${timestamp.difference(_lastUpdate!).inSeconds}s)', name: 'StreamAwareOnlineRSI');
      }
    }
    
    _lastUpdate = timestamp;
    _prices.add(price);
    
    if (_prices.length < 2) return;
    
    final change = _prices.last - _prices[_prices.length - 2];
    final gain = change > 0 ? change : 0.0;
    final loss = change < 0 ? change.abs() : 0.0;
    
    if (!_isInitialized && _prices.length >= period + 1) {
      // 초기 평균 계산
      double gainSum = 0.0;
      double lossSum = 0.0;
      
      for (int i = 1; i <= period; i++) {
        final ch = _prices[i] - _prices[i - 1];
        if (ch > 0) {
          gainSum += ch;
        } else {
          lossSum += ch.abs();
        }
      }
      
      _avgGain = gainSum / period;
      _avgLoss = lossSum / period;
      _isInitialized = true;
    } else if (_isInitialized) {
      // 지수이동평균 업데이트
      _avgGain = ((_avgGain * (period - 1)) + gain) / period;
      _avgLoss = ((_avgLoss * (period - 1)) + loss) / period;
    }
    
    // 메모리 관리: 최대 period * 2 개의 가격만 유지
    if (_prices.length > period * 2) {
      _prices.removeAt(0);
    }
  }
  
  double get current {
    if (!_isInitialized || _avgLoss == 0) return 50.0;
    
    final rs = _avgGain / _avgLoss;
    return 100.0 - (100.0 / (1.0 + rs));
  }
  
  bool get isReady => _isInitialized;
  bool get isStale => _lastUpdate != null && 
      DateTime.now().difference(_lastUpdate!).abs() > maxGap;
  
  void reset() {
    _prices.clear();
    _avgGain = 0.0;
    _avgLoss = 0.0;
    _isInitialized = false;
    _lastUpdate = null;
  }
  
  /// 건강 상태 체크
  Map<String, dynamic> getHealthStatus() {
    return {
      'isReady': isReady,
      'isStale': isStale,
      'dataPoints': _prices.length,
      'lastUpdate': _lastUpdate?.toIso8601String(),
      'timeSinceLastUpdate': _lastUpdate != null 
          ? DateTime.now().difference(_lastUpdate!).inSeconds 
          : null,
    };
  }
}

/// 스트림 동기화된 OnlineMACD
class StreamAwareOnlineMACD {
  final int fastPeriod;
  final int slowPeriod;
  final int signalPeriod;
  final Duration maxGap;
  
  double _fastEMA = 0.0;
  double _slowEMA = 0.0;
  double _signalEMA = 0.0;
  
  final List<double> _macdHistory = [];
  bool _isInitialized = false;
  int _count = 0;
  DateTime? _lastUpdate;
  
  StreamAwareOnlineMACD({
    this.fastPeriod = 12,
    this.slowPeriod = 26,
    this.signalPeriod = 9,
    this.maxGap = const Duration(seconds: 10),
  });
  
  void update(double price, DateTime timestamp) {
    // 🔥 스트림 끊김 감지 및 자동 리셋
    if (_lastUpdate != null && 
        timestamp.difference(_lastUpdate!).abs() > maxGap) {
      reset();
      developer.log('MACD Reset: Stream gap detected (${timestamp.difference(_lastUpdate!).inSeconds}s)', name: 'StreamAwareOnlineMACD');
    }
    
    _lastUpdate = timestamp;
    _count++;
    
    final fastAlpha = 2.0 / (fastPeriod + 1);
    final slowAlpha = 2.0 / (slowPeriod + 1);
    final signalAlpha = 2.0 / (signalPeriod + 1);
    
    if (_count == 1) {
      _fastEMA = price;
      _slowEMA = price;
    } else {
      _fastEMA = (price * fastAlpha) + (_fastEMA * (1 - fastAlpha));
      _slowEMA = (price * slowAlpha) + (_slowEMA * (1 - slowAlpha));
    }
    
    if (_count >= slowPeriod) {
      final macd = _fastEMA - _slowEMA;
      _macdHistory.add(macd);
      
      if (_macdHistory.length == 1) {
        _signalEMA = macd;
      } else {
        _signalEMA = (macd * signalAlpha) + (_signalEMA * (1 - signalAlpha));
      }
      
      _isInitialized = _macdHistory.length >= signalPeriod;
      
      // 메모리 관리
      if (_macdHistory.length > signalPeriod * 2) {
        _macdHistory.removeAt(0);
      }
    }
  }
  
  double get macd => _count >= slowPeriod ? _fastEMA - _slowEMA : 0.0;
  double get signal => _signalEMA;
  double get histogram => macd - signal;
  bool get isReady => _isInitialized;
  bool get isStale => _lastUpdate != null && 
      DateTime.now().difference(_lastUpdate!).abs() > maxGap;
  
  MACDResult get current => MACDResult(
    macd: macd, 
    signal: signal, 
    histogram: histogram
  );
  
  void reset() {
    _fastEMA = 0.0;
    _slowEMA = 0.0;
    _signalEMA = 0.0;
    _macdHistory.clear();
    _isInitialized = false;
    _count = 0;
    _lastUpdate = null;
  }
  
  /// 건강 상태 체크
  Map<String, dynamic> getHealthStatus() {
    return {
      'isReady': isReady,
      'isStale': isStale,
      'dataPoints': _count,
      'macdHistoryLength': _macdHistory.length,
      'lastUpdate': _lastUpdate?.toIso8601String(),
      'timeSinceLastUpdate': _lastUpdate != null 
          ? DateTime.now().difference(_lastUpdate!).inSeconds 
          : null,
    };
  }
}

// ==========================================================================
// 🔥 완전히 온라인화된 AdvancedMetrics (메인 클래스)
// ==========================================================================

/// 완전히 온라인화된 AdvancedMetrics
/// 
/// 기존 문제점들 해결:
/// 1. ❌ 캐시 키가 부정확 → ✅ 캐시 제거, 온라인 계산
/// 2. ❌ calculateMACD O(n²) → ✅ O(1) 온라인 업데이트
/// 3. ❌ 매번 전체 재계산 → ✅ 새 데이터만 업데이트
/// 4. ❌ 스트림 끊김시 오염 → ✅ 자동 감지 및 리셋
class AdvancedMetrics {
  
  // 🎯 마켓별 온라인 계산기들
  final Map<String, StreamAwareOnlineRSI> _rsiCalculators = {};
  final Map<String, StreamAwareOnlineMACD> _macdCalculators = {};
  final Map<String, DateTime> _lastUpdates = {};
  
  // 🔒 스트림 건강성 관리
  final Duration maxGap;
  final Duration staleThreshold;
  
  AdvancedMetrics({
    this.maxGap = const Duration(seconds: 10),
    this.staleThreshold = const Duration(seconds: 30),
  });

  // ==========================================================================
  // 🔥 메인 업데이트 메서드 (새 데이터만 받아서 O(1) 업데이트)
  // ==========================================================================
  
  /// 새로운 가격 데이터로 모든 지표 업데이트
  void updatePrice({
    required String market,
    required double price,
    required DateTime timestamp,
  }) {
    _lastUpdates[market] = timestamp;
    
    // RSI 업데이트 (O(1))
    _getRSICalculator(market).update(price, timestamp);
    
    // MACD 업데이트 (O(1))
    _getMACDCalculator(market).update(price, timestamp);
  }
  
  /// RSI 계산기 조회/생성
  StreamAwareOnlineRSI _getRSICalculator(String market) {
    return _rsiCalculators.putIfAbsent(
      market, 
      () => StreamAwareOnlineRSI(period: 14, maxGap: maxGap)
    );
  }
  
  /// MACD 계산기 조회/생성
  StreamAwareOnlineMACD _getMACDCalculator(String market) {
    return _macdCalculators.putIfAbsent(
      market,
      () => StreamAwareOnlineMACD(maxGap: maxGap)
    );
  }

  // ==========================================================================
  // 📊 온라인 지표 조회 (O(1) 복잡도 - 즉시 반환)
  // ==========================================================================
  
  /// RSI 조회 (즉시 반환)
  double calculateRSI({
    required String market,
    List<double>? prices, // 하위 호환성용 (사용 안함)
    int period = 14,
  }) {
    final calculator = _rsiCalculators[market];
    if (calculator == null || !calculator.isReady || calculator.isStale) {
      return 50.0; // 기본값
    }
    return calculator.current;
  }
  
  /// MACD 조회 (즉시 반환)
  MACDResult calculateMACD({
    required String market,
    List<double>? prices, // 하위 호환성용 (사용 안함)
    int fastPeriod = 12,
    int slowPeriod = 26,
    int signalPeriod = 9,
  }) {
    final calculator = _macdCalculators[market];
    if (calculator == null || !calculator.isReady || calculator.isStale) {
      return const MACDResult(macd: 0.0, signal: 0.0, histogram: 0.0);
    }
    return calculator.current;
  }
  
  /// 🆕 다이버전스 감지 (온라인 RSI 기반)
  DivergenceResult detectDivergence({
    required String market,
    required List<double> prices,
    required List<double> indicator, // 사용 안함 (온라인 RSI 사용)
    int lookback = 5,
  }) {
    final rsiCalculator = _rsiCalculators[market];
    
    if (rsiCalculator == null || 
        !rsiCalculator.isReady || 
        prices.length < lookback) {
      return const DivergenceResult(
        isBullish: false,
        isBearish: false,
        strength: 0.0,
      );
    }
    
    // 🔥 실제 온라인 RSI 사용
    final currentRSI = rsiCalculator.current;
    final recentPrices = prices.take(lookback).toList();
    
    return _calculateDivergence(recentPrices, currentRSI);
  }
  
  /// 다이버전스 계산 (단순화된 버전)
  DivergenceResult _calculateDivergence(List<double> prices, double currentRSI) {
    if (prices.length < 2) {
      return const DivergenceResult(
        isBullish: false,
        isBearish: false, 
        strength: 0.0,
      );
    }
    
    final priceSlope = _calculateSlope(prices);
    
    bool isBullish = false;
    bool isBearish = false;
    double strength = 0.0;
    
    // 다이버전스 감지
    if (priceSlope < -0.1 && currentRSI > 50) {
      // 가격 하락 + RSI 높음 → Bullish Divergence 가능성
      isBullish = true;
      strength = min(1.0, (currentRSI - 50) / 50);
    } else if (priceSlope > 0.1 && currentRSI < 50) {
      // 가격 상승 + RSI 낮음 → Bearish Divergence 가능성
      isBearish = true;
      strength = min(1.0, (50 - currentRSI) / 50);
    }
    
    return DivergenceResult(
      isBullish: isBullish,
      isBearish: isBearish,
      strength: strength,
    );
  }

  // ==========================================================================
  // 🎯 커스텀 지표들 (기존 방식 유지)
  // ==========================================================================
  
  /// Liquidity Vortex 계산
  double calculateLiquidityVortex(
    RollingWindow<double> priceWindow,
    RollingWindow<double> volumeWindow,
  ) {
    if (priceWindow.length < 3 || volumeWindow.length < 3) return 0.0;
    
    final priceAccel = _calculateSecondDerivative(priceWindow.values);
    final volumeAccel = _calculateSecondDerivative(volumeWindow.values);
    final cps = priceWindow.length / priceWindow.span.inSeconds;
    
    return (priceAccel * volumeAccel * cps).abs();
  }
  
  /// Flash Pulse 계산
  double calculateFlashPulse(double currentVolume, RollingWindow<double> volumeWindow) {
    if (volumeWindow.length < 10) return 0.0;
    
    final recentVolumes = volumeWindow.values.take(10).toList();
    final ema = _calculateEMA(recentVolumes, 10);
    
    return currentVolume / max(ema, 1.0) - 1.0;
  }
  
  /// Micro Burst Radar 계산
  double calculateMicroBurstRadar(double currentVolume, RollingWindow<double> volumeWindow) {
    if (volumeWindow.length < 3) return 0.0;
    
    final recentVolumes = volumeWindow.values.take(3).toList();
    final mean = recentVolumes.reduce((a, b) => a + b) / recentVolumes.length;
    final variance = recentVolumes
        .map((v) => pow(v - mean, 2))
        .reduce((a, b) => a + b) / recentVolumes.length;
    final stdDev = sqrt(variance);
    
    if (stdDev == 0) return 0.0;
    
    return (currentVolume - mean) / stdDev;
  }
  
  /// Machine Rush 계산
  double calculateMachineRush(double currentVolume, double totalVolume) {
    if (totalVolume == 0) return 0.0;
    return currentVolume / totalVolume;
  }
  
  /// Jump Gate 계산
  double calculateJumpGate(double currentPrice, double low, double high, double volume) {
    if (high <= low) return 0.0;
    
    final pricePosition = (currentPrice - low) / (high - low);
    final volumeWeight = log(volume + 1) / 10.0;
    
    return pricePosition * volumeWeight;
  }

  /// ATR 계산 (기존 방식 유지)
  double calculateATR({
    required List<double> highs,
    required List<double> lows,
    required List<double> closes,
    int period = 14,
  }) {
    if (highs.length < period || lows.length < period || closes.length < period) {
      return 0.0;
    }
    
    final trueRanges = <double>[];
    
    for (int i = 1; i < closes.length; i++) {
      final high = highs[i];
      final low = lows[i];
      final prevClose = closes[i - 1];
      
      final tr1 = high - low;
      final tr2 = (high - prevClose).abs();
      final tr3 = (low - prevClose).abs();
      
      trueRanges.add(max(tr1, max(tr2, tr3)));
    }
    
    if (trueRanges.length < period) return 0.0;
    
    // 첫 번째 ATR은 단순 평균
    double atr = trueRanges.take(period).reduce((a, b) => a + b) / period;
    
    // 이후는 지수이동평균
    for (int i = period; i < trueRanges.length; i++) {
      atr = ((atr * (period - 1)) + trueRanges[i]) / period;
    }
    
    return atr;
  }

  // ==========================================================================
  // 🛠️ 헬퍼 함수들
  // ==========================================================================
  
  /// EMA 계산
  double _calculateEMA(List<double> values, int period) {
    if (values.isEmpty) return 0.0;
    if (values.length == 1) return values.first;
    
    final alpha = 2.0 / (period + 1);
    double ema = values.first;
    
    for (int i = 1; i < values.length; i++) {
      ema = (values[i] * alpha) + (ema * (1 - alpha));
    }
    
    return ema;
  }
  
  /// 2차 미분 계산
  double _calculateSecondDerivative(List<double> values) {
    if (values.length < 3) return 0.0;
    
    final recent = values.take(3).toList();
    return recent[0] - (2 * recent[1]) + recent[2];
  }
  
  /// 선형 회귀 기울기 계산
  double _calculateSlope(List<double> values) {
    if (values.length < 2) return 0.0;
    
    final n = values.length;
    double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
    
    for (int i = 0; i < n; i++) {
      sumX += i;
      sumY += values[i];
      sumXY += i * values[i];
      sumX2 += i * i;
    }
    
    final denominator = n * sumX2 - sumX * sumX;
    if (denominator == 0) return 0.0;
    
    return (n * sumXY - sumX * sumY) / denominator;
  }

  /// 동적 임계값 계산 (ATR 기반)
  double calculateDynamicThreshold({
    required double baseThreshold,
    required double atr,
    required double priceAverage,
    double multiplier = 1.0,
  }) {
    if (priceAverage == 0) return baseThreshold;
    
    final atrPercent = (atr / priceAverage) * 100;
    final volatilityFactor = max(0.5, min(2.0, atrPercent / baseThreshold));
    
    return baseThreshold * volatilityFactor * multiplier;
  }

  // ==========================================================================
  // 🔍 시스템 헬스 및 관리
  // ==========================================================================
  
  /// 전체 시스템 헬스 체크
  Map<String, dynamic> getSystemHealth() {
    final now = DateTime.now();
    final healthStatus = <String, dynamic>{
      'totalMarkets': _rsiCalculators.length,
      'staleMarkets': 0,
      'healthyMarkets': 0,
      'markets': <String, dynamic>{},
    };
    
    for (final market in _rsiCalculators.keys) {
      final rsiHealth = _rsiCalculators[market]?.getHealthStatus();
      final macdHealth = _macdCalculators[market]?.getHealthStatus();
      final lastUpdate = _lastUpdates[market];
      
      final isStale = lastUpdate != null && 
          now.difference(lastUpdate).abs() > staleThreshold;
      
      if (isStale) {
        healthStatus['staleMarkets']++;
      } else {
        healthStatus['healthyMarkets']++;
      }
      
      healthStatus['markets'][market] = {
        'rsi': rsiHealth,
        'macd': macdHealth,
        'isStale': isStale,
        'lastUpdate': lastUpdate?.toIso8601String(),
      };
    }
    
    return healthStatus;
  }
  
  /// 오래된 계산기들 정리
  void cleanup() {
    final now = DateTime.now();
    final marketsToRemove = <String>[];
    
    for (final entry in _lastUpdates.entries) {
      if (now.difference(entry.value).abs() > const Duration(hours: 1)) {
        marketsToRemove.add(entry.key);
      }
    }
    
    for (final market in marketsToRemove) {
      _rsiCalculators.remove(market);
      _macdCalculators.remove(market);
      _lastUpdates.remove(market);
    }
    
    if (marketsToRemove.isNotEmpty) {
      developer.log('AdvancedMetrics: Cleaned up ${marketsToRemove.length} stale market calculators', name: 'AdvancedMetrics');
    }
  }
  
  /// 특정 마켓 리셋
  void resetMarket(String market) {
    _rsiCalculators[market]?.reset();
    _macdCalculators[market]?.reset();
    _lastUpdates.remove(market);
  }
  
  /// 전체 리셋
  void resetAll() {
    for (final calculator in _rsiCalculators.values) {
      calculator.reset();
    }
    for (final calculator in _macdCalculators.values) {
      calculator.reset();
    }
    _lastUpdates.clear();
  }
  
  /// 캐시 정리 (하위 호환성용 - 실제로는 빈 구현)
  void clearCache() {
    // 온라인 계산에서는 캐시가 없으므로 빈 구현
  }
  
  /// 만료된 캐시 정리 (하위 호환성용 - 실제로는 cleanup 호출)
  void cleanupExpiredCache() {
    cleanup();
  }
  
  /// 캐시 통계 (하위 호환성용)
  Map<String, dynamic> getCacheStats() {
    return {
      'mode': 'online',
      'totalMarkets': _rsiCalculators.length,
      'healthyMarkets': getSystemHealth()['healthyMarkets'],
      'staleMarkets': getSystemHealth()['staleMarkets'],
    };
  }
  
  /// 리소스 정리
  void dispose() {
    _rsiCalculators.clear();
    _macdCalculators.clear();
    _lastUpdates.clear();
  }
}

// ==========================================================================
// 📊 결과 클래스들
// ==========================================================================

/// MACD 계산 결과
class MACDResult {
  final double macd;
  final double signal;
  final double histogram;
  
  const MACDResult({
    required this.macd,
    required this.signal,
    required this.histogram,
  });
  
  @override
  String toString() => 'MACD(macd: $macd, signal: $signal, histogram: $histogram)';
}

/// 다이버전스 감지 결과
class DivergenceResult {
  final bool isBullish;
  final bool isBearish;
  final double strength;
  
  const DivergenceResult({
    required this.isBullish,
    required this.isBearish,
    required this.strength,
  });
  
  bool get hasAnyDivergence => isBullish || isBearish;
  
  @override
  String toString() => 'Divergence(bullish: $isBullish, bearish: $isBearish, strength: $strength)';
}

// ==========================================================================
// 🔢 온라인 지표 계산기들 (하위 호환성용 - 실제로는 위의 StreamAware 버전 사용)
// ==========================================================================

/// 온라인 RSI 계산기 (하위 호환성)
typedef OnlineRSI = StreamAwareOnlineRSI;

/// 온라인 MACD 계산기 (하위 호환성)
typedef OnlineMACD = StreamAwareOnlineMACD;\n\n// ====== lib/core/utils/rolling_window.dart ======\n
import 'dart:collection';
import 'dart:math' as math;

/// 타임스탬프 기반 데이터 엔트리
class _Item<T extends num> {
  final T value;
  final DateTime timestamp;
  
  _Item(this.value, this.timestamp);
}

/// 🚀 O(1) 시간 복잡도로 완전 최적화된 슬라이딩 윈도우
/// 모든 통계 지표를 O(1)로 계산 (rSquared 포함)
class RollingWindow<T extends num> {
  final Duration span;
  final Queue<_Item<T>> _queue = Queue<_Item<T>>();
  
  // ==========================================================================
  // 📊 O(1) 계산을 위한 누적 변수들 (Complete Set)
  // ==========================================================================
  
  // 기본 통계용
  double _sum = 0.0;          // Σy
  double _sumSq = 0.0;        // Σy² (분산용)
  
  // 연속 증가 추적용
  int _incStreak = 0;
  T? _lastValue;
  
  // 선형 회귀 + rSquared O(1) 계산을 위한 완전한 5변수 세트
  double _sx = 0.0;           // Σx (시간)
  double _sy = 0.0;           // Σy (값) - _sum과 동일하지만 명확성을 위해 유지
  double _sxx = 0.0;          // Σx²
  double _sxy = 0.0;          // Σxy
  double _syy = 0.0;          // Σy² - _sumSq와 동일하지만 회귀용으로 명시적 관리
  
  RollingWindow({required this.span});

  // ==========================================================================
  // 📥 데이터 추가 (모든 누적값 실시간 업데이트)
  // ==========================================================================
  
  /// 새 데이터 추가 (모든 누적값 즉시 업데이트)
  void add(T value, {DateTime? timestamp}) {
    final now = timestamp ?? DateTime.now();
    _evictOld(now); // 오래된 데이터 먼저 제거
    
    // 새 데이터 추가
    _queue.addLast(_Item(value, now));
    
    // 🔥 핵심: 모든 누적값을 O(1)으로 실시간 업데이트
    final x = now.millisecondsSinceEpoch.toDouble();
    final y = value.toDouble();
    
    _sum += y;
    _sumSq += y * y;
    
    // 선형 회귀 + rSquared용 완전한 5변수 업데이트
    _sx += x;
    _sy += y;      // _sum과 동일하지만 명확성을 위해
    _sxx += x * x;
    _sxy += x * y;
    _syy += y * y; // _sumSq와 동일하지만 명확성을 위해
    
    // 연속 증가 추적 (개선된 로직)
    if (length > 1 && _lastValue != null && value > _lastValue!) {
      _incStreak++;
    } else {
      _incStreak = (length == 1) ? 1 : 0; // 첫 번째 데이터면 1, 아니면 초기화
    }
    _lastValue = value;
  }

  // ==========================================================================
  // 🗑️ 데이터 제거 (모든 누적값 실시간 차감)
  // ==========================================================================
  
  /// 오래된 데이터 제거 (모든 누적값 즉시 차감)
  void _evictOld(DateTime now) {
    final cutoff = now.subtract(span);
    
    while (_queue.isNotEmpty && _queue.first.timestamp.isBefore(cutoff)) {
      final old = _queue.removeFirst();
      
      // 🔥 핵심: 모든 누적값을 O(1)으로 실시간 차감
      final oldX = old.timestamp.millisecondsSinceEpoch.toDouble();
      final oldY = old.value.toDouble();
      
      _sum -= oldY;
      _sumSq -= oldY * oldY;
      
      // 선형 회귀 + rSquared용 완전한 5변수 차감
      _sx -= oldX;
      _sy -= oldY;
      _sxx -= oldX * oldX;
      _sxy -= oldX * oldY;
      _syy -= oldY * oldY;
    }
    
    // 연속 증가 카운트 재계산 (제거 후 필요시)
    _recalculateConsecutiveIncreases();
  }
  
  /// 연속 증가 카운트 재계산 (데이터 제거 후 필요시)
  void _recalculateConsecutiveIncreases() {
    if (_queue.length < 2) {
      _incStreak = _queue.length;
      return;
    }
    
    _incStreak = 1;
    final values = _queue.map((item) => item.value).toList();
    
    for (int i = values.length - 2; i >= 0; i--) {
      if (values[i + 1] > values[i]) {
        _incStreak++;
      } else {
        break;
      }
    }
  }

  // ==========================================================================
  // 📊 O(1)으로 계산되는 모든 통계 지표들
  // ==========================================================================
  
  // 기본 정보
  int get length => _queue.length;
  bool get isEmpty => _queue.isEmpty;
  bool get isNotEmpty => _queue.isNotEmpty;
  
  // 기본 통계 (O(1))
  double get sum => _sum;
  double get mean => isEmpty ? 0.0 : _sum / length;
  
  double get variance {
    if (length < 2) return 0.0;
    // 베셀 보정된 표본 분산: s² = (Σy² - n*μ²) / (n-1)
    final meanVal = mean;
    final sampleVariance = (_sumSq - length * meanVal * meanVal) / (length - 1);
    return math.max(0.0, sampleVariance); // 음수 방지
  }
  
  double get stdev => math.sqrt(variance);
  
  int get consecutiveIncreases => _incStreak;
  
  double zScore(num x) {
    final sd = stdev;
    return sd == 0 ? 0.0 : (x - mean) / sd;
  }
  
  double get cv {
    final meanVal = mean;
    return meanVal == 0 ? 0.0 : stdev / meanVal.abs();
  }
  
  // ==========================================================================
  // 🚀 선형 회귀 지표들 (O(1) - 5변수 공식 활용)
  // ==========================================================================
  
  /// 선형 회귀 기울기 (O(1))
  double get slope {
    final n = length;
    if (n < 2) return 0.0;
    
    final denominator = n * _sxx - _sx * _sx;
    return denominator == 0 ? 0.0 : (n * _sxy - _sx * _sy) / denominator;
  }
  
  /// 🎯 결정계수 R² (O(1) 완전 최적화!)
  /// 공식: R² = (n*Σxy - Σx*Σy)² / [(n*Σx² - (Σx)²) * (n*Σy² - (Σy)²)]
  double get rSquared {
    final n = length;
    if (n < 2) return 0.0;
    
    try {
      final numerator = n * _sxy - _sx * _sy;
      final denomX = n * _sxx - _sx * _sx;
      final denomY = n * _syy - _sy * _sy;
      final denominator = denomX * denomY;
      
      if (denominator <= 0) return 0.0;
      
      final rSquaredValue = (numerator * numerator) / denominator;
      return math.max(0.0, math.min(1.0, rSquaredValue)); // [0, 1] 범위 보장
    } catch (e) {
      return 0.0; // 계산 오류 시 안전값 반환
    }
  }
  
  /// 선형 회귀 절편 (O(1))
  double get intercept {
    final n = length;
    if (n < 2) return mean;
    
    final xMean = _sx / n;
    final yMean = _sy / n;
    return yMean - slope * xMean;
  }
  
  /// 선형 회귀 상관계수 (O(1))
  double get correlation {
    return math.sqrt(rSquared) * (slope >= 0 ? 1 : -1);
  }

  // ==========================================================================
  // 📋 데이터 접근 (필요시 사용, O(n)일 수 있음)
  // ==========================================================================
  
  List<T> get values => _queue.map((e) => e.value).toList();
  Iterable<DateTime> get timestamps => _queue.map((e) => e.timestamp);
  
  /// 최신 값
  T? get latest => _queue.isNotEmpty ? _queue.last.value : null;
  
  /// 가장 오래된 값
  T? get oldest => _queue.isNotEmpty ? _queue.first.value : null;
  
  /// 최대값 (O(n) - 캐싱 가능하지만 복잡도 증가로 현재는 단순 구현)
  T get max => _queue.isEmpty ? 0 as T : _queue.map((e) => e.value).reduce(math.max);
  
  /// 최소값 (O(n) - 캐싱 가능하지만 복잡도 증가로 현재는 단순 구현)
  T get min => _queue.isEmpty ? 0 as T : _queue.map((e) => e.value).reduce(math.min);

  // ==========================================================================
  // 🛠️ 유틸리티 메서드들
  // ==========================================================================
  
  /// 윈도우 데이터 모두 제거
  void clear() {
    _queue.clear();
    _sum = 0.0;
    _sumSq = 0.0;
    _incStreak = 0;
    _lastValue = null;
    _sx = 0.0;
    _sy = 0.0;
    _sxx = 0.0;
    _sxy = 0.0;
    _syy = 0.0;
  }
  
  /// 특정 시점까지의 데이터 강제 제거
  void evictBefore(DateTime cutoff) {
    while (_queue.isNotEmpty && _queue.first.timestamp.isBefore(cutoff)) {
      final old = _queue.removeFirst();
      
      final oldX = old.timestamp.millisecondsSinceEpoch.toDouble();
      final oldY = old.value.toDouble();
      
      _sum -= oldY;
      _sumSq -= oldY * oldY;
      _sx -= oldX;
      _sy -= oldY;
      _sxx -= oldX * oldX;
      _sxy -= oldX * oldY;
      _syy -= oldY * oldY;
    }
    
    _recalculateConsecutiveIncreases();
  }
  
  /// 윈도우 상태 정보 (디버깅용)
  Map<String, dynamic> get debugInfo => const <String, dynamic>{
    'performance': 'All O(1) optimized',
  }..addAll({
    'length': length,
    'span': '${span.inSeconds}s',
    'sum': _sum,
    'mean': mean,
    'stdev': stdev,
    'variance': variance,
    'cv': cv,
    'slope': slope,
    'rSquared': rSquared,
    'correlation': correlation,
    'consecutiveIncreases': consecutiveIncreases,
    'regressionVariables': <String, double>{
      'sx': _sx,
      'sy': _sy,
      'sxx': _sxx,
      'sxy': _sxy,
      'syy': _syy,
    },
  });
  
  /// 성능 검증 (모든 지표가 O(1)인지 확인)
  Map<String, String> get performanceProfile => const <String, String>{
    'basic_stats': 'O(1) - sum, mean, variance, stdev, cv',
    'regression': 'O(1) - slope, rSquared, intercept, correlation',
    'streak': 'O(1) - consecutiveIncreases',
    'z_score': 'O(1) - zScore calculation',
    'data_access': 'O(n) - values, timestamps, min, max (acceptable)',
    'overall': 'Fully optimized for real-time streaming',
  };
  
  @override
  String toString() {
    return 'RollingWindow(length: $length, span: ${span.inSeconds}s, '
           'mean: ${mean.toStringAsFixed(2)}, R²: ${rSquared.toStringAsFixed(3)})';
  }
}\n\n// ====== lib/core/utils/streaming_market_buffer.dart ======\n
\n\n// ====== lib/core/utils/app_life_cycle_manager.dart ======\n
// lib/core/utils/app_life_cycle_manager.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../utils/logger.dart';

/// 앱 라이프사이클과 주기적인 작업을 관리합니다.
/// 🎯 Hive Box는 백그라운드에서도 유지 (닫지 않음)
/// 🆕 외부 접근을 위한 풀 기능 API 제공
class AppLifecycleManager extends WidgetsBindingObserver {
  final Ref ref;
  Timer? _globalTimer;
  
  // 🆕 외부 접근을 위한 상태 관리
  DateTime? _appStartTime;
  DateTime? _lastResumeTime;
  DateTime? _lastPauseTime;
  int _resumeCount = 0;
  int _pauseCount = 0;
  Duration _totalForegroundTime = Duration.zero;
  Duration _totalBackgroundTime = Duration.zero;
  AppLifecycleState _currentState = AppLifecycleState.resumed;
  
  // 🆕 라이프사이클 리스너들
  final List<void Function(AppLifecycleState)> _lifecycleListeners = [];
  
  // 🆕 성능 통계
  final Map<String, dynamic> _performanceStats = {};

  AppLifecycleManager(this.ref) {
    _appStartTime = DateTime.now();
    _lastResumeTime = _appStartTime;
    WidgetsBinding.instance.addObserver(this);
    _startGlobalTimer();
    log.i('🎬 AppLifecycleManager 초기화 완료');
  }

  // ══════════════════════════════════════════════════════════
  // 🆕 외부 접근 API들
  // ══════════════════════════════════════════════════════════

  /// 🆕 현재 앱 상태 조회
  AppLifecycleState get currentState => _currentState;

  /// 🆕 앱 시작 시간
  DateTime? get appStartTime => _appStartTime;

  /// 🆕 앱 가동 시간 (업타임)
  Duration get uptime {
    if (_appStartTime == null) return Duration.zero;
    return DateTime.now().difference(_appStartTime!);
  }

  /// 🆕 포그라운드 총 시간
  Duration get totalForegroundTime {
    var total = _totalForegroundTime;
    if (_currentState == AppLifecycleState.resumed && _lastResumeTime != null) {
      total += DateTime.now().difference(_lastResumeTime!);
    }
    return total;
  }

  /// 🆕 백그라운드 총 시간
  Duration get totalBackgroundTime {
    var total = _totalBackgroundTime;
    if (_currentState == AppLifecycleState.paused && _lastPauseTime != null) {
      total += DateTime.now().difference(_lastPauseTime!);
    }
    return total;
  }

  /// 🆕 이벤트 카운터들
  int get resumeCount => _resumeCount;
  int get pauseCount => _pauseCount;

  /// 🆕 마지막 상태 변경 시간
  DateTime? get lastStateChangeTime {
    switch (_currentState) {
      case AppLifecycleState.resumed:
        return _lastResumeTime;
      case AppLifecycleState.paused:
        return _lastPauseTime;
      default:
        return null;
    }
  }

  /// 🆕 라이프사이클 리스너 추가
  void addLifecycleListener(void Function(AppLifecycleState) listener) {
    _lifecycleListeners.add(listener);
    log.d('🎧 라이프사이클 리스너 추가됨 (총 ${_lifecycleListeners.length}개)');
  }

  /// 🆕 라이프사이클 리스너 제거
  void removeLifecycleListener(void Function(AppLifecycleState) listener) {
    _lifecycleListeners.remove(listener);
    log.d('🎧 라이프사이클 리스너 제거됨 (총 ${_lifecycleListeners.length}개)');
  }

  /// 🆕 수동 새로고침/정리 작업 강제 실행
  void forceRefresh() {
    log.i('🔄 수동 새로고침 실행');
    _performPeriodicTasks();
  }

  /// 🆕 메모리 정리 강제 실행
  void forceCleanup() {
    log.i('🧹 수동 메모리 정리 실행');
    _performMemoryCleanup();
  }

  /// 🆕 성능 통계 업데이트
  void updatePerformanceStats(String key, dynamic value) {
    _performanceStats[key] = value;
    _performanceStats['lastUpdated'] = DateTime.now().toIso8601String();
  }

  /// 🆕 메모리 상태 조회
  Map<String, dynamic> getMemoryStats() {
    return {
      'uptime': uptime.toString(),
      'foregroundTime': totalForegroundTime.toString(),
      'backgroundTime': totalBackgroundTime.toString(),
      'resumeCount': resumeCount,
      'pauseCount': pauseCount,
      'currentState': _currentState.name,
      'lastStateChange': lastStateChangeTime?.toIso8601String(),
      'platformMemoryUsage': _getPlatformMemoryInfo(),
      'timestamp': DateTime.now().toIso8601String(),
    };
  }

  /// 🆕 성능 통계 조회
  Map<String, dynamic> getPerformanceStats() {
    return Map.from(_performanceStats)
      ..addAll({
        'uptime': uptime.inSeconds,
        'foregroundTimeSeconds': totalForegroundTime.inSeconds,
        'backgroundTimeSeconds': totalBackgroundTime.inSeconds,
        'resumeCount': resumeCount,
        'pauseCount': pauseCount,
        'currentState': _currentState.name,
      });
  }

  /// 🆕 전체 시스템 상태 조회 (디버깅용)
  Map<String, dynamic> getSystemStatus() {
    return {
      'app': getMemoryStats(),
      'performance': getPerformanceStats(),
      'platform': {
        'os': Platform.operatingSystem,
        'version': Platform.operatingSystemVersion,
        'locale': Platform.localeName,
      },
      'listeners': {
        'lifecycleListeners': _lifecycleListeners.length,
      },
      'timers': {
        'globalTimerActive': _globalTimer?.isActive ?? false,
      },
    };
  }

  // ══════════════════════════════════════════════════════════
  // 기존 내부 로직들
  // ══════════════════════════════════════════════════════════

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    final previousState = _currentState;
    _currentState = state;
    
    _updateStateTimes(previousState, state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        log.i('➡️ 앱이 포그라운드로 돌아왔습니다.');
        _resumeCount++;
        _lastResumeTime = DateTime.now();
        _startGlobalTimer();
        _onAppResumed();
        break;
        
      case AppLifecycleState.paused:
        log.i('⏸️ 앱이 백그라운드로 이동했습니다.');
        _pauseCount++;
        _lastPauseTime = DateTime.now();
        _stopGlobalTimer();
        _onAppPaused();
        break;
        
      case AppLifecycleState.detached:
        log.i('🔚 앱이 종료되었습니다.');
        _onAppDetached();
        break;
        
      case AppLifecycleState.inactive:
        log.d('😴 앱이 비활성 상태입니다.');
        break;
        
      case AppLifecycleState.hidden:
        log.d('🫥 앱이 숨김 상태입니다.');
        break;
    }
    
    // 🆕 외부 리스너들에게 알림
    _notifyLifecycleListeners(state);
  }

  /// 🆕 상태 전환 시간 업데이트
  void _updateStateTimes(AppLifecycleState from, AppLifecycleState to) {
    final now = DateTime.now();
    
    if (from == AppLifecycleState.resumed && _lastResumeTime != null) {
      _totalForegroundTime += now.difference(_lastResumeTime!);
    } else if (from == AppLifecycleState.paused && _lastPauseTime != null) {
      _totalBackgroundTime += now.difference(_lastPauseTime!);
    }
  }

  /// 🆕 라이프사이클 리스너들에게 알림
  void _notifyLifecycleListeners(AppLifecycleState state) {
    for (final listener in _lifecycleListeners) {
      try {
        listener(state);
      } catch (e, st) {
        log.e('라이프사이클 리스너 실행 중 오류', e, st);
      }
    }
  }

  /// 전역 타이머 시작
  void _startGlobalTimer() {
    if (_globalTimer == null || !_globalTimer!.isActive) {
      _globalTimer = Timer.periodic(const Duration(seconds: 30), (_) {
        _performPeriodicTasks();
      });
      log.i('⏰ 전역 타이머 시작: 30초 간격');
    }
  }

  /// 전역 타이머 중지
  void _stopGlobalTimer() {
    _globalTimer?.cancel();
    _globalTimer = null;
    log.d('⏹️ 전역 타이머 중지');
  }

  /// 주기적 작업 실행
  void _performPeriodicTasks() {
    log.d('🔄 전역 타이머: 주기적 작업 실행');
    
    // 여기에 주기적으로 실행할 작업들 추가
    // 예: 메모리 정리, 상태 체크, 백그라운드 동기화 등
    
    // 예시: 메모리 사용량 체크 (디버그 모드에서만)
    _checkMemoryUsage();
    
    // 🆕 성능 통계 업데이트
    updatePerformanceStats('lastPeriodicTaskRun', DateTime.now().toIso8601String());
  }

  /// 앱이 포그라운드로 돌아왔을 때
  void _onAppResumed() {
    log.i('📦 Hive Box 유지 - 백그라운드에서도 데이터 보존됨');
    
    // 포그라운드 복귀 시 필요한 작업들
    // 예: 연결 상태 확인, 데이터 새로고침 등
  }

  /// 앱이 백그라운드로 이동했을 때
  void _onAppPaused() {
    log.i('💾 백그라운드 진입 - 중요 데이터 보존 중');
    
    // 백그라운드 진입 시 필요한 작업들
    // 예: 임시 데이터 저장, 연결 정리 등
  }

  /// 앱이 완전히 종료될 때
  void _onAppDetached() {
    log.i('🧹 앱 종료 - 최종 정리 작업 수행');
    dispose();
  }

  /// 메모리 사용량 체크 (디버그용)
  void _checkMemoryUsage() {
    // 실제 구현은 플랫폼별로 다를 수 있음
    log.d('🧠 메모리 상태 체크 (개발 중)');
    
    // 🆕 플랫폼별 메모리 정보 수집
    final memInfo = _getPlatformMemoryInfo();
    updatePerformanceStats('memoryInfo', memInfo);
  }

  /// 🆕 메모리 정리 실행
  void _performMemoryCleanup() {
    // 실제 메모리 정리 로직
    log.i('🧹 메모리 정리 실행');
    
    // 예시: 가비지 컬렉션 강제 실행 (Dart에서는 제한적)
    // System.gc() 같은 것은 없지만, 불필요한 참조 정리 등을 할 수 있음
  }

  /// 🆕 플랫폼별 메모리 정보 수집
  Map<String, dynamic> _getPlatformMemoryInfo() {
    try {
      return {
        'platform': Platform.operatingSystem,
        'availableProcessors': Platform.numberOfProcessors,
        'timestamp': DateTime.now().toIso8601String(),
        // 실제 메모리 정보는 플랫폼 채널을 통해 구현 가능
        'note': 'Platform memory info implementation needed'
      };
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  /// 정리 작업
  void dispose() {
    _stopGlobalTimer();
    WidgetsBinding.instance.removeObserver(this);
    _lifecycleListeners.clear();
    log.i('🧹 AppLifecycleManager 정리 완료');
  }
}

/// AppLifecycleManager 프로바이더
final appLifecycleManagerProvider = Provider<AppLifecycleManager>((ref) {
  final manager = AppLifecycleManager(ref);
  ref.onDispose(() => manager.dispose());
  return manager;
});\n\n// ====== lib/core/utils/streaming_stats.dart ======\n
\n\n// ====== lib/core/utils/market_data_context.dart ======\n
import 'rolling_window.dart';
import 'advanced_metrics.dart';

/// 🎯 MarketDataContext - 마켓 데이터 통합 관리
/// 
/// V4.1 개선사항:
/// - 9개 파라미터 → 1개 객체로 단순화
/// - 타임프레임별 윈도우 관리
/// - 🆕 온라인 지표 연동 지원
/// - 메모리 효율적인 윈도우 관리
/// - 데이터 무결성 보장
class MarketDataContext {
  final String market;
  
  // 📊 멀티 타임프레임 가격 윈도우
  final Map<Duration, RollingWindow<double>> _priceWindows = {};
  
  // 📊 멀티 타임프레임 거래량 윈도우
  final Map<Duration, RollingWindow<double>> _volumeWindows = {};
  
  // 📊 보조 지표 윈도우들
  final RollingWindow<double>? buyRatioWindow;
  final RollingWindow<double>? intervalWindow;
  
  /// 생성자
  MarketDataContext({
    required this.market,
    required Map<Duration, RollingWindow<double>> priceWindows,
    required Map<Duration, RollingWindow<double>> volumeWindows,
    this.buyRatioWindow,
    this.intervalWindow,
  }) {
    _priceWindows.addAll(priceWindows);
    _volumeWindows.addAll(volumeWindows);
    
    // 데이터 무결성 검사
    _validateWindows();
  }

  /// 🏗️ 팩토리 생성자 - 표준 타임프레임으로 생성
  factory MarketDataContext.standard({
    required String market,
    required RollingWindow<double> priceWindow30s,
    required RollingWindow<double> priceWindow60s,
    required RollingWindow<double> priceWindow300s,
    required RollingWindow<double> volumeWindow30s,
    required RollingWindow<double> volumeWindow60s,
    required RollingWindow<double> volumeWindow300s,
    RollingWindow<double>? buyRatioWindow,
    RollingWindow<double>? intervalWindow,
  }) {
    return MarketDataContext(
      market: market,
      priceWindows: {
        const Duration(seconds: 30): priceWindow30s,
        const Duration(seconds: 60): priceWindow60s,
        const Duration(seconds: 300): priceWindow300s,
      },
      volumeWindows: {
        const Duration(seconds: 30): volumeWindow30s,
        const Duration(seconds: 60): volumeWindow60s,
        const Duration(seconds: 300): volumeWindow300s,
      },
      buyRatioWindow: buyRatioWindow,
      intervalWindow: intervalWindow,
    );
  }

  /// 🏗️ 팩토리 생성자 - 빈 컨텍스트 생성
  factory MarketDataContext.empty(String market) {
    return MarketDataContext(
      market: market,
      priceWindows: {
        const Duration(seconds: 30): RollingWindow<double>(span: const Duration(seconds: 30)),
        const Duration(seconds: 60): RollingWindow<double>(span: const Duration(seconds: 60)),
        const Duration(seconds: 300): RollingWindow<double>(span: const Duration(seconds: 300)),
      },
      volumeWindows: {
        const Duration(seconds: 30): RollingWindow<double>(span: const Duration(seconds: 30)),
        const Duration(seconds: 60): RollingWindow<double>(span: const Duration(seconds: 60)),
        const Duration(seconds: 300): RollingWindow<double>(span: const Duration(seconds: 300)),
      },
      buyRatioWindow: RollingWindow<double>(span: const Duration(seconds: 180)),
      intervalWindow: RollingWindow<double>(span: const Duration(seconds: 600)),
    );
  }

  /// 📊 가격 윈도우 조회
  RollingWindow<double> getPriceWindow(Duration timeframe) {
    final window = _priceWindows[timeframe];
    if (window == null) {
      throw ArgumentError('Price window not found for timeframe: ${timeframe.inSeconds}s');
    }
    return window;
  }

  /// 📊 거래량 윈도우 조회
  RollingWindow<double> getVolumeWindow(Duration timeframe) {
    final window = _volumeWindows[timeframe];
    if (window == null) {
      throw ArgumentError('Volume window not found for timeframe: ${timeframe.inSeconds}s');
    }
    return window;
  }

  /// 📊 사용 가능한 타임프레임 목록
  List<Duration> get availableTimeframes {
    final timeframes = <Duration>{..._priceWindows.keys, ..._volumeWindows.keys}.toList();
    timeframes.sort((a, b) => a.inSeconds.compareTo(b.inSeconds));
    return timeframes;
  }

  /// 📊 가장 긴 타임프레임 윈도우 조회
  RollingWindow<double> get longestPriceWindow {
    if (_priceWindows.isEmpty) {
      throw StateError('No price windows available');
    }
    
    final longestTimeframe = _priceWindows.keys.reduce(
      (a, b) => a.inSeconds > b.inSeconds ? a : b
    );
    return _priceWindows[longestTimeframe]!;
  }

  /// 📊 가장 긴 타임프레임 거래량 윈도우 조회
  RollingWindow<double> get longestVolumeWindow {
    if (_volumeWindows.isEmpty) {
      throw StateError('No volume windows available');
    }
    
    final longestTimeframe = _volumeWindows.keys.reduce(
      (a, b) => a.inSeconds > b.inSeconds ? a : b
    );
    return _volumeWindows[longestTimeframe]!;
  }

  /// 📊 가장 짧은 타임프레임 윈도우 조회
  RollingWindow<double> get shortestPriceWindow {
    if (_priceWindows.isEmpty) {
      throw StateError('No price windows available');
    }
    
    final shortestTimeframe = _priceWindows.keys.reduce(
      (a, b) => a.inSeconds < b.inSeconds ? a : b
    );
    return _priceWindows[shortestTimeframe]!;
  }

  /// 📊 가장 짧은 타임프레임 거래량 윈도우 조회
  RollingWindow<double> get shortestVolumeWindow {
    if (_volumeWindows.isEmpty) {
      throw StateError('No volume windows available');
    }
    
    final shortestTimeframe = _volumeWindows.keys.reduce(
      (a, b) => a.inSeconds < b.inSeconds ? a : b
    );
    return _volumeWindows[shortestTimeframe]!;
  }

  /// 🔄 데이터 업데이트
  void updateAllWindows({
    required double price,
    required double volume,
    required DateTime timestamp,
    double? buyRatio,
    double? interval,
  }) {
    // 모든 가격 윈도우 업데이트
    for (final window in _priceWindows.values) {
      window.add(price, timestamp: timestamp);
    }
    
    // 모든 거래량 윈도우 업데이트
    for (final window in _volumeWindows.values) {
      window.add(volume, timestamp: timestamp);
    }
    
    // 보조 윈도우 업데이트
    if (buyRatio != null && buyRatioWindow != null) {
      buyRatioWindow!.add(buyRatio, timestamp: timestamp);
    }
    
    if (interval != null && intervalWindow != null) {
      intervalWindow!.add(interval, timestamp: timestamp);
    }
  }

  /// 🆕 온라인 지표 업데이트를 위한 메서드
  void updateWithOnlineMetrics({
    required double price,
    required double volume,
    required DateTime timestamp,
    double? buyRatio,
    double? interval,
    required AdvancedMetrics onlineMetrics,
  }) {
    // 기본 윈도우 업데이트
    updateAllWindows(
      price: price,
      volume: volume,
      timestamp: timestamp,
      buyRatio: buyRatio,
      interval: interval,
    );
    
    // 🔥 온라인 지표도 동시 업데이트
    onlineMetrics.updatePrice(
      market: market,
      price: price,
      timestamp: timestamp,
    );
  }

  /// 📊 다중 타임프레임 트렌드 분석
  Map<String, dynamic> getMultiTimeframeTrend() {
    final trends = <String, Map<String, dynamic>>{};
    
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      if (window.length >= 2) {
        final currentPrice = window.values.first;
        final previousPrice = window.values[1];
        final changePercent = ((currentPrice - previousPrice) / previousPrice) * 100;
        
        trends[timeframe] = {
          'changePercent': changePercent,
          'trend': changePercent > 0.1 ? 'UP' : 
                   changePercent < -0.1 ? 'DOWN' : 'FLAT',
          'volatility': window.cv,
          'dataPoints': window.length,
        };
      }
    }
    
    return {
      'market': market,
      'trends': trends,
      'consensus': _calculateTrendConsensus(trends),
    };
  }

  /// 🎯 트렌드 합의 계산
  String _calculateTrendConsensus(Map<String, Map<String, dynamic>> trends) {
    if (trends.isEmpty) return 'UNKNOWN';
    
    final upCount = trends.values.where((t) => t['trend'] == 'UP').length;
    final downCount = trends.values.where((t) => t['trend'] == 'DOWN').length;
    final flatCount = trends.values.where((t) => t['trend'] == 'FLAT').length;
    
    if (upCount > downCount && upCount > flatCount) return 'BULLISH';
    if (downCount > upCount && downCount > flatCount) return 'BEARISH';
    return 'NEUTRAL';
  }

  /// 📊 윈도우 상태 정보
  Map<String, dynamic> getWindowStats() {
    final stats = <String, dynamic>{
      'market': market,
      'priceWindows': <String, dynamic>{},
      'volumeWindows': <String, dynamic>{},
      'auxWindows': <String, dynamic>{},
    };
    
    // 가격 윈도우 통계
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      stats['priceWindows'][timeframe] = {
        'length': window.length,
        'mean': window.length > 0 ? window.mean : 0.0,
        'stdev': window.length > 0 ? window.stdev : 0.0,
        'cv': window.length > 0 ? window.cv : 0.0,
        'min': window.length > 0 ? window.min : 0.0,
        'max': window.length > 0 ? window.max : 0.0,
      };
    }
    
    // 거래량 윈도우 통계
    for (final entry in _volumeWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      stats['volumeWindows'][timeframe] = {
        'length': window.length,
        'sum': window.length > 0 ? window.sum : 0.0,
        'mean': window.length > 0 ? window.mean : 0.0,
        'stdev': window.length > 0 ? window.stdev : 0.0,
      };
    }
    
    // 보조 윈도우 통계
    if (buyRatioWindow != null) {
      stats['auxWindows']['buyRatio'] = {
        'length': buyRatioWindow!.length,
        'mean': buyRatioWindow!.length > 0 ? buyRatioWindow!.mean : 0.5,
      };
    }
    
    if (intervalWindow != null) {
      stats['auxWindows']['interval'] = {
        'length': intervalWindow!.length,
        'mean': intervalWindow!.length > 0 ? intervalWindow!.mean : 0.0,
        'variance': intervalWindow!.length > 0 ? intervalWindow!.variance : 0.0,
      };
    }
    
    return stats;
  }

  /// 🔍 데이터 품질 검사 (온라인 지표 포함)
  Map<String, dynamic> getDataQuality({AdvancedMetrics? onlineMetrics}) {
    final quality = <String, dynamic>{
      'market': market,
      'overall': 'GOOD',
      'issues': <String>[],
      'scores': <String, double>{},
    };
    
    double totalScore = 0.0;
    int windowCount = 0;
    
    // 가격 윈도우 품질 검사
    for (final entry in _priceWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      double score = 1.0;
      
      if (window.isEmpty) {
        quality['issues'].add('Empty price window: $timeframe');
        score = 0.0;
      } else if (window.length < entry.key.inSeconds / 10) {
        quality['issues'].add('Insufficient data in price window: $timeframe');
        score = 0.5;
      } else if (window.stdev == 0) {
        quality['issues'].add('No price variance in window: $timeframe');
        score = 0.3;
      }
      
      quality['scores']['price_$timeframe'] = score;
      totalScore += score;
      windowCount++;
    }
    
    // 거래량 윈도우 품질 검사
    for (final entry in _volumeWindows.entries) {
      final timeframe = '${entry.key.inSeconds}s';
      final window = entry.value;
      
      double score = 1.0;
      
      if (window.isEmpty) {
        quality['issues'].add('Empty volume window: $timeframe');
        score = 0.0;
      } else if (window.sum == 0) {
        quality['issues'].add('No volume in window: $timeframe');
        score = 0.0;
      }
      
      quality['scores']['volume_$timeframe'] = score;
      totalScore += score;
      windowCount++;
    }
    
    // 🆕 온라인 지표 품질 검사
    if (onlineMetrics != null) {
      final metricsHealth = onlineMetrics.getSystemHealth();
      final marketHealth = metricsHealth['markets']?[market];
      
      if (marketHealth != null) {
        double metricsScore = 1.0;
        
        if (marketHealth['isStale'] == true) {
          quality['issues'].add('Online metrics are stale');
          metricsScore = 0.3;
        } else if (marketHealth['rsi']?['isReady'] != true) {
          quality['issues'].add('RSI calculator not ready');
          metricsScore = 0.5;
        } else if (marketHealth['macd']?['isReady'] != true) {
          quality['issues'].add('MACD calculator not ready');
          metricsScore = 0.5;
        }
        
        quality['scores']['online_metrics'] = metricsScore;
        totalScore += metricsScore;
        windowCount++;
        
        // 온라인 지표 상세 정보 추가
        quality['onlineMetrics'] = {
          'rsi': marketHealth['rsi'],
          'macd': marketHealth['macd'],
          'lastUpdate': marketHealth['lastUpdate'],
        };
      }
    }
    
    // 전체 품질 점수 계산
    final overallScore = windowCount > 0 ? totalScore / windowCount : 0.0;
    quality['overallScore'] = overallScore;
    
    if (overallScore >= 0.8) {
      quality['overall'] = 'EXCELLENT';
    } else if (overallScore >= 0.6) {
      quality['overall'] = 'GOOD';
    } else if (overallScore >= 0.4) {
      quality['overall'] = 'FAIR';
    } else {
      quality['overall'] = 'POOR';
    }
    
    return quality;
  }

  /// 🧹 윈도우 정리 (메모리 최적화 + 온라인 지표)
  void cleanup({bool force = false, AdvancedMetrics? onlineMetrics}) {
    final now = DateTime.now();
    
    for (final window in _priceWindows.values) {
      if (force || (window.timestamps.isNotEmpty && 
          now.difference(window.timestamps.last).inMinutes > 30)) {
        // 오래된 데이터나 force 플래그시 정리
        window.clear();
      }
    }
    
    for (final window in _volumeWindows.values) {
      if (force || (window.timestamps.isNotEmpty && 
          now.difference(window.timestamps.last).inMinutes > 30)) {
        window.clear();
      }
    }
    
    buyRatioWindow?.clear();
    intervalWindow?.clear();
    
    // 🆕 온라인 지표도 함께 정리
    if (onlineMetrics != null && force) {
      onlineMetrics.resetMarket(market);
    }
  }

  /// 🔍 데이터 무결성 검사
  void _validateWindows() {
    // 가격 윈도우 검사
    for (final entry in _priceWindows.entries) {
      final timeframe = entry.key;
      final window = entry.value;
      
      if (window.span != timeframe) {
        throw ArgumentError(
          'Price window span mismatch: expected ${timeframe.inSeconds}s, '
          'got ${window.span.inSeconds}s'
        );
      }
    }
    
    // 거래량 윈도우 검사
    for (final entry in _volumeWindows.entries) {
      final timeframe = entry.key;
      final window = entry.value;
      
      if (window.span != timeframe) {
        throw ArgumentError(
          'Volume window span mismatch: expected ${timeframe.inSeconds}s, '
          'got ${window.span.inSeconds}s'
        );
      }
    }
  }
}\n\n// ====== lib/core/utils/circular_buffer.dart ======\n
\n\n// ====== lib/core/utils/analysis_isolate_manager.dart ======\n
\n\n// ====== lib/core/extensions/result.dart ======\n
import 'package:meta/meta.dart';
import '../error/app_exception.dart';

/// Either 스타일의 결과 타입.
///
/// - `Ok<T, E>`: 성공 시 데이터를 담습니다.
/// - `Err<T, E>`: 실패 시 예외를 담습니다.
@immutable
sealed class Result<T, E extends AppException> {
  const Result();

  /// 성공/실패에 따라 분기 처리합니다.
  R when<R>({
    required R Function(T value) ok,
    required R Function(E error) err,
  }) {
    if (this is Ok<T, E>) {
      return ok((this as Ok<T, E>).value);
    } else {
      return err((this as Err<T, E>).error);
    }
  }

  /// 성공 여부
  bool get isOk => this is Ok<T, E>;

  /// 실패 여부
  bool get isErr => this is Err<T, E>;

  /// 성공 값 (없으면 null)
  T? get valueOrNull => isOk ? (this as Ok<T, E>).value : null;

  /// 실패 예외 (없으면 null)
  E? get errorOrNull => isErr ? (this as Err<T, E>).error : null;

  /// 성공 값을 매핑합니다.
  Result<U, E> map<U>(U Function(T value) f) {
    if (this is Ok<T, E>) {
      return Ok<U, E>(f((this as Ok<T, E>).value));
    } else {
      return Err<U, E>((this as Err<T, E>).error);
    }
  }

  /// 실패 예외를 다른 타입으로 매핑합니다.
  /// 성공 시에도 새로운 에러 타입 F 를 사용하도록 합니다.
  Result<T, F> mapErr<F extends AppException>(F Function(E error) f) {
    if (this is Err<T, E>) {
      final err = (this as Err<T, E>).error;
      return Err<T, F>(f(err));
    }
    return Ok<T, F>((this as Ok<T, E>).value);
  }

  /// 성공 시 비동기 후속 작업을 수행합니다.
  Future<Result<U, E>> thenAsync<U>(Future<U> Function(T value) f) async {
    if (this is Ok<T, E>) {
      final T value = (this as Ok<T, E>).value;
      try {
        final u = await f(value);
        return Ok<U, E>(u);
      } on AppException catch (e) {
        final E errVal = e is E ? e : AppException(e.message) as E;
        return Err<U, E>(errVal);
      } catch (e) {
        final E errVal = AppException(e.toString()) as E;
        return Err<U, E>(errVal);
      }
    } else {
      return Err<U, E>((this as Err<T, E>).error);
    }
  }

  @override
  String toString() {
    if (this is Ok<T, E>) {
      return 'Ok(${(this as Ok<T, E>).value})';
    } else {
      return 'Err(${(this as Err<T, E>).error})';
    }
  }
}

/// 성공 결과를 담습니다.
class Ok<T, E extends AppException> extends Result<T, E> {
  final T value;
  const Ok(this.value);
}

/// 실패 결과를 담습니다.
class Err<T, E extends AppException> extends Result<T, E> {
  final E error;
  const Err(this.error);
}
\n\n// ====== lib/core/error/app_exception.dart ======\n
// lib/core/error/app_exception.dart

import 'package:dio/dio.dart';

/// 최상위 앱 예외
/// - 모든 커스텀 예외는 이 클래스를 상속해주세요.
class AppException implements Exception {
  /// 사용자에게 노출할 메시지
  final String message;

  /// 내부 로깅 또는 식별용 코드 (nullable)
  final String? code;

  /// HTTP 상태 코드 등 추가 상태 정보
  final int? statusCode;

  /// 원본 예외(있는 경우)
  final Exception? originalException;

  const AppException(
    this.message, {
    this.code,
    this.statusCode,
    this.originalException,
  });

  @override
  String toString() {
    final parts = <String>[];
    if (code != null) parts.add('code: $code');
    if (statusCode != null) parts.add('status: $statusCode');
    parts.add('message: $message');
    return 'AppException(${parts.join(', ')})';
  }
}

/// REST/HTTP 호출 중 발생한 예외
class NetworkException extends AppException {
  const NetworkException(
    String message, {
    String? code,
    int? statusCode,
    Exception? originalException,
  }) : super(
          message,
          code: code,
          statusCode: statusCode,
          originalException: originalException,
        );

  /// DioException → NetworkException 변환 헬퍼
  factory NetworkException.fromDio(DioException dioError) {
    final msg = dioError.message ?? dioError.toString();
    return NetworkException(
      msg,
      code: dioError.response?.statusMessage,
      statusCode: dioError.response?.statusCode,
      originalException: dioError,
    );
  }
}

/// WebSocket 연결/통신 중 발생한 예외
class WebSocketException extends AppException {
  /// WS 서버가 보낸 이유 문자열 (nullable)
  final String? reason;

  const WebSocketException(
    String message, {
    this.reason,
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );

  @override
  String toString() {
    final parts = <String>[];
    if (reason != null) parts.add('reason: $reason');
    parts.add('message: $message');
    return 'WebSocketException(${parts.join(', ')})';
  }
}

/// 서버로부터 Rate Limit(HTTP 429 등) 응답을 받았을 때
class RateLimitException extends AppException {
  /// 재시도까지 대기해야 할 시간
  final Duration retryAfter;

  const RateLimitException(
    String message, {
    required this.retryAfter,
    String? code,
    int? statusCode,
  }) : super(
          message,
          code: code,
          statusCode: statusCode,
        );

  @override
  String toString() =>
      'RateLimitException(retryAfter: ${retryAfter.inSeconds}s, message: $message)';
}

/// JSON 파싱 또는 데이터 변환 중 발생한 예외
class DataParsingException extends AppException {
  const DataParsingException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 인메모리 캐시에서 키를 찾지 못했을 때
class CacheMissException extends AppException {
  const CacheMissException([String message = 'Cache miss'])
      : super(message);
}

// ──────────────────────────────────────────────────────────────────────────
// 도메인 특화 예외
// ──────────────────────────────────────────────────────────────────────────

/// 체결(Trade) 데이터 유효성 검사 오류
class TradeException extends AppException {
  const TradeException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 호가(Order Book) 데이터 오류
class OrderBookException extends AppException {
  const OrderBookException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 캔들(Candle) 데이터 파싱 오류
class CandleException extends DataParsingException {
  const CandleException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}

/// 현재가(Ticker) 데이터 파싱 오류
class TickerException extends DataParsingException {
  const TickerException(
    String message, {
    Exception? originalException,
  }) : super(
          message,
          originalException: originalException,
        );
}
\n\n// ====== lib/core/event/app_event.dart ======\n
// lib/core/event/app_event.dart

import 'package:equatable/equatable.dart';
import 'package:uuid/uuid.dart';

typedef Json = Map<String, dynamic>;

/// 애플리케이션 전역 이벤트의 베이스 클래스
/// - id     : UUID v4
/// - ts     : UTC 밀리초 타임스탬프
/// - payload: 자유 형태 JSON
class AppEvent extends Equatable {
  /// 고유 ID (UUID v4)
  final String id;

  /// UTC 밀리초 타임스탬프
  final int ts;

  /// 페이로드 데이터 (불변)
  final Json payload;

  const AppEvent({
    required this.id,
    required this.ts,
    required this.payload,
  });

  /// 현재 시각을 기준으로 id·ts를 자동 생성합니다.
  factory AppEvent.now(Json payload) {
    final nowUtcMs = DateTime.now().toUtc().millisecondsSinceEpoch;
    return AppEvent(
      id: const Uuid().v4(),
      ts: nowUtcMs,
      payload: Map<String, dynamic>.of(payload), // 방어적 복사
    );
  }

  /// UTC ms → 로컬 DateTime
  DateTime get timestamp =>
      DateTime.fromMillisecondsSinceEpoch(ts, isUtc: true).toLocal();

  /// JSON 직렬화 (payload도 복사하여 노출)
  Json toJson() => {
        'id': id,
        'ts': ts,
        'payload': Map<String, dynamic>.of(payload),
      };

  /// JSON 역직렬화
  factory AppEvent.fromJson(Json json) {
    return AppEvent(
      id: json['id'] as String,
      ts: json['ts'] as int,
      payload: Map<String, dynamic>.of(json['payload'] as Json),
    );
  }

  /// 복사본 생성 (immutable 유지)
  AppEvent copyWith({
    String? id,
    int? ts,
    Json? payload,
  }) =>
      AppEvent(
        id: id ?? this.id,
        ts: ts ?? this.ts,
        payload: payload != null ? Map<String, dynamic>.of(payload) : this.payload,
      );

  @override
  List<Object?> get props => [id, ts, payload];
}
\n\n// ====== lib/core/services/hive_service.dart ======\n
// lib/core/services/hive_service.dart

import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../utils/logger.dart';
import '../../data/models/trade_dto.dart';
import '../../data/models/market_mood_dto.dart'; // 🔥 MarketMood DTO 추가

/// 🎯 Hive 전역 관리 서비스 (싱글톤)
/// - 앱 시작 시 한 번만 초기화
/// - 모든 TypeAdapter 등록 및 Box 관리
/// - 백그라운드에서도 Box 유지 (닫지 않음)
/// - AppConfig에 의존하지 않는 완전 독립 서비스
class HiveService {
  // 싱글톤 패턴
  HiveService._();
  static final HiveService _instance = HiveService._();
  factory HiveService() => _instance;

  // 🏷️ Box 이름 상수 (HiveService 자체 관리)
  static const String _tradeBoxName = 'trades';
  static const String _marketMoodVolumeBoxName = 'market_mood_volume'; // 🔥 추가
  static const String _marketMoodCacheBoxName = 'market_mood_cache';   // 🔥 추가

  // Box 인스턴스 캐싱
  late final Box<TradeDto> _tradeBox;
  late final Box<TimestampedVolume> _marketMoodVolumeBox; // 🔥 추가
  late final Box _marketMoodCacheBox; // 🔥 추가 (dynamic)
  
  // 초기화 상태 관리
  bool _initialized = false;
  Future<void>? _initFuture;

  /// 🎯 Trade Box getter (이미 열려있다는 전제)
  Box<TradeDto> get tradeBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using tradeBox.'
      );
    }
    return _tradeBox;
  }

  /// 🔥 MarketMood Volume Box getter (이미 열려있다는 전제)
  Box<TimestampedVolume> get marketMoodVolumeBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using marketMoodVolumeBox.'
      );
    }
    return _marketMoodVolumeBox;
  }

  /// 🔥 MarketMood Cache Box getter (이미 열려있다는 전제)
  Box get marketMoodCacheBox {
    if (!_initialized) {
      throw StateError(
        'HiveService has not been initialized. Call HiveService.init() before using marketMoodCacheBox.'
      );
    }
    return _marketMoodCacheBox;
  }

  /// 🚀 Hive 초기화 (앱 시작 시 단 한 번만 호출)
  Future<void> init() async {
    if (_initialized) {
      log.i('[HiveService] already initialized, skipping');
      return;
    }

    // 동시 호출 방어 - race condition 완전 차단
    if (_initFuture != null) {
      log.d('[HiveService] init already in progress, waiting...');
      return _initFuture;
    }

    _initFuture = _doInit();
    await _initFuture;
  }

  /// 🔧 실제 초기화 로직
  Future<void> _doInit() async {
    try {
      // 1. Hive 플랫폼 초기화
      await Hive.initFlutter();
      log.i('[HiveService] Hive.initFlutter() completed');

      // 2. TypeAdapter 등록 (중복 방지)
      _registerAdapters();

      // 3. 모든 Box 열기 및 캐싱
      _tradeBox = await Hive.openBox<TradeDto>(_tradeBoxName);
      log.i('[HiveService] "$_tradeBoxName" box opened and cached');

      _marketMoodVolumeBox = await Hive.openBox<TimestampedVolume>(_marketMoodVolumeBoxName); // 🔥 추가
      log.i('[HiveService] "$_marketMoodVolumeBoxName" box opened and cached');

      _marketMoodCacheBox = await Hive.openBox(_marketMoodCacheBoxName); // 🔥 추가
      log.i('[HiveService] "$_marketMoodCacheBoxName" box opened and cached');

      _initialized = true;
      log.i('[HiveService] ✅ initialized successfully');
      
    } catch (e, st) {
      log.e('[HiveService] ❌ init failed', e, st);
      _initialized = false;
      rethrow; // 초기화 실패 시 상위에서 처리할 수 있도록
    } finally {
      // 초기화 완료 후 Future 해제 (재시도 가능하도록)
      _initFuture = null;
    }
  }

  /// 📋 모든 TypeAdapter 등록 (중복 방지)
  void _registerAdapters() {
    // Trade Adapter
    final tradeAdapter = TradeDtoAdapter();
    if (!Hive.isAdapterRegistered(tradeAdapter.typeId)) {
      Hive.registerAdapter(tradeAdapter);
      log.i('[HiveService] TradeDtoAdapter registered (typeId: ${tradeAdapter.typeId})');
    } else {
      log.d('[HiveService] TradeDtoAdapter already registered');
    }
    
    // 🔥 TimestampedVolume Adapter 추가
    final volumeAdapter = TimestampedVolumeAdapter();
    if (!Hive.isAdapterRegistered(volumeAdapter.typeId)) {
      Hive.registerAdapter(volumeAdapter);
      log.i('[HiveService] TimestampedVolumeAdapter registered (typeId: ${volumeAdapter.typeId})');
    } else {
      log.d('[HiveService] TimestampedVolumeAdapter already registered');
    }
    
    // 📝 향후 다른 어댑터 추가 시 여기에 추가
  }

  /// 🧹 리소스 정리 (디버그 모드에서만 실행)
  /// 일반적으로 모바일 앱에서는 OS가 자동 정리하므로 호출 불필요
  Future<void> dispose() async {
    if (!kDebugMode) {
      log.d('[HiveService] dispose skipped in production mode');
      return;
    }
    
    if (!_initialized) {
      log.d('[HiveService] not initialized, skip dispose');
      return;
    }

    try {
      if (_tradeBox.isOpen) {
        await _tradeBox.close();
        log.i('[HiveService] "$_tradeBoxName" box closed');
      }

      // 🔥 MarketMood Box들 정리 추가
      if (_marketMoodVolumeBox.isOpen) {
        await _marketMoodVolumeBox.close();
        log.i('[HiveService] "$_marketMoodVolumeBoxName" box closed');
      }

      if (_marketMoodCacheBox.isOpen) {
        await _marketMoodCacheBox.close();
        log.i('[HiveService] "$_marketMoodCacheBoxName" box closed');
      }

      await Hive.close();
      log.i('[HiveService] 🧹 all Hive resources disposed');
      
    } catch (e, st) {
      log.e('[HiveService] dispose failed', e, st);
    } finally {
      _initialized = false;
    }
  }

  /// 🔍 디버깅용: 현재 상태 정보
  Map<String, Object> get debugInfo => {
    'initialized': _initialized,
    'tradeBox': {
      'name': _tradeBoxName,
      'open': _initialized ? _tradeBox.isOpen : false,
      'length': _initialized ? _tradeBox.length : 0,
    },
    'marketMoodVolumeBox': { // 🔥 추가
      'name': _marketMoodVolumeBoxName,
      'open': _initialized ? _marketMoodVolumeBox.isOpen : false,
      'length': _initialized ? _marketMoodVolumeBox.length : 0,
    },
    'marketMoodCacheBox': { // 🔥 추가
      'name': _marketMoodCacheBoxName,
      'open': _initialized ? _marketMoodCacheBox.isOpen : false,
      'length': _initialized ? _marketMoodCacheBox.length : 0,
    },
    'initInProgress': _initFuture != null,
  };

  /// 🔍 디버깅용: 상태 로깅
  void logStatus() {
    log.d('[HiveService] Status: $debugInfo');
  }

  /// 🔍 디버깅용: Box 상세 정보 (개발 시 유용)
  void logBoxDetails() {
    if (!_initialized) {
      log.w('[HiveService] Cannot log box details - not initialized');
      return;
    }
    
    log.d('[HiveService] Box Details:');
    log.d('  Trade Box:');
    log.d('    - Name: $_tradeBoxName');
    log.d('    - Length: ${_tradeBox.length}');
    log.d('    - Keys sample: ${_tradeBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_tradeBox.isOpen}');
    
    // 🔥 MarketMood Box 정보 추가
    log.d('  MarketMood Volume Box:');
    log.d('    - Name: $_marketMoodVolumeBoxName');
    log.d('    - Length: ${_marketMoodVolumeBox.length}');
    log.d('    - Keys sample: ${_marketMoodVolumeBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_marketMoodVolumeBox.isOpen}');
    
    log.d('  MarketMood Cache Box:');
    log.d('    - Name: $_marketMoodCacheBoxName');
    log.d('    - Length: ${_marketMoodCacheBox.length}');
    log.d('    - Keys sample: ${_marketMoodCacheBox.keys.take(5).toList()}');
    log.d('    - Is open: ${_marketMoodCacheBox.isOpen}');
  }
}