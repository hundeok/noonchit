\n\n// ====== lib/core/di/sector_provider.dart ======\n
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../config/app_config.dart';
import '../utils/logger.dart';
import '../common/time_frame_manager.dart'; // 🔥 간소화된 TimeFrame 시스템 사용
import '../common/time_frame_types.dart';   // 🔥 공통 타입 사용
import 'volume_provider.dart';
import '../../domain/entities/volume.dart';
import '../../shared/widgets/sector_classification.dart';

// ══════════════════════════════════════════════════════════════════════════════
// 📋 섹터 이벤트 클래스 (기존 유지)
// ══════════════════════════════════════════════════════════════════════════════

@immutable
class SectorVolumeEvent {
  final List<Volume> volumes;
  final TimeFrame timeFrame;
  final bool isReset;
  final DateTime? resetTime;
  final DateTime eventTime;

  const SectorVolumeEvent({
    required this.volumes,
    required this.timeFrame,
    this.isReset = false,
    this.resetTime,
    required this.eventTime,
  });

  factory SectorVolumeEvent.data({
    required List<Volume> volumes,
    required TimeFrame timeFrame,
  }) {
    return SectorVolumeEvent(
      volumes: volumes,
      timeFrame: timeFrame,
      eventTime: DateTime.now(),
    );
  }

  factory SectorVolumeEvent.reset({
    required TimeFrame timeFrame,
    DateTime? resetTime,
  }) {
    final now = resetTime ?? DateTime.now();
    return SectorVolumeEvent(
      volumes: const [],
      timeFrame: timeFrame,
      isReset: true,
      resetTime: now,
      eventTime: now,
    );
  }
}

// ══════════════════════════════════════════════════════════════════════════════
// 🔧 기본 Provider들
// ══════════════════════════════════════════════════════════════════════════════

/// 섹터 분류 Provider (기존 유지)
final sectorClassificationProvider = ChangeNotifierProvider<SectorClassificationProvider>(
  (ref) => SectorClassificationProvider(),
);

/// 🔥 섹터 전용 시간대 Provider (Volume과 독립)
final selectedSectorTimeFrameProvider = StateProvider<TimeFrame>((ref) => TimeFrame.min1);

// ══════════════════════════════════════════════════════════════════════════════
// 🎯 메인 섹터 볼륨 Provider - 간소화된 시스템 연동
// ══════════════════════════════════════════════════════════════════════════════

/// 섹터 볼륨 데이터 Provider (간소화된 TimeFrame 시스템 연동)
final sectorVolumeDataProvider = StreamProvider<SectorVolumeEvent>((ref) async* {
  ref.keepAlive();
  
  // 🔥 섹터 전용 시간대 Provider 사용 (Volume과 독립)
  final selectedTimeFrame = ref.watch(selectedSectorTimeFrameProvider);
  final sectorClassification = ref.watch(sectorClassificationProvider);
  
  // 🔥 간소화된 Volume 시간대별 컨트롤러에서 직접 받기
  final controllers = ref.read(volumeTimeFrameControllersProvider);
  final controller = controllers[selectedTimeFrame];
  
  if (controller == null) {
    if (AppConfig.enableTradeLog) {
      log.e('💥 Sector: Volume controller not found for $selectedTimeFrame');
    }
    return;
  }
  
  // Volume 스트림 바인더 활성화
  await ref.read(volumeStreamBinderProvider);
  
  if (AppConfig.enableTradeLog) {
    log.i('🔥 Sector stream started: $selectedTimeFrame');
  }
  
  await for (final volumeEvent in controller.stream) {
    if (volumeEvent.isReset) {
      yield SectorVolumeEvent.reset(
        timeFrame: volumeEvent.timeFrame,
        resetTime: volumeEvent.resetTime,
      );
    } else {
      // 섹터별 집계
      final sectorVolumes = _aggregateVolumesBySector(
        volumeEvent.volumes,
        sectorClassification.currentSectors,
      );
      
      yield SectorVolumeEvent.data(
        volumes: sectorVolumes,
        timeFrame: volumeEvent.timeFrame,
      );
    }
  }
});

/// 현재 섹터 볼륨 리스트 (기존 유지)
final currentSectorVolumeListProvider = Provider<List<Volume>>((ref) {
  final sectorEvent = ref.watch(sectorVolumeDataProvider).valueOrNull;
  return sectorEvent?.volumes ?? [];
});

// ══════════════════════════════════════════════════════════════════════════════
// 🔄 섹터별 집계 로직 (기존 유지)
// ══════════════════════════════════════════════════════════════════════════════

List<Volume> _aggregateVolumesBySector(
  List<Volume> coinVolumes,
  Map<String, List<String>> sectorMapping,
) {
  if (coinVolumes.isEmpty) return [];
  
  final Map<String, double> sectorVolumeMap = {};
  final sampleVolume = coinVolumes.first;
  
  // 각 코인을 해당 섹터에 합산
  for (final coinVolume in coinVolumes) {
    final ticker = coinVolume.market.replaceFirst('KRW-', '');
    
    sectorMapping.forEach((sectorName, coins) {
      if (coins.contains(ticker)) {
        sectorVolumeMap[sectorName] = 
          (sectorVolumeMap[sectorName] ?? 0.0) + coinVolume.totalVolume;
      }
    });
  }
  
  // 볼륨이 0인 섹터 제거하고 Volume 객체로 변환
  final sectorVolumes = sectorVolumeMap.entries
      .where((entry) => entry.value > 0)
      .map((entry) => Volume(
            market: 'SECTOR-${entry.key}',
            totalVolume: entry.value,
            lastUpdatedMs: sampleVolume.lastUpdatedMs,
            timeFrame: sampleVolume.timeFrame,
            timeFrameStartMs: sampleVolume.timeFrameStartMs,
          ))
      .toList();
  
  // 볼륨 순 정렬
  sectorVolumes.sort((a, b) => b.totalVolume.compareTo(a.totalVolume));
  
  return sectorVolumes;
}\n\n// ====== lib/shared/widgets/sector_logo_provider.dart ======\n
// 🚀 캐시 시스템이 적용된 섹터 로고 프로바이더

import 'package:flutter/material.dart';

/// 🎨 섹터 로고 관리 전용 Provider
/// 캐시 시스템 + WebP 지원
class SectorLogoProvider {
  
  /// 🆕 메모리 캐시 (위젯 레벨 캐싱)
  static final Map<String, Widget> _widgetCache = {};
  
  /// 🆕 캐시 설정
  static const int _maxCacheObjects = 50; // 최대 50개 아이콘 캐시
  
  /// 🚀 캐시된 섹터 로고 위젯 생성 (메인 함수)
  static Widget buildSectorIcon({
    required int sectorNumber,
    double size = 40.0,
  }) {
    final cacheKey = 'sector_${sectorNumber}_${size.toInt()}';
    
    // 🎯 메모리 캐시에서 먼저 확인
    if (_widgetCache.containsKey(cacheKey)) {
      return _widgetCache[cacheKey]!;
    }
    
    // 새로운 위젯 생성
    final logoWidget = _buildSectorIconWidget(
      sectorNumber: sectorNumber,
      size: size,
    );
    
    // 🎯 메모리 캐시에 저장 (용량 제한)
    if (_widgetCache.length < _maxCacheObjects) {
      _widgetCache[cacheKey] = logoWidget;
    }
    
    return logoWidget;
  }

  /// 🎯 실제 섹터 아이콘 위젯 생성
  static Widget _buildSectorIconWidget({
    required int sectorNumber,
    required double size,
  }) {
    return SizedBox(
      width: size,
      height: size,
      child: Image.asset(
        'assets/icons/sector/sector$sectorNumber.webp',
        width: size,
        height: size,
        fit: BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          return Container(
            width: size,
            height: size,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.grey.shade300,
            ),
            child: Center(
              child: Text(
                '📊',
                style: TextStyle(fontSize: size * 0.5),
              ),
            ),
          );
        },
      ),
    );
  }

  /// 🧹 캐시 정리 함수들
  static void clearCache() {
    _widgetCache.clear();
  }
  
  static void clearSpecificCache(int sectorNumber) {
    _widgetCache.removeWhere((key, value) => key.startsWith('sector_$sectorNumber'));
  }
  
  static int getCacheSize() {
    return _widgetCache.length;
  }

  /// 🎯 섹터 번호 유효성 검사 (✅ 수정된 부분)
  static bool isValidSectorNumber(int sectorNumber) {
    // 46을 47로 변경하여 새로운 섹터 번호를 유효한 범위에 포함시킵니다.
    return sectorNumber >= 1 && sectorNumber <= 47;
  }

  /// 🔧 디버깅용: 캐시 상태 정보
  static Map<String, dynamic> getCacheStatus() {
    return {
      'totalCached': _widgetCache.length,
      'maxCapacity': _maxCacheObjects,
      'cacheKeys': _widgetCache.keys.toList(),
      'memoryUsage': '${(_widgetCache.length / _maxCacheObjects * 100).toStringAsFixed(1)}%',
    };
  }
}\n\n// ====== lib/shared/widgets/sector_names.dart ======\n
// 🆕 실제 섹터 분류에 맞춘 네이밍 매핑

import '../../domain/entities/app_settings.dart';

class SectorNames {
  // 🎯 상세 분류 (28개 섹터) 네이밍 매핑
  static const Map<String, Map<String, String>> detailedSectorNaming = {
    // ==================== 기본 그룹 ====================
    '비트코인 그룹': {
      'ticker': 'BTC-GRP',
      'korean': '비트코인 그룹',
      'english': 'Bitcoin Group',
    },
    '이더리움 그룹': {
      'ticker': 'ETH-GRP',
      'korean': '이더리움 그룹',
      'english': 'Ethereum Group',
    },
    '스테이킹': {
      'ticker': 'STAKE',
      'korean': '스테이킹',
      'english': 'Staking',
    },

    // ==================== 블록체인 아키텍처 ====================
    '모놀리식 블록체인': {
      'ticker': 'MONO',
      'korean': '모놀리식 블록체인',
      'english': 'Monolithic Blockchain',
    },
    '모듈러 블록체인': {
      'ticker': 'MODU',
      'korean': '모듈러 블록체인',
      'english': 'Modular Blockchain',
    },

    // ==================== 스테이블코인 생태계 ====================
    '스테이블 코인': {
      'ticker': 'STABLE',
      'korean': '스테이블 코인',
      'english': 'Stablecoin',
    },

    // ==================== DeFi 생태계 ====================
    'DEX/애그리게이터': {
      'ticker': 'DEX',
      'korean': 'DEX/애그리게이터',
      'english': 'DEX/Aggregator',
    },
    '랜딩': {
      'ticker': 'LEND',
      'korean': '랜딩',
      'english': 'Lending',
    },
    '유동화 스테이킹/리스테이킹': {
      'ticker': 'LSTAKE',
      'korean': '유동화 스테이킹/리스테이킹',
      'english': 'Liquid Staking/Restaking',
    },
    'RWA': {
      'ticker': 'RWA',
      'korean': 'RWA',
      'english': 'Real World Assets',
    },

    // ==================== 인프라 & 기술 ====================
    '지급결제 인프라': {
      'ticker': 'PAY',
      'korean': '지급결제 인프라',
      'english': 'Payment Infrastructure',
    },
    '상호운용성/브릿지': {
      'ticker': 'BRIDGE',
      'korean': '상호운용성/브릿지',
      'english': 'Interoperability/Bridge',
    },
    '엔터프라이즈 블록체인': {
      'ticker': 'ENTER',
      'korean': '엔터프라이즈 블록체인',
      'english': 'Enterprise Blockchain',
    },
    '오라클': {
      'ticker': 'ORACLE',
      'korean': '오라클',
      'english': 'Oracle',
    },
    '데이터 인프라': {
      'ticker': 'DATA',
      'korean': '데이터 인프라',
      'english': 'Data Infrastructure',
    },
    '스토리지': {
      'ticker': 'STORAGE',
      'korean': '스토리지',
      'english': 'Storage',
    },
    'AI': {
      'ticker': 'AI',
      'korean': 'AI',
      'english': 'Artificial Intelligence',
    },

    // ==================== 엔터테인먼트 & 게임 ====================
    '메타버스': {
      'ticker': 'META',
      'korean': '메타버스',
      'english': 'Metaverse',
    },
    'NFT/게임': {
      'ticker': 'NFT-GAME',
      'korean': 'NFT/게임',
      'english': 'NFT/Gaming',
    },

    // ==================== 미디어 & 콘텐츠 ====================
    '미디어/스트리밍': {
      'ticker': 'MEDIA',
      'korean': '미디어/스트리밍',
      'english': 'Media/Streaming',
    },
    '광고': {
      'ticker': 'AD',
      'korean': '광고',
      'english': 'Advertising',
    },
    '교육/기타 콘텐츠': {
      'ticker': 'EDU',
      'korean': '교육/기타 콘텐츠',
      'english': 'Education/Content',
    },

    // ==================== 소셜 & 커뮤니티 ====================
    '소셜/DAO': {
      'ticker': 'SOCIAL',
      'korean': '소셜/DAO',
      'english': 'Social/DAO',
    },
    '팬토큰': {
      'ticker': 'FAN',
      'korean': '팬토큰',
      'english': 'Fan Token',
    },
    '밈': {
      'ticker': 'MEME',
      'korean': '밈',
      'english': 'Meme',
    },

    // ==================== 특수 용도 ====================
    'DID': {
      'ticker': 'DID',
      'korean': 'DID',
      'english': 'Decentralized Identity',
    },
    '의료': {
      'ticker': 'MED',
      'korean': '의료',
      'english': 'Medical',
    },
    '월렛/메세징': {
      'ticker': 'WALLET',
      'korean': '월렛/메세징',
      'english': 'Wallet/Messaging',
    },
  };

  // 🎯 기본 분류 (18개 섹터) 네이밍 매핑 - 🆕 신규상장 5개 섹터 추가
  static const Map<String, Map<String, String>> basicSectorNaming = {
    '메이저 코인': {
      'ticker': 'MAJOR',
      'korean': '메이저 코인',
      'english': 'Major Coins',
    },
    '비트코인 계열': {
      'ticker': 'BTC-FAM',
      'korean': '비트코인 계열',
      'english': 'Bitcoin Family',
    },
    '이더리움 생태계': {
      'ticker': 'ETH-ECO',
      'korean': '이더리움 생태계',
      'english': 'Ethereum Ecosystem',
    },
    '레이어1 블록체인': {
      'ticker': 'L1',
      'korean': '레이어1 블록체인',
      'english': 'Layer 1 Blockchain',
    },
    '고 시총': {
      'ticker': 'LARGE-CAP',
      'korean': '고 시총',
      'english': 'Large Market Cap',
    },
    '중 시총': {
      'ticker': 'MID-CAP',
      'korean': '중 시총',
      'english': 'Mid Market Cap',
    },
    '저 시총': {
      'ticker': 'SMALL-CAP',
      'korean': '저 시총',
      'english': 'Small Market Cap',
    },
    '마이너 알트코인': {
      'ticker': 'MINOR-ALT',
      'korean': '마이너 알트코인',
      'english': 'Minor Altcoins',
    },
    'DeFi 토큰': {
      'ticker': 'DEFI',
      'korean': 'DeFi 토큰',
      'english': 'DeFi Tokens',
    },
    '스테이블코인': {
      'ticker': 'STABLE',
      'korean': '스테이블코인',
      'english': 'Stablecoins',
    },
    '게임/NFT/메타버스': {
      'ticker': 'GAMING',
      'korean': '게임/NFT/메타버스',
      'english': 'Gaming/NFT/Metaverse',
    },
    '한국 프로젝트': {
      'ticker': 'KOREA',
      'korean': '한국 프로젝트',
      'english': 'Korean Projects',
    },
    '솔라나 생태계': {
      'ticker': 'SOL-ECO',
      'korean': '솔라나 생태계',
      'english': 'Solana Ecosystem',
    },
    'AI/기술 토큰': {
      'ticker': 'AI-TECH',
      'korean': 'AI/기술 토큰',
      'english': 'AI/Tech Tokens',
    },

    // 🆕 신규상장 섹터
    '2023년 신규상장': {
      'ticker': 'NEW-23',
      'korean': '2023년 신규상장',
      'english': '2023 New Listings',
    },
    '2024년 상반기 신규상장': {
      'ticker': 'NEW-24H1',
      'korean': '2024년 상반기 신규상장',
      'english': '2024 H1 New Listings',
    },
    '2024년 하반기 신규상장': {
      'ticker': 'NEW-24H2',
      'korean': '2024년 하반기 신규상장',
      'english': '2024 H2 New Listings',
    },
    '2025년 상반기 신규상장': {
      'ticker': 'NEW-25H1',
      'korean': '2025년 상반기 신규상장',
      'english': '2025 H1 New Listings',
    },
    '2025년 하반기 신규상장': {
      'ticker': 'NEW-25H2',
      'korean': '2025년 하반기 신규상장',
      'english': '2025 H2 New Listings',
    },
  };

  /// 🎯 섹터명을 DisplayMode에 따라 변환 (기본/상세 분류 자동 감지)
  static String getDisplayName(String sectorKey, DisplayMode displayMode, {bool isDetailed = false}) {
    // 정규화 (입력된 섹터명 그대로 매핑에서 찾기)
    final normalizedKey = sectorKey.trim();
    
    // 상세/기본 분류에 따라 적절한 매핑 선택
    final sectorData = isDetailed 
        ? detailedSectorNaming[normalizedKey] 
        : basicSectorNaming[normalizedKey];
    
    // 매핑이 없으면 다른 분류에서 찾기 시도
    final fallbackData = isDetailed 
        ? basicSectorNaming[normalizedKey]
        : detailedSectorNaming[normalizedKey];
    
    final finalData = sectorData ?? fallbackData;
    
    if (finalData == null) {
      // 매핑이 없으면 원본 반환 (fallback)
      return sectorKey;
    }

    switch (displayMode) {
      case DisplayMode.ticker:
        return finalData['ticker'] ?? sectorKey;
      case DisplayMode.korean:
        return finalData['korean'] ?? sectorKey;
      case DisplayMode.english:
        return finalData['english'] ?? sectorKey;
    }
  }

  /// 🔧 모든 섹터 키 목록 반환 (디버깅용)
  static List<String> getAllSectorKeys({bool isDetailed = false}) {
    return isDetailed 
        ? detailedSectorNaming.keys.toList()
        : basicSectorNaming.keys.toList();
  }

  /// 🔧 특정 섹터가 매핑에 있는지 확인
  static bool hasSector(String sectorKey, {bool isDetailed = false}) {
    final normalizedKey = sectorKey.trim();
    
    return isDetailed 
        ? detailedSectorNaming.containsKey(normalizedKey)
        : basicSectorNaming.containsKey(normalizedKey);
  }

  /// 🔧 디버깅용 - 매핑되지 않은 섹터 찾기
  static List<String> findUnmappedSectors(List<String> actualSectorKeys, {bool isDetailed = false}) {
    final unmapped = <String>[];
    
    for (final sectorKey in actualSectorKeys) {
      if (!hasSector(sectorKey, isDetailed: isDetailed)) {
        unmapped.add(sectorKey);
      }
    }
    
    return unmapped;
  }

  /// 🔧 전체 매핑 정보 반환 (디버깅용)
  static Map<String, Map<String, String>> getAllMappings({bool isDetailed = false}) {
    return isDetailed ? detailedSectorNaming : basicSectorNaming;
  }
}

// 🆕 SectorTile에서 사용할 헬퍼 확장
extension SectorDisplayExtension on String {
  /// 섹터명을 DisplayMode에 따라 표시
  String toDisplayName(DisplayMode displayMode, {bool isDetailed = false}) {
    return SectorNames.getDisplayName(this, displayMode, isDetailed: isDetailed);
  }
}\n\n// ====== lib/shared/widgets/sector_classification.dart ======\n
import 'package:flutter/foundation.dart';

/// 섹터 분류 관리 전용 Provider (공유 위젯 레이어)
/// 상세(28개) vs 기본(18개) 분류 토글 및 매핑 데이터 제공
class SectorClassificationProvider extends ChangeNotifier {
 // 현재 선택된 분류 타입 (true: 상세, false: 기본)
 bool _isDetailedClassification = true;
 
 // 🚀 캐시 시스템 추가
 Map<String, List<String>>? _cachedCurrentSectors;
 Map<String, List<String>>? _cachedCoinToSectorsMap;
 
 bool get isDetailedClassification => _isDetailedClassification;
 
 /// 분류 타입 토글
 void toggleClassificationType() {
   // 🚀 캐시 무효화
   _cachedCurrentSectors = null;
   _cachedCoinToSectorsMap = null;
   
   _isDetailedClassification = !_isDetailedClassification;
   notifyListeners();
 }
 
 /// 상세 분류 섹터별 코인 매핑 (28개 섹터)
 static const Map<String, List<String>> _detailedSectors = {
   // ==================== 기본 그룹 ====================
   '비트코인 그룹': ['BTC', 'BCH', 'BSV', 'XEC'],
   '이더리움 그룹': ['ETH', 'ETC'],
   '스테이킹': ['ETH', 'SOL', 'ADA', 'POL', 'ATOM'],

   // ==================== 블록체인 아키텍처 ====================
   '모놀리식 블록체인': [
     'SOL', 'ADA', 'TRX', 'SUI', 'AVAX', 'NEAR', 'CRO', 'APT', 'ETC', 'VET',
     'ATOM', 'ALGO', 'INJ', 'A', 'SEI', 'IOTA', 'XTZ', 'FLOW', 'KAVA', 'EGLD',
     'NEO', 'MINA', 'BERA', 'ZIL', 'QTUM', 'ASTR', 'GAS', 'VTHO', 'VANA', 'ELF',
     'WAVES', 'ICX', 'ONT', 'HIVE', 'SXP', 'POWR', 'ARDR', 'XEM', 'IOST', 'ONG',
     'GLMR', 'ARK', 'AERGO', 'QKC', 'META', 'TT', 'FCT2'
   ],
   '모듈러 블록체인': [
     'ETH', 'DOT', 'MNT', 'POL', 'ARB', 'STX', 'SONIC', 'MOVE', 'CKB', 'CELO',
     'LSK', 'BLAST', 'TAIKO', 'MTL', 'TOKAMAK'
   ],

   // ==================== 스테이블코인 생태계 ====================
   '스테이블 코인': ['USDT', 'USDC'],

   // ==================== DeFi 생태계 ====================
   'DEX/애그리게이터': [
     'UNI', 'JUP', 'DEEP', '1INCH', 'ZRX', 'ORCA', 'COW', 'ORBS', 'AUCTION', 'KNC'
   ],
   '랜딩': ['AAVE', 'COMP', 'STRIKE'],
   '유동화 스테이킹/리스테이킹': ['PENDLE', 'JTO', 'LAYER'],
   'RWA': ['ONDO', 'CTC'],

   // ==================== 인프라 & 기술 ====================
   '지급결제 인프라': ['BTC', 'XRP', 'BCH', 'XLM', 'BSV', 'XEC', 'PUNDIX', 'GRS'],
   '상호운용성/브릿지': ['ZRO', 'W', 'T', 'ZETA', 'STG'],
   '엔터프라이즈 블록체인': ['HBAR', 'POLYX', 'STRAX'],
   '오라클': ['LINK', 'PYTH'],
   '데이터 인프라': ['GRT', 'KAITO', 'ANKR', 'ARKM', 'MVL', 'CARV'],
   '스토리지': ['FIL', 'THETA', 'BTT', 'WAL', 'AKT', 'LPT', 'GLM', 'TFUEL', 'SC', 'STORJ'],
   'AI': ['VIRTUAL', 'RENDER', 'ATH'],

   // ==================== 엔터테인먼트 & 게임 ====================
   '메타버스': ['SAND', 'MANA', 'MOCA', 'MOC'],
   'NFT/게임': [
     'IMX', 'AXS', 'BEAM', 'BLUR', 'ENJ', 'GMT', 'ANIME', 'ME', 'BORA',
     'BIGTIME', 'WAXP', 'AGLD', 'GAME2', 'AQT'
   ],

   // ==================== 미디어 & 콘텐츠 ====================
   '미디어/스트리밍': ['MBL'],
   '광고': ['BAT', 'MLK', 'STMX'],
   '교육/기타 콘텐츠': ['IQ', 'AHT'],

   // ==================== 소셜 & 커뮤니티 ====================
   '소셜/DAO': ['G', 'UXLINK', 'STEEM', 'CBK'],
   '팬토큰': ['CHZ'],
   '밈': ['DOGE', 'SHIB', 'PEPE', 'TRUMP', 'BONK', 'MEW', 'PENGU', 'MOODENG'],

   // ==================== 특수 용도 ====================
   'DID': ['ENS', 'ID', 'CVC'],
   '의료': ['MED'],
   '월렛/메세징': ['SAFE', 'MASK', 'WCT', 'SNT'],
 };

 /// 기본 분류 (18개 섹터) - 🆕 신규상장 섹터 5개 추가
 static const Map<String, List<String>> _basicSectors = {
   '메이저 코인': [
     'BTC', 'ETH', 'XRP', 'ADA', 'SOL', 'DOT', 'AVAX', 'MATIC', 'POL', 'NEAR',
     'ATOM', 'LINK', 'UNI', 'ALGO', 'VET', 'SAND', 'MANA', 'AXS', 'THETA',
     'FIL', 'AAVE', 'DOGE', 'SHIB', 'PEPE'
   ],
   '비트코인 계열': [
     'BTC', 'BCH', 'BSV', 'BTT', '1000SATS', 'ORDI'
   ],
   '이더리움 생태계': [
     'ETH', 'ETC', 'ENS', 'LPT', 'COMP', 'MKR', 'YFI', 'SUSHI', 'BAL',
     '1INCH', 'LRC', 'ZRX', 'BAT', 'ENJ', 'CRV', 'SNX', 'MASK', 'BLUR', 'GRT'
   ],
   '레이어1 블록체인': [
     'EGLD', 'INJ', 'APT', 'SUI', 'ARB', 'OP', 'STX', 'TIA', 'SEI', 'PYTH',
     'JTO', 'JUP', 'TNSR', 'W', 'ENA', 'OMNI', 'REZ', 'BB', 'NOT', 'IO',
     'ZK', 'LISTA', 'ZRO', 'G', 'BANANA', 'RENDER', 'TON', 'NEO', 'GAS',
     'ONT', 'ONG', 'QTUM', 'WAVES', 'LSK', 'STRAX', 'ARK', 'STORJ', 'SC',
     'ARDR', 'KMD', 'ZEC', 'DASH', 'XMR', 'ICX', 'ZIL', 'IOTA', 'XTZ',
     'CELO', 'FLOW', 'MINA', 'HBAR', 'CKB', 'BEAM', 'ZETA', 'TAIKO', 'AERGO'
   ],
   
   // 🆕 시총별 분류 (환율 1,400원 적용 기준)
   '고 시총': [
     'BTC', 'ETH', 'XRP', 'SOL', 'DOGE', 'AVAX', 'TRUMP'
   ],
   '중 시총': [
     'SUI', 'APT', 'NEAR', 'UNI', 'LINK', 'AAVE', 'INJ', 'STX', 'AXS', 'FIL',
     'ATOM', 'DOT', 'PENDLE', 'RENDER', 'GAS', 'ORCA', 'BERA', 'ZRO', 'TIA',
     'MASK', 'VIRTUAL', 'KAITO', 'QTUM', 'JTO', 'OM', 'ONDO', 'ME', 'LAYER',
     'AGLD', 'THETA', 'MTL', 'MNT', 'ADA', 'TAIKO',      'VAULTA', 'DRIFT', 'CTC',
     'XTZ', 'IMX', 'ARKM', 'SAFE', 'JUP', 'WAL', 'LSK', 'KAVA', 'COW',
     'UXLINK', 'ARK', 'FLOW', 'CARV', 'ARB', 'CELO', 'PUNDIX', 'KNC',
     'MANA', 'TRX', 'SAND', 'STORJ', 'XLM', 'HUNT', 'SONIC', 'GLM', 'ZRX',
     'HIVE', 'ZETA', 'MINA', 'POL', '1INCH', 'ALGO', 'SEI', 'STG', 'IOTA',
     'ID', 'SXP', 'HBAR', 'POWR', 'DEEP', 'MOVE', 'POLYX', 'STEEM', 'ONT',
     'BAT', 'CVC', 'AERGO', 'ICX', 'PYTH', 'CRO', 'GRT', 'BLUR', 'ARDR',
     'BORA', 'W', 'MOCA', 'BIGTIME', 'GMT', 'STRAX', 'CHZ', 'SNT', 'TFUEL',
     'JST', 'VET', 'ANIME', 'WAXP', 'ORBS', 'ANKR', 'T', 'G', 'ZIL', 'PENGU',
     'XEM', 'BEAM', 'CKB', 'IQ', 'AHT', 'IOST'
   ],
   '저 시총': [
     'GAME2', 'MVL', 'SC', 'MEW', 'BLAST', 'STMX', 'TT', 'MBL', 'VTHO', 'XEC',
     'BONK', 'SHIB', 'PEPE', 'BTT', 'CBK', 'MLK', 'POKT', 'SIGN', 'MOC',
     'SOPH', 'AWE', 'ATH', 'BOUNTY', 'HP', 'FCT2', 'ASTR', 'META', 'DKA',
     'QKC', 'MED'
   ],
   
   // 🆕 마이너 알트코인 (기존 알트코인 복원)
   '마이너 알트코인': [
     'LTC', 'A', 'TRX', 'XLM', 'STEEM', 'IOST', 'MTL', 'GRS', 'POWR',
     'XEM', 'XEC', 'VTHO', 'TFUEL', 'HIVE', 'CVC', 'SNT', 'SXP', 'T', 'PUNDIX'
   ],
   
   'DeFi 토큰': [
     'CAKE', 'RUNE', 'ALPHA', 'DODO', 'RAY', 'SRM', 'KNC', 'ANKR', 'CELR',
     'KAVA', 'HARD', 'SWP', 'JST', 'SUN', 'CRO', 'CHZ', 'GLM', 'AUCTION',
     'PENDLE', 'STG', 'COW', 'OM', 'ONDO', 'SAFE'
   ],
   '스테이블코인': [
     'USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'USDD'
   ],
   '게임/NFT/메타버스': [
     'GALA', 'APE', 'GMT', 'GST', 'LOOKS', 'PLA', 'WAXP', 'TLM', 'SLP',
     'IMX', 'BIGTIME', 'GAME2', 'AGLD', 'YGG', 'ME', 'VIRTUAL', 'MOCA',
     'PENGU', 'MEW', 'ANIME', 'FLOKI', 'BONK', 'WIF', 'BOME'
   ],
   '한국 프로젝트': [
     'KLAY', 'BORA', 'META', 'WEMIX', 'MBL', 'HUNT', 'TEMCO', 'SOLVE',
     'PROM', 'ORBS', 'MIX', 'CENNZ', 'STPT', 'MDT', 'LAMB', 'COTI',
     'WTC', 'NPXS', 'APIS', 'DAC', 'ELF', 'KARMA', 'MEET', 'QKC',
     'SSX', 'UPP', 'TOKAMAK', 'MLK', 'DKA', 'CBK', 'MOC', 'HP',
     'BOUNTY', 'MED', 'MVL', 'ASTR', 'TT', 'MNT', 'FCT2', 'IQ',
     'AHT', 'AWE', 'ATH', 'SOPH', 'SIGN'
   ],
   '솔라나 생태계': [
     'SOL', 'ORCA', 'DRIFT', 'SONIC', 'LAYER', 'DEEP', 'MOVE'
   ],
   'AI/기술 토큰': [
     'ARKM', 'KAITO', 'NXPC', 'WCT', 'AKT', 'AQT', 'CARV', 'UXLINK',
     'WAL', 'CTC', 'POLYX', 'ID', 'VANA', 'STRIKE', 'BERA', 'TRUMP',
     'POKT', 'STMX', 'BLAST'
   ],

   // 🆕 신규상장 섹터
   '2023년 신규상장': [
     'SHIB', 'MASK', 'EGLD', 'SUI', 'GRT', 'BLUR', 'IMX', 'SEI', 'MINA', 'CTC', 'ASTR'
   ],
   '2024년 상반기 신규상장': [
     'ID', 'PYTH', 'MNT', 'BIGTIME', 'AKT', 'ZETA', 'STG', 'BEAM', 'TAIKO', 'ONDO', 'ZRO', 'BLAST'
   ],
   '2024년 하반기 신규상장': [
     'JUP', 'ENS', 'GAL', 'PENDLE', 'ATH', 'UXLINK', 'CKB', 'W', 'CARV', 'INJ', 'MEW', 'UNI', 
     'SAFE', 'DRIFT', 'AGLD', 'PEPE', 'BONK', 'RENDER', 'MOVE', 'ME', 'MOCA', 'VANA'
   ],
   '2025년 상반기 신규상장': [
     'SONIC', 'VTHO', 'ANIME', 'VIRTUAL', 'BERA', 'LAYER', 'TRUMP', 'JTO', 'COW', 'KAITO', 
     'ARKM', 'ORCA', 'WAL', 'COMP', 'FIL', 'WCT', 'DEEP', 'SIGN', 'TIA', 'PENGU', 
     'NXPC', 'OM', 'SOPH', 'LPT', 'POKT', 'RVN', 'AXL', 'ALT', 'RAY', 'NEWT', 'SAHARA'
   ],
   '2025년 하반기 신규상장': [
     'MOODENG', 'HYPER', 'BABY'
   ],
 };

 /// 🚀 캐시된 현재 활성화된 섹터 매핑 반환
 Map<String, List<String>> get currentSectors {
   _cachedCurrentSectors ??= _isDetailedClassification ? _detailedSectors : _basicSectors;
   return _cachedCurrentSectors!;
 }

 /// 🚀 캐시된 코인→섹터 역색인 맵 반환 (O(1) 조회용)
 Map<String, List<String>> get coinToSectorsMap {
   if (_cachedCoinToSectorsMap == null) {
     _cachedCoinToSectorsMap = <String, List<String>>{};
     currentSectors.forEach((sector, coins) {
       for (final coin in coins) {
         _cachedCoinToSectorsMap!.putIfAbsent(coin, () => []).add(sector);
       }
     });
     
     if (kDebugMode) {
       debugPrint('🚀 SectorClassification: coinToSectorsMap built with ${_cachedCoinToSectorsMap!.length} coins');
     }
   }
   return _cachedCoinToSectorsMap!;
 }

 /// 상세 분류 섹터 매핑 반환
 Map<String, List<String>> get detailedSectors => _detailedSectors;

 /// 기본 분류 섹터 매핑 반환
 Map<String, List<String>> get basicSectors => _basicSectors;

 /// 섹터 목록 반환
 List<String> get sectorNames => currentSectors.keys.toList();

 /// 특정 섹터의 코인들 반환
 List<String> getCoinsInSector(String sectorName) {
   return currentSectors[sectorName] ?? [];
 }

 /// 🚀 최적화된 특정 코인이 속한 섹터들 반환 (O(1) 조회)
 List<String> getSectorsForCoin(String ticker) {
   return coinToSectorsMap[ticker.toUpperCase()] ?? [];
 }

 /// 현재 분류 타입 문자열 반환
 String get currentClassificationName {
   return _isDetailedClassification ? '상세' : '기본';
 }

 /// 섹터별 통계 정보
 Map<String, int> get sectorSizes {
   return currentSectors.map((sector, coins) => 
       MapEntry(sector, coins.length));
 }

 /// 전체 고유 코인 개수
 int get totalUniqueCoins {
   return currentSectors.values
       .expand((coins) => coins)
       .toSet()
       .length;
 }

 /// 중복도가 높은 코인들 (여러 섹터에 속한 코인들)
 Map<String, int> getCoinDuplicationCount() {
   Map<String, int> duplications = {};
   
   currentSectors.forEach((sector, coins) {
     for (String coin in coins) {
       duplications[coin] = (duplications[coin] ?? 0) + 1;
     }
   });
   
   return Map.fromEntries(
     duplications.entries.toList()
       ..sort((a, b) => b.value.compareTo(a.value))
   );
 }

 /// 🔧 디버깅용: 캐시 상태 정보
 Map<String, dynamic> get cacheStatus {
   return {
     'isDetailed': _isDetailedClassification,
     'currentSectorsCached': _cachedCurrentSectors != null,
     'coinToSectorsMapCached': _cachedCoinToSectorsMap != null,
     'totalSectors': currentSectors.length,
     'totalCoins': coinToSectorsMap.length,
     'averageCoinsPerSector': currentSectors.values.map((e) => e.length).reduce((a, b) => a + b) / currentSectors.length,
   };
 }
}\n\n// ====== lib/presentation/controllers/sector_controller.dart ======\n
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/sector_provider.dart';
import '../../core/common/time_frame_manager.dart'; // 🔥 간소화된 TimeFrame 시스템 사용
import '../../core/common/time_frame_types.dart';   // 🔥 공통 타입 사용
import '../../domain/entities/volume.dart';
import '../../shared/utils/rank_tracker.dart';
import '../../shared/utils/rank_hot_mixin.dart';

/// 🎯 간소화된 SectorController - Trade 스타일
class SectorController extends StateNotifier<SectorControllerState> with RankHotMixin {
  final Ref _ref;
  
  // ✅ 순위 추적기 (블링크용)
  final RankTracker _rankTracker = RankTracker();
  
  // ✅ 시간대별 블링크 상태 관리 (TimeFrame enum 기반)
  final Map<TimeFrame, Map<String, bool>> _blinkStatesByTimeFrame = {};
  
  // ✅ Provider 구독 관리
  final List<ProviderSubscription> _subscriptions = [];

  SectorController(this._ref) : super(const SectorControllerState()) {
    _initializeAllStates();
    _initializeDataSubscription();
  }

  /// ✅ 모든 상태 초기화
  void _initializeAllStates() {
    clearAllHot();
    _rankTracker.clearAll();
    _blinkStatesByTimeFrame.clear();
  }

  /// 🔥 통합 데이터 구독 초기화
  void _initializeDataSubscription() {
    final subscription = _ref.listen(
      sectorVolumeDataProvider,
      (previous, next) {
        next.when(
          data: (event) {
            // 🚀 데이터 처리
            _processSectorData(event.volumes);
            
            // 🔥 리셋 정보 처리 (새로운 SectorVolumeEvent 구조)
            if (event.isReset) {
              clearTimeFrameHot(event.timeFrame.key);
              _clearTimeFrameBlinkStates(event.timeFrame);
            }
          },
          loading: () => state = state.copyWith(isLoading: true),
          error: (error, _) => state = state.copyWith(
            errorMessage: error.toString(),
            isLoading: false,
          ),
        );
      },
    );
    _subscriptions.add(subscription);
  }

  /// ✅ 섹터 데이터 처리
  void _processSectorData(List<Volume> volumes) {
    // ✅ Provider에서 이미 정렬된 데이터 그대로 사용
    final processedVolumes = volumes;
    
    // ✅ 모든 상태 미리 계산
    _calculateAllStates(processedVolumes);
    
    // ✅ 상태 업데이트
    state = state.copyWith(
      sectorVolumes: processedVolumes,
      isLoading: false,
      errorMessage: null,
    );
  }

  /// ✅ 모든 아이템의 상태 미리 계산 - TimeFrame enum 기반
  void _calculateAllStates(List<Volume> volumes) {
    final currentTimeFrame = this.currentTimeFrame;
    final currentTimeFrameKey = currentTimeFrame.key; // TimeFrame → String
    
    // ✅ 시간대 초기화 (String key 사용 - Mixin 호환)
    initializeTimeFrame(currentTimeFrameKey);
    _rankTracker.initializeTimeFrame(currentTimeFrameKey);
    
    // ✅ 현재 시간대 블링크 상태 초기화 (TimeFrame enum 사용)
    _initializeTimeFrameBlinkStates(currentTimeFrame);
    
    for (int i = 0; i < volumes.length; i++) {
      final volume = volumes[i];
      final sectorName = volume.market.replaceFirst('SECTOR-', '');
      final currentRank = i + 1;
      
      // ✅ HOT 상태는 Mixin에서 직접 관리 (String key 사용)
      checkIfHot(
        key: sectorName,
        currentRank: currentRank,
        timeFrame: currentTimeFrameKey,
        menuType: 'sector',
      );
      
      // ✅ 블링크 상태 계산 (Sector 전용 메서드 사용)
      final blinkStates = _blinkStatesByTimeFrame[currentTimeFrame]!;
      
      // 섹터 순위 변화 체크 (순위 + 실제 볼륨 값 기준)
      final isRankChange = _rankTracker.checkRankChangeWithValue(
        key: sectorName,
        currentRank: currentRank,
        currentValue: volume.totalVolume,
        timeFrame: currentTimeFrameKey,
      );
      
      // 의미있는 변화가 있을 때만 블링크
      blinkStates[sectorName] = isRankChange;
    }
  }

  /// ✅ 시간대별 블링크 상태 초기화 (TimeFrame enum)
  void _initializeTimeFrameBlinkStates(TimeFrame timeFrame) {
    if (!_blinkStatesByTimeFrame.containsKey(timeFrame)) {
      _blinkStatesByTimeFrame[timeFrame] = <String, bool>{};
    }
  }

  /// ✅ 특정 시간대 블링크 상태 초기화 (TimeFrame enum)
  void _clearTimeFrameBlinkStates(TimeFrame timeFrame) {
    _blinkStatesByTimeFrame[timeFrame]?.clear();
  }

  /// 🔥 시간대 변경 - Trade 스타일 (직접 Provider 조작)
  void setTimeFrame(TimeFrame timeFrame) {
    _ref.read(selectedSectorTimeFrameProvider.notifier).state = timeFrame;
    // 🎯 상태 초기화 제거 - 각 시간대가 독립적으로 유지됨
  }

  /// 🔥 시간대 변경 (인덱스 기반) - 호환성 유지
  void setTimeFrameByIndex(int index) {
    final availableTimeFrames = this.availableTimeFrames;
    if (index >= 0 && index < availableTimeFrames.length) {
      setTimeFrame(availableTimeFrames[index]);
    }
  }

  /// 🚀 섹터 분류 토글 - 섹터만의 고유 기능
  void toggleSectorClassification() {
    _ref.read(sectorClassificationProvider.notifier).toggleClassificationType();
  }

  /// ✅ HOT 상태 조회 (String key 사용 - Mixin 호환)
  bool isHot(String sectorName) {
    final hotItems = getHotItems(currentTimeFrame.key);
    return hotItems.contains(sectorName);
  }

  /// ✅ 블링크 상태 조회 - TimeFrame enum 기반
  bool shouldBlink(String sectorName) {
    final currentTimeFrame = this.currentTimeFrame;
    final blinkStates = _blinkStatesByTimeFrame[currentTimeFrame];
    return blinkStates?[sectorName] ?? false;
  }

  /// ✅ 블링크 상태 초기화 - 강제 notify 문제 해결
  void clearBlinkState(String sectorName) {
    final currentTimeFrame = this.currentTimeFrame;
    final blinkStates = _blinkStatesByTimeFrame[currentTimeFrame];
    if (blinkStates != null) {
      blinkStates[sectorName] = false;
      // ✅ 실제 변화가 있을 때만 notify (불필요한 copyWith 제거)
    }
  }

  /// 🔥 TimeFrame 관련 메서드들 - 간소화된 구조
  TimeFrame get currentTimeFrame => _ref.read(selectedSectorTimeFrameProvider);
  
  int get currentIndex {
    final availableTimeFrames = this.availableTimeFrames;
    return availableTimeFrames.indexOf(currentTimeFrame);
  }
  
  List<TimeFrame> get availableTimeFrames => TimeFrame.fromAppConfig();

  String getTimeFrameName(TimeFrame timeFrame) => timeFrame.displayName;

  /// 🔥 리셋 메서드들 - 간소화된 Manager 직접 사용
  void resetCurrentTimeFrame() {
    final currentTimeFrame = this.currentTimeFrame;
    GlobalTimeFrameManager().resetTimeFrame(currentTimeFrame);
  }

  void resetAllTimeFrames() {
    GlobalTimeFrameManager().resetAll();
  }

  /// 🔥 완벽한 타이머 동기화 - 간소화된 Manager 직접 사용
  DateTime? getNextResetTime() {
    final currentTimeFrame = this.currentTimeFrame;
    return GlobalTimeFrameManager().getNextResetTime(currentTimeFrame);
  }

  /// 🚀 섹터 고유 기능들 - 직접 Provider 접근
  String get currentSectorClassificationName {
    return _ref.read(sectorClassificationProvider).currentClassificationName;
  }

  bool get isDetailedClassification {
    return _ref.read(sectorClassificationProvider).isDetailedClassification;
  }

  int get totalSectors {
    return _ref.read(sectorClassificationProvider).currentSectors.length;
  }

  Map<String, int> getSectorSizes() {
    return _ref.read(sectorClassificationProvider).sectorSizes;
  }

  /// ✅ 특정 섹터의 코인들 조회
  List<String> getCoinsInSector(String sectorName) {
    return _ref.read(sectorClassificationProvider).getCoinsInSector(sectorName);
  }

  /// ✅ 특정 코인이 속한 섹터들 조회
  List<String> getSectorsForCoin(String ticker) {
    return _ref.read(sectorClassificationProvider).getSectorsForCoin(ticker);
  }

  /// ✅ 디버깅용 메서드들
  Map<String, int> getBlinkDebugInfo() {
    return _rankTracker.getDebugInfo();
  }

  /// ✅ 메모리 정리
  void cleanupExpiredStates() {
    cleanupExpiredHotStates();
    _cleanupOldBlinkStates();
  }

  /// ✅ 오래된 블링크 상태 정리 (TimeFrame enum 기반)
  void _cleanupOldBlinkStates() {
    final currentTimeFrame = this.currentTimeFrame;
    final availableTimeFrames = this.availableTimeFrames.toSet();
    
    _blinkStatesByTimeFrame.removeWhere((timeFrame, _) => 
      timeFrame != currentTimeFrame && !availableTimeFrames.contains(timeFrame)
    );
  }

  /// ✅ 리소스 정리
  @override
  void dispose() {
    // Provider 구독 해제
    for (final subscription in _subscriptions) {
      subscription.close();
    }
    _subscriptions.clear();
    
    // ✅ 모든 리소스 정리
    disposeHot();
    _rankTracker.dispose();
    _blinkStatesByTimeFrame.clear();
    
    super.dispose();
  }
}

/// ✅ 상태 클래스 (변경 없음)
class SectorControllerState {
  final List<Volume> sectorVolumes;        // 정렬된 섹터 볼륨 데이터
  final bool isLoading;                   // 로딩 상태
  final String? errorMessage;             // 에러 메시지

  const SectorControllerState({
    this.sectorVolumes = const [],
    this.isLoading = false,
    this.errorMessage,
  });

  SectorControllerState copyWith({
    List<Volume>? sectorVolumes,
    bool? isLoading,
    String? errorMessage,
  }) {
    return SectorControllerState(
      sectorVolumes: sectorVolumes ?? this.sectorVolumes,
      isLoading: isLoading ?? this.isLoading,
      errorMessage: errorMessage ?? this.errorMessage,
    );
  }
}

/// Provider 선언 - UI용 SectorController
final sectorControllerProvider = StateNotifierProvider<SectorController, SectorControllerState>(
  (ref) => SectorController(ref),
);\n\n// ====== lib/presentation/pages/sector_page.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../core/common/time_frame_types.dart';
import '../../core/common/time_frame_manager.dart';
import '../../shared/widgets/slider_widget.dart';
import '../controllers/sector_controller.dart';
import '../widgets/sector_tile.dart';

class SectorPage extends ConsumerWidget {
  final ScrollController scrollController;

  const SectorPage({
    Key? key,
    required this.scrollController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // ✅ Controller state watch (데이터 + UI 상태)
    final state = ref.watch(sectorControllerProvider);
    final controller = ref.read(sectorControllerProvider.notifier);
    
    // 🔥 핵심 수정: ref.watch로 실시간 상태 감지
    final currentTimeFrame = ref.watch(selectedSectorTimeFrameProvider);
    final availableTimeFrames = controller.availableTimeFrames;
    final currentIndex = availableTimeFrames.indexOf(currentTimeFrame);
    
    // ✅ UI 설정
    final sliderPosition = ref.watch(appSettingsProvider).sliderPosition;
    
    // ✅ 공통 슬라이더 위젯 - Controller 중심 설계
    final sliderWidget = CommonSliderWidget(
      leftText: '시간대: ${currentTimeFrame.displayName}',
      sliderValue: currentIndex.toDouble(),
      sliderMin: 0.0,
      sliderMax: (availableTimeFrames.length - 1).toDouble(),
      sliderDivisions: availableTimeFrames.length - 1,
      sliderLabel: currentTimeFrame.displayName,
      onSliderChanged: (value) {
        final newIndex = value.round();
        if (newIndex >= 0 && newIndex < availableTimeFrames.length) {
          // 🔥 Surge/Volume과 동일하게 직접 setTimeFrame 호출
          controller.setTimeFrame(availableTimeFrames[newIndex]);
        }
      },
      // 🚀 Sector 고유: 섹터 분류 토글 버튼
      centerWidget: CommonToggleButton(
        text: controller.currentSectorClassificationName,
        isActive: controller.isDetailedClassification,
        onTap: () => controller.toggleSectorClassification(),
        icon: controller.isDetailedClassification ? Icons.view_module : Icons.view_list,
        fontSize: 10,
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
      ),
      rightWidget: CommonCountdownWidget(
        // 🔥 Controller 중심 설계 - Controller 메서드 사용
        nextResetTime: controller.getNextResetTime(),
      ),
    );

    return PrimaryScrollController(
      controller: scrollController,
      child: Column(
        children: [
          if (sliderPosition == SliderPosition.top) sliderWidget,
          Expanded(child: _buildSectorList(state, controller, currentTimeFrame, context)),
          if (sliderPosition == SliderPosition.bottom) sliderWidget,
        ],
      ),
    );
  }

  /// ✅ 섹터 리스트 (Controller state 기반) - Controller 중심 설계
  Widget _buildSectorList(
    SectorControllerState state,
    SectorController controller,
    TimeFrame currentTimeFrame, // 🔥 Controller에서 받은 TimeFrame
    BuildContext context,
  ) {
    // ✅ 로딩 상태
    if (state.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    // ✅ 에러 상태
    if (state.errorMessage != null) {
      return Center(child: Text('섹터 데이터 로드 중 오류: ${state.errorMessage}'));
    }

    // ✅ 빈 데이터
    if (state.sectorVolumes.isEmpty) {
      return Center(
        child: Text(
          '섹터 거래대금 데이터가 없습니다.\n(시간대: ${currentTimeFrame.displayName})', // 🔥 enum 직접 사용
          textAlign: TextAlign.center,
          style: TextStyle(color: Theme.of(context).hintColor, fontSize: 16),
        ),
      );
    }

    // ✅ 섹터 리스트 (이미 정렬된 데이터 사용)
    return CommonScrollableList(
      scrollController: scrollController,
      itemCount: state.sectorVolumes.length,
      itemBuilder: (_, i) {
        final volume = state.sectorVolumes[i];
        final sectorName = volume.market.replaceFirst('SECTOR-', '');
        final rank = i + 1;
        
        return SectorTile(
          sectorName: sectorName,
          totalVolume: volume.totalVolume,
          rank: rank,
          // ✅ 안전한 상태 조회 (기존 패턴 유지)
          isHot: controller.isHot(sectorName),
          shouldBlink: controller.shouldBlink(sectorName),
        );
      },
    );
  }
}\n\n// ====== lib/presentation/widgets/sector_tile.dart ======\n
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/app_settings.dart';
import '../../shared/widgets/sector_names.dart';
import '../../shared/widgets/sector_logo_provider.dart';
import '../../shared/widgets/amount_display_widget.dart';
import '../../shared/utils/tile_common.dart';
import '../../shared/utils/blink_animation_mixin.dart';
import '../../shared/utils/amount_formatter.dart';
import '../controllers/sector_controller.dart';

class SectorTile extends ConsumerStatefulWidget {
  final String sectorName;
  final double totalVolume;
  final int rank;
  final bool isHot;        // ✅ Controller에서 계산된 값
  final bool shouldBlink;  // ✅ Controller에서 계산된 값

  const SectorTile({
    Key? key,
    required this.sectorName,
    required this.totalVolume,
    required this.rank,
    required this.isHot,
    required this.shouldBlink,
  }) : super(key: key);

  @override
  ConsumerState<SectorTile> createState() => _SectorTileState();
}

class _SectorTileState extends ConsumerState<SectorTile>
    with SingleTickerProviderStateMixin {

  late AnimationController _blinkController;
  late Animation<double> _blinkAnimation;
  bool _isBlinking = false;

  @override
  void initState() {
    super.initState();
    // ✅ 애니메이션 초기화 (Volume과 완전 동일)
    _blinkController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _blinkAnimation = Tween<double>(begin: 1.0, end: 0.3).animate(
      CurvedAnimation(parent: _blinkController, curve: Curves.easeInOut),
    );
  }

  @override
  void didUpdateWidget(SectorTile oldWidget) {
    super.didUpdateWidget(oldWidget);
    
    // ✅ shouldBlink props 변화 감지해서 애니메이션 시작 (Volume과 완전 동일)
    if (widget.shouldBlink && !oldWidget.shouldBlink && !_isBlinking) {
      _startBlink();
    }
  }

  @override
  void dispose() {
    _blinkController.dispose();
    super.dispose();
  }

  /// ✅ 블링크 시작 (Volume과 완전 동일한 로직)
  void _startBlink() {
    final blinkEnabled = ref.read(appSettingsProvider).blinkEnabled;
    if (!mounted || !blinkEnabled) return;
    
    _isBlinking = true;
    _blinkController.forward().then((_) {
      if (mounted) {
        _blinkController.reverse().then((_) {
          if (mounted) {
            setState(() {
              _isBlinking = false;
            });
            
            // ✅ 애니메이션 완료 후 Controller에 상태 초기화 요청 (Volume과 동일)
            ref.read(sectorControllerProvider.notifier).clearBlinkState(widget.sectorName);
          }
        });
      }
    });
  }

  /// ✅ 섹터 번호 매핑 (섹터만의 고유 로직)
  int _getSectorNumber(String sectorName) {
    const sectorNumberMap = {
      // 상세 분류 (1-28번)
      '비트코인 그룹': 1, '이더리움 그룹': 2, '스테이킹': 3, '모놀리식 블록체인': 4,
      '모듈러 블록체인': 5, '스테이블 코인': 6, 'DEX/애그리게이터': 7, '랜딩': 8,
      '유동화 스테이킹/리스테이킹': 9, 'RWA': 10, '지급결제 인프라': 11, '상호운용성/브릿지': 12,
      '엔터프라이즈 블록체인': 13, '오라클': 14, '데이터 인프라': 15, '스토리지': 16,
      'AI': 17, '메타버스': 18, 'NFT/게임': 19, '미디어/스트리밍': 20,
      '광고': 21, '교육/기타 콘텐츠': 22, '소셜/DAO': 23, '팬토큰': 24,
      '밈': 25, 'DID': 26, '의료': 27, '월렛/메세징': 28,
      // 기본 분류 (29-46번)
      '메이저 코인': 29, '비트코인 계열': 30, '이더리움 생태계': 31, '레이어1 블록체인': 32,
      '고 시총': 33, '중 시총': 34, '저 시총': 35, '마이너 알트코인': 36,
      'DeFi 토큰': 37, '스테이블코인': 38, '게임/NFT/메타버스': 39, '한국 프로젝트': 40,
      '솔라나 생태계': 41, 'AI/기술 토큰': 42, '2023년 신규상장': 43, '2024년 상반기 신규상장': 44,
      '2024년 하반기 신규상장': 45, '2025년 상반기 신규상장': 46,
    };
    return sectorNumberMap[sectorName] ?? 1;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final onSurface = theme.colorScheme.onSurface;
    
    // 🚀 Controller에서 직접 상태 조회 (Volume과 동일한 패턴)
    final controller = ref.read(sectorControllerProvider.notifier);
    final displayMode = ref.watch(appSettingsProvider).displayMode;
    
    // ✅ 섹터명 표시 (Controller에서 분류 상태 조회)
    final displaySectorName = SectorNames.getDisplayName(
      widget.sectorName, 
      displayMode, 
      isDetailed: controller.isDetailedClassification, // 🚀 Controller에서 조회!
    );

    // ✅ 표준 카드 위젯 생성 (Volume과 완전 동일한 구조)
    Widget cardWidget = TileCommon.buildStandardCard(
      child: TileCommon.buildFlexRow(
        children: [
          // 🏆 순위 부분 (Volume과 동일)
          FlexChild.fixed(
            TileCommon.buildRankWidget(context, widget.rank),
          ),

          const FlexChild.fixed(SizedBox(width: 12)),

          // 🎨 섹터 아이콘 부분 (섹터만의 고유 요소)
          FlexChild.fixed(
            SectorLogoProvider.buildSectorIcon(
              sectorNumber: _getSectorNumber(widget.sectorName),
              size: 40.0,
            ),
          ),

          const FlexChild.fixed(SizedBox(width: 12)),

          // 📱 섹터명 부분 (Volume과 동일한 구조)
          FlexChild.expanded(
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Flexible(
                      child: Text(
                        displaySectorName,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                          fontSize: 16,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                    const SizedBox(width: 4),
                    // 🔥 HOT 아이콘 (설정 체크 - 블링크와 동일한 패턴)
                    Consumer(
                      builder: (context, ref, child) {
                        final hotEnabled = ref.watch(appSettingsProvider).hotEnabled;
                        if (hotEnabled && widget.isHot) {
                          return TileCommon.buildHotIcon(true) ?? const SizedBox.shrink();
                        }
                        return const SizedBox.shrink();
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 2),
                Text(
                  SectorNames.getDisplayName(
                    widget.sectorName, 
                    DisplayMode.ticker, 
                    isDetailed: controller.isDetailedClassification, // 🚀 Controller에서 조회!
                  ),
                  style: TextStyle(
                    color: onSurface.withValues(alpha: 0.7),
                    fontSize: 12,
                  ),
                ),
              ],
            ),
            flex: 25,
          ),

          // 💰 거래량 부분 (Volume과 완전 동일)
          FlexChild.expanded(
            Align(
              alignment: Alignment.centerRight,
              child: Consumer(
                builder: (context, ref, child) {
                  final amountDisplayMode = ref.watch(appSettingsProvider).amountDisplayMode;

                  return amountDisplayMode == AmountDisplayMode.icon
                      ? AmountDisplayWidget(
                          totalAmount: widget.totalVolume,
                          isBuy: true,
                          fontSize: 15,
                          fontWeight: FontWeight.w600,
                        )
                      : Text(
                          AmountFormatter.formatVolume(widget.totalVolume),
                          style: TextStyle(
                            color: onSurface,
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1,
                        );
                },
              ),
            ),
            flex: 30,
          ),
        ],
      ),
    );

    // ✅ 블링크 애니메이션 적용 (Volume과 완전 동일)
    final blinkEnabled = ref.watch(appSettingsProvider).blinkEnabled;

    // ✅ 블링크 상태에 따른 애니메이션 적용 (Volume과 완전 동일)
    if (blinkEnabled && (_isBlinking || widget.shouldBlink)) {
      return BlinkAnimationHelper.wrapWithBlinkEffect(
        child: cardWidget,
        shouldBlink: _isBlinking,
        blinkAnimation: _blinkAnimation,
        blinkColor: Colors.amber,
      );
    }

    return cardWidget;
  }
}