\n\n// ====== lib/core/di/settings_provider.dart ======\n
// 1️⃣ lib/core/di/settings_provider.dart (수정)
// ==========================================
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import '../../data/datasources/settings_local_ds.dart';
import '../../data/repositories/settings_repository_impl.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/repositories/settings_repository.dart';
import '../../domain/usecases/settings_usecase.dart';
import '../utils/logger.dart';

/// 1) SharedPreferences 인스턴스 (main.dart에서 override)
final sharedPreferencesProvider = Provider<SharedPreferences>((ref) {
  throw UnimplementedError(
    'main.dart에서 SharedPreferences.getInstance() 후 overrides로 주입하세요.'
  );
});

/// 2) Local DataSource
final settingsLocalDSProvider = Provider<SettingsLocalDataSource>((ref) {
  final prefs = ref.watch(sharedPreferencesProvider);
  return SettingsLocalDataSource(prefs);
});

/// 3) Repository
final settingsRepositoryProvider = Provider<SettingsRepository>((ref) {
  final ds = ref.watch(settingsLocalDSProvider);
  return SettingsRepositoryImpl(ds);
});

/// 4) UseCase
final settingsUsecaseProvider = Provider<SettingsUsecase>((ref) {
  final repo = ref.watch(settingsRepositoryProvider);
  return SettingsUsecase(repo);
});

/// 5) 🆕 통합 설정 Provider (이것만 사용!)
final appSettingsProvider = StateNotifierProvider<AppSettingsNotifier, AppSettings>((ref) {
  final usecase = ref.watch(settingsUsecaseProvider);
  return AppSettingsNotifier(usecase);
});

/// 🆕 통합 설정 관리 클래스
class AppSettingsNotifier extends StateNotifier<AppSettings> {
  final SettingsUsecase _usecase;

  AppSettingsNotifier(this._usecase) : super(const AppSettings()) {
    _loadSettings();
  }

  /// 초기 설정 로드
  Future<void> _loadSettings() async {
    try {
      final settings = await _usecase.getSettings();
      state = settings;
      
      // 초기 화면 켜기 상태 적용
      _applyKeepScreen(settings.keepScreenOn);
      
      log.i('⚙️ 설정 로드 완료: ${settings.toString()}');
    } catch (e, st) {
      log.e('설정 로드 실패', e, st);
    }
  }

  /// 테마 모드 변경
  Future<void> setThemeMode(ThemeMode mode) async {
    try {
      await _usecase.updateThemeMode(mode);
      state = state.copyWith(themeMode: mode);
      log.i('🎨 테마 모드 변경: ${mode.name}');
    } catch (e, st) {
      log.e('테마 모드 변경 실패', e, st);
    }
  }

  /// 화면 항상 켜기 설정
  Future<void> setKeepScreenOn(bool keep) async {
    try {
      await _usecase.updateKeepScreenOn(keep);
      state = state.copyWith(keepScreenOn: keep);
      _applyKeepScreen(keep);
      log.i('📱 화면 항상 켜기: $keep');
    } catch (e, st) {
      log.e('화면 켜기 설정 실패', e, st);
    }
  }

  /// 슬라이더 위치 변경
  Future<void> setSliderPosition(SliderPosition position) async {
    try {
      await _usecase.updateSliderPosition(position);
      state = state.copyWith(sliderPosition: position);
      log.i('🎚️ 슬라이더 위치: ${position.name}');
    } catch (e, st) {
      log.e('슬라이더 위치 변경 실패', e, st);
    }
  }

  /// 🆕 코인명 표시 방식 변경
  Future<void> setDisplayMode(DisplayMode mode) async {
    try {
      await _usecase.updateDisplayMode(mode);
      state = state.copyWith(displayMode: mode);
      log.i('💰 코인명 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('코인명 표시 방식 변경 실패', e, st);
    }
  }

  /// 💰 금액 표시 방식 변경
  Future<void> setAmountDisplayMode(AmountDisplayMode mode) async {
    try {
      await _usecase.updateAmountDisplayMode(mode);
      state = state.copyWith(amountDisplayMode: mode);
      log.i('💵 금액 표시 방식 변경: ${mode.name}');
    } catch (e, st) {
      log.e('금액 표시 방식 변경 실패', e, st);
    }
  }

  /// 화면 켜기 실제 적용
  void _applyKeepScreen(bool keep) {
    if (keep) {
      WakelockPlus.enable();
    } else {
      WakelockPlus.disable();
    }
  }

  /// 설정 새로고침
  Future<void> refresh() async {
    await _loadSettings();
  }
}\n\n// ====== lib/shared/widgets/settings_modal.dart ======\n
// lib/shared/widgets/settings_modal.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // 🎯 HapticFeedback 추가
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../domain/entities/app_settings.dart';
import 'theme_mode_segment.dart';
import 'slider_position_segment.dart';

class SettingsModal {
  /// 설정 모달 표시
  static void show(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black54,
      builder: (context) => const _SettingsModalContent(),
    );
  }
}

class _SettingsModalContent extends ConsumerWidget {
  const _SettingsModalContent();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settings = ref.watch(appSettingsProvider);
    final controller = ref.read(appSettingsProvider.notifier);

    return Container(
      margin: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Theme.of(context).scaffoldBackgroundColor,
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.1),
            blurRadius: 10,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // 🎨 설정 모달 헤더
          _buildHeader(context),
          
          // 구분선
          Divider(color: Colors.grey.shade300, height: 1),
          
          // 🎯 설정 내용
          _buildContent(context, settings, controller),
          
          // 하단 여백
          SizedBox(height: MediaQuery.of(context).padding.bottom + 20),
        ],
      ),
    );
  }

  /// 헤더 (제목 + 닫기 버튼)
  Widget _buildHeader(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: Column(
        children: [
          // 당김 핸들
          Container(
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade400,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(height: 12),
          // 제목과 닫기 버튼
          Row(
            children: [
              const SizedBox(width: 16),
              const Icon(Icons.settings, color: Colors.orange),
              const SizedBox(width: 8),
              const Text(
                '설정',
                style: TextStyle(
                  fontSize: 19,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              IconButton(
                icon: const Icon(Icons.close),
                onPressed: () => Navigator.of(context).pop(),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// 설정 컨텐츠
  Widget _buildContent(BuildContext context, AppSettings settings, dynamic controller) {
    return Container(
      constraints: const BoxConstraints(maxHeight: 550),
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // 🎨 테마 설정
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.palette, color: Colors.orange),
                title: const Text(
                  '테마',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                ),
                trailing: ThemeModeSegment(
                  value: settings.themeMode,
                  onChanged: (ThemeMode mode) {
                    HapticFeedback.lightImpact(); // 🎯 햅틱 추가
                    controller.setThemeMode(mode);
                  },
                ),
              ),
            ),
            
            const SizedBox(height: 12),
            
            // 💰 코인명 표시 방식
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.monetization_on, color: Colors.orange),
                title: const Text(
                  '코인명 표시',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  _getDisplayModeDescription(settings.displayMode),
                  style: const TextStyle(fontSize: 11),
                ),
                trailing: _DisplayModeSegment(
                  value: settings.displayMode,
                  onChanged: (DisplayMode mode) {
                    HapticFeedback.lightImpact(); // 🎯 햅틱 추가
                    controller.setDisplayMode(mode);
                  },
                ),
              ),
            ),
            
            const SizedBox(height: 12),
            
            // 💵 금액 표시 방식
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.account_balance_wallet, color: Colors.orange),
                title: const Text(
                  '금액 표시',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  _getAmountDisplayModeDescription(settings.amountDisplayMode),
                  style: const TextStyle(fontSize: 11),
                ),
                trailing: _AmountDisplayModeSegment(
                  value: settings.amountDisplayMode,
                  onChanged: (AmountDisplayMode mode) {
                    HapticFeedback.lightImpact(); // 🎯 햅틱 추가
                    controller.setAmountDisplayMode(mode);
                  },
                ),
              ),
            ),
            
            const SizedBox(height: 12),
            
            // 📱 화면 항상 켜기
            Card(
              elevation: 2,
              child: SwitchListTile(
                secondary: const Icon(Icons.screen_lock_rotation, color: Colors.orange),
                title: const Text(
                  '화면 항상 켜기',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  settings.keepScreenOn
                    ? '화면이 자동으로 꺼지지 않습니다'
                    : '시스템 설정에 따라 화면이 꺼집니다',
                  style: const TextStyle(fontSize: 11),
                ),
                value: settings.keepScreenOn,
                onChanged: (bool value) {
                  HapticFeedback.lightImpact(); // 🎯 햅틱 추가
                  controller.setKeepScreenOn(value);
                },
                activeColor: Colors.orange,
              ),
            ),
            
            const SizedBox(height: 12),
            
            // 🎚️ 슬라이더 위치
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.tune, color: Colors.orange),
                title: const Text(
                  '슬라이더 위치',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  '슬라이더를 ${_getSliderPositionText(settings.sliderPosition)}에 표시',
                  style: const TextStyle(fontSize: 11),
                ),
                trailing: SliderPositionSegment(
                  value: settings.sliderPosition,
                  onChanged: (SliderPosition position) {
                    HapticFeedback.lightImpact(); // 🎯 햅틱 추가
                    controller.setSliderPosition(position);
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 🆕 표시 모드 설명 텍스트
  String _getDisplayModeDescription(DisplayMode mode) {
    switch (mode) {
      case DisplayMode.ticker:
        return 'BTC, ETH, XRP\n형태로 표시';
      case DisplayMode.korean:
        return '비트코인, 이더리움, 리플\n형태로 표시';
      case DisplayMode.english:
        return 'Bitcoin, Ethereum, Ripple\n형태로 표시';
    }
  }

  /// 💰 금액 표시 방식 설명 텍스트
  String _getAmountDisplayModeDescription(AmountDisplayMode mode) {
    switch (mode) {
      case AmountDisplayMode.number:
        return '1,234만\n숫자로 표시';
      case AmountDisplayMode.icon:
        return '💵 지폐 아이콘\n으로 표시';
    }
  }

  /// 슬라이더 위치 텍스트
  String _getSliderPositionText(SliderPosition position) {
    return position.name == 'top' ? '상단' : '하단';
  }
}

/// 🆕 표시 모드 세그먼트 위젯
class _DisplayModeSegment extends StatelessWidget {
  final DisplayMode value;
  final ValueChanged<DisplayMode> onChanged;

  const _DisplayModeSegment({
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSegmentButton(
            context: context,
            mode: DisplayMode.ticker,
            label: '티커',
            icon: Icons.code,
          ),
          _buildDivider(),
          _buildSegmentButton(
            context: context,
            mode: DisplayMode.korean,
            label: '한글',
            icon: Icons.language,
          ),
          _buildDivider(),
          _buildSegmentButton(
            context: context,
            mode: DisplayMode.english,
            label: '영문',
            icon: Icons.translate,
          ),
        ],
      ),
    );
  }

  Widget _buildSegmentButton({
    required BuildContext context,
    required DisplayMode mode,
    required String label,
    required IconData icon,
  }) {
    final isSelected = value == mode;
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    final backgroundColor = isSelected ? Colors.orange.withValues(alpha: 0.1) : Colors.transparent;

    return GestureDetector(
      onTap: () => onChanged(mode),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(
                fontSize: 10,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDivider() {
    return Container(
      width: 1,
      height: 30,
      color: Colors.grey.shade300,
    );
  }
}

/// 💰 금액 표시 방식 세그먼트 위젯
class _AmountDisplayModeSegment extends StatelessWidget {
  final AmountDisplayMode value;
  final ValueChanged<AmountDisplayMode> onChanged;

  const _AmountDisplayModeSegment({
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSegmentButton(
            context: context,
            mode: AmountDisplayMode.number,
            label: '숫자',
            icon: Icons.format_list_numbered,
          ),
          _buildDivider(),
          _buildSegmentButton(
            context: context,
            mode: AmountDisplayMode.icon,
            label: '아이콘',
            icon: Icons.account_balance_wallet,
          ),
        ],
      ),
    );
  }

  Widget _buildSegmentButton({
    required BuildContext context,
    required AmountDisplayMode mode,
    required String label,
    required IconData icon,
  }) {
    final isSelected = value == mode;
    final color = isSelected ? Colors.orange : Colors.grey.shade600;
    final backgroundColor = isSelected ? Colors.orange.withValues(alpha: 0.1) : Colors.transparent;

    return GestureDetector(
      onTap: () => onChanged(mode),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(6),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 18, color: color),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(
                fontSize: 11,
                color: color,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDivider() {
    return Container(
      width: 1,
      height: 36,
      color: Colors.grey.shade300,
    );
  }
}\n\n// ====== lib/data/datasources/settings_local_ds.dart ======\n
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/app_settings.dart';

class SettingsLocalDataSource {
  final SharedPreferences prefs;

  SettingsLocalDataSource(this.prefs);

  // 테마 모드 관리
  ThemeMode getThemeMode() {
    final themeName = prefs.getString('themeMode') ?? 'system';
    return switch (themeName) {
      'light' => ThemeMode.light,
      'dark' => ThemeMode.dark,
      _ => ThemeMode.system,
    };
  }

  Future<void> saveThemeMode(ThemeMode mode) async {
    await prefs.setString('themeMode', mode.name);
  }

  // 화면 항상 켜기 관리
  bool getKeepScreenOn() {
    return prefs.getBool('keepScreenOn') ?? false;
  }

  Future<void> saveKeepScreenOn(bool value) async {
    await prefs.setBool('keepScreenOn', value);
  }

  // 슬라이더 위치 관리 (enum)
  SliderPosition getSliderPosition() {
    final raw = prefs.getString('sliderPosition') ?? 'top';
    return raw == 'bottom' ? SliderPosition.bottom : SliderPosition.top;
  }

  Future<void> saveSliderPosition(SliderPosition position) async {
    await prefs.setString('sliderPosition', position.name);
  }

  // 🆕 코인명 표시 방식 관리
  DisplayMode getDisplayMode() {
    final raw = prefs.getString('displayMode') ?? 'ticker';
    return switch (raw) {
      'korean' => DisplayMode.korean,
      'english' => DisplayMode.english,
      _ => DisplayMode.ticker, // 기본값: ticker
    };
  }

  Future<void> saveDisplayMode(DisplayMode mode) async {
    await prefs.setString('displayMode', mode.name);
  }

  // 💰 금액 표시 방식 관리
  AmountDisplayMode getAmountDisplayMode() {
    final raw = prefs.getString('amountDisplayMode') ?? 'number';
    return switch (raw) {
      'icon' => AmountDisplayMode.icon,
      _ => AmountDisplayMode.number, // 기본값: number
    };
  }

  Future<void> saveAmountDisplayMode(AmountDisplayMode mode) async {
    await prefs.setString('amountDisplayMode', mode.name);
  }
}\n\n// ====== lib/data/repositories/settings_repository_impl.dart ======\n
import 'package:flutter/material.dart';
import '../../domain/entities/app_settings.dart';
import '../../domain/repositories/settings_repository.dart';
import '../datasources/settings_local_ds.dart';

class SettingsRepositoryImpl implements SettingsRepository {
  final SettingsLocalDataSource dataSource;

  SettingsRepositoryImpl(this.dataSource);

  @override
  Future<AppSettings> getSettings() async {
    return AppSettings(
      themeMode: dataSource.getThemeMode(),
      keepScreenOn: dataSource.getKeepScreenOn(),
      sliderPosition: dataSource.getSliderPosition(),
      displayMode: dataSource.getDisplayMode(), // 🆕 DisplayMode 로드
      amountDisplayMode: dataSource.getAmountDisplayMode(), // 💰 AmountDisplayMode 로드
    );
  }

  @override
  Future<void> updateThemeMode(ThemeMode mode) async {
    await dataSource.saveThemeMode(mode);
  }

  @override
  Future<void> updateKeepScreenOn(bool value) async {
    await dataSource.saveKeepScreenOn(value);
  }

  @override
  Future<void> updateSliderPosition(SliderPosition position) async {
    await dataSource.saveSliderPosition(position);
  }

  @override
  Future<void> updateDisplayMode(DisplayMode mode) async {
    await dataSource.saveDisplayMode(mode); // 🆕 DisplayMode 저장
  }

  @override
  Future<void> updateAmountDisplayMode(AmountDisplayMode mode) async {
    await dataSource.saveAmountDisplayMode(mode); // 💰 AmountDisplayMode 저장
  }
}\n\n// ====== lib/domain/repositories/settings_repository.dart ======\n
import 'package:flutter/material.dart';
import '../entities/app_settings.dart';

abstract class SettingsRepository {
  /// 현재 앱 설정 가져오기
  Future<AppSettings> getSettings();

  /// 테마 모드 업데이트
  Future<void> updateThemeMode(ThemeMode mode);

  /// 화면 항상 켜기 설정 업데이트
  Future<void> updateKeepScreenOn(bool value);

  /// 슬라이더 위치 업데이트
  Future<void> updateSliderPosition(SliderPosition position);

  /// 🆕 코인명 표시 방식 업데이트
  Future<void> updateDisplayMode(DisplayMode mode);

  /// 💰 금액 표시 방식 업데이트
  Future<void> updateAmountDisplayMode(AmountDisplayMode mode);
}\n\n// ====== lib/domain/usecases/settings_usecase.dart ======\n
// lib/domain/usecases/settings_usecase.dart
import 'package:flutter/material.dart';
import '../entities/app_settings.dart';
import '../repositories/settings_repository.dart';

/// 앱 설정 관련 비즈니스 로직
class SettingsUsecase {
  final SettingsRepository _repo;

  SettingsUsecase(this._repo);

  Future<AppSettings> getSettings() {
    return _repo.getSettings();
  }

  Future<void> updateThemeMode(ThemeMode mode) {
    return _repo.updateThemeMode(mode);
  }

  Future<void> updateKeepScreenOn(bool on) {
    return _repo.updateKeepScreenOn(on);
  }

  Future<void> updateSliderPosition(SliderPosition pos) {
    return _repo.updateSliderPosition(pos);
  }

  /// 🆕 코인명 표시 방식 업데이트
  Future<void> updateDisplayMode(DisplayMode mode) {
    return _repo.updateDisplayMode(mode);
  }

  /// 💰 금액 표시 방식 업데이트
  Future<void> updateAmountDisplayMode(AmountDisplayMode mode) {
    return _repo.updateAmountDisplayMode(mode);
  }
}\n\n// ====== lib/domain/entities/app_settings.dart ======\n
import 'package:flutter/material.dart';
import 'package:equatable/equatable.dart';

/// 슬라이더 위치를 표현하는 enum
enum SliderPosition { top, bottom }

/// 🆕 코인명 표시 방식을 표현하는 enum
enum DisplayMode {
  ticker, // BTC, ETH, XRP
  korean, // 비트코인, 이더리움, 리플
  english, // Bitcoin, Ethereum, Ripple
}

/// 💰 금액 표시 방식을 표현하는 enum
enum AmountDisplayMode {
  number, // 1,234만 (숫자)
  icon,   // 💵 (아이콘)
}

class AppSettings extends Equatable {
  final ThemeMode themeMode;
  final bool keepScreenOn;
  final SliderPosition sliderPosition;
  final DisplayMode displayMode; // 🆕 코인명 표시 방식 추가
  final AmountDisplayMode amountDisplayMode; // 💰 금액 표시 방식 추가

  const AppSettings({
    this.themeMode = ThemeMode.system,
    this.keepScreenOn = false,
    this.sliderPosition = SliderPosition.top,
    this.displayMode = DisplayMode.ticker, // 🆕 기본값: 티커
    this.amountDisplayMode = AmountDisplayMode.number, // 💰 기본값: 숫자
  });

  AppSettings copyWith({
    ThemeMode? themeMode,
    bool? keepScreenOn,
    SliderPosition? sliderPosition,
    DisplayMode? displayMode, // 🆕 파라미터 추가
    AmountDisplayMode? amountDisplayMode, // 💰 파라미터 추가
  }) =>
      AppSettings(
        themeMode: themeMode ?? this.themeMode,
        keepScreenOn: keepScreenOn ?? this.keepScreenOn,
        sliderPosition: sliderPosition ?? this.sliderPosition,
        displayMode: displayMode ?? this.displayMode, // 🆕 복사 로직 추가
        amountDisplayMode: amountDisplayMode ?? this.amountDisplayMode, // 💰 복사 로직 추가
      );

  @override
  List<Object?> get props => [
        themeMode,
        keepScreenOn,
        sliderPosition,
        displayMode, // 🆕 equality 비교에 추가
        amountDisplayMode, // 💰 equality 비교에 추가
      ];
}\n\n// ====== lib/presentation/providers/settings_provider.dart ======\n
\n\n// ====== lib/presentation/controllers/settings_controller.dart ======\n
\n\n// ====== lib/presentation/pages/settings_page.dart ======\n
// lib/presentation/pages/settings_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/di/app_providers.dart';
import '../../../shared/widgets/theme_mode_segment.dart';
import '../../../shared/widgets/slider_position_segment.dart';

/// 🆕 TopSheet에서 사용할 설정 내용만 담은 위젯
class SettingsPageContent extends ConsumerWidget {
  const SettingsPageContent({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settings = ref.watch(appSettingsProvider);
    final controller = ref.read(appSettingsProvider.notifier);

    return Container(
      constraints: const BoxConstraints(maxHeight: 400), // 최대 높이 제한
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // 🎨 테마 설정
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.palette, color: Colors.orange),
                title: const Text(
                  '화면 모드',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                trailing: ThemeModeSegment(
                  value: settings.themeMode,
                  onChanged: controller.setThemeMode,
                ),
              ),
            ),
            const SizedBox(height: 12),

            // 📱 화면 항상 켜기
            Card(
              elevation: 2,
              child: SwitchListTile(
                secondary: const Icon(Icons.screen_lock_rotation, color: Colors.orange),
                title: const Text(
                  '화면 항상 켜기',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  settings.keepScreenOn
                      ? '화면이 자동으로 꺼지지 않습니다'
                      : '시스템 설정에 따라 화면이 꺼집니다'
                ),
                value: settings.keepScreenOn,
                onChanged: controller.setKeepScreenOn,
                activeColor: Colors.orange,
              ),
            ),
            const SizedBox(height: 12),

            // 🎚️ 슬라이더 위치
            Card(
              elevation: 2,
              child: ListTile(
                leading: const Icon(Icons.tune, color: Colors.orange),
                title: const Text(
                  '슬라이더 위치',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                subtitle: Text(
                  '필터 슬라이더를 ${_getSliderPositionText(settings.sliderPosition)}에 표시'
                ),
                trailing: SliderPositionSegment(
                  value: settings.sliderPosition,
                  onChanged: controller.setSliderPosition,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 슬라이더 위치 텍스트
  String _getSliderPositionText(SliderPosition position) {
    return position.name == 'top' ? '상단' : '하단';
  }
}

/// 🗑️ 기존 SettingsPage는 호환성을 위해 유지 (사용 안 함)
class SettingsPage extends ConsumerWidget {
  const SettingsPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('설정'),
        centerTitle: true,
      ),
      body: const SettingsPageContent(),
    );
  }
}