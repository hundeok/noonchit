\n\n// ====== lib/features/settings/presentation/providers/settings_provider.dart ======\n
// lib/features/settings/presentation/providers/settings_provider.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/app_settings.dart';

// SharedPreferences 제공자
final sharedPreferencesProvider = Provider<SharedPreferences>((ref) {
  throw UnimplementedError(
    'main() 에서 SharedPreferences.getInstance() 후 ContainerOverride 로 주입하거나, '
    '앱 부트스트랩 시 SettingsNotifier.initialize() 등을 호출하세요.'
  );
});

/// 글로벌 Provider
final settingsProvider =
    NotifierProvider<SettingsNotifier, AppSettings>(SettingsNotifier.new);

class SettingsNotifier extends Notifier<AppSettings> {
  // 정적 필드 추가
  static SharedPreferences? _prefsInstance;
  
  // 초기화 메서드 추가
  static void initialize(SharedPreferences prefs) {
    _prefsInstance = prefs;
  }
  
  late final SharedPreferences _prefs;
  
  @override
  AppSettings build() {
    // 인스턴스가 있으면 사용하고, 없으면 Provider에서 가져오기 시도
    _prefs = _prefsInstance ?? _getPrefsFromRef();
    
    return AppSettings(
      themeMode: _loadTheme(),
      keepScreenOn: _prefs.getBool('keepScreenOn') ?? false,
      sliderPosition: _prefs.getString('sliderPosition') ?? 'top',
    );
  }
  
  // ── public API ───────────────────────────────────────────────
  void setThemeMode(ThemeMode mode) {
    _prefs.setString('themeMode', mode.name);
    state = state.copyWith(themeMode: mode);
  }
  
  void setKeepScreenOn(bool keep) {
    _prefs.setBool('keepScreenOn', keep);
    state = state.copyWith(keepScreenOn: keep);
  }
  
  void setSliderPosition(String position) {
    if (position != 'top' && position != 'bottom') return;
    _prefs.setString('sliderPosition', position);
    state = state.copyWith(sliderPosition: position);
  }
  
  // ── helpers ─────────────────────────────────────────────────
  SharedPreferences _getPrefsFromRef() {
    try {
      // Provider Scope에서 가져오기 시도
      return ref.read(sharedPreferencesProvider);
    } catch (e) {
      throw UnimplementedError(
        'main() 에서 SharedPreferences.getInstance() 후 '
        'SettingsNotifier.initialize(prefs)를 호출하거나, '
        'sharedPreferencesProvider를 오버라이드 해주세요.'
      );
    }
  }
  
  ThemeMode _loadTheme() {
    final themeName = _prefs.getString('themeMode') ?? 'system';
    return switch (themeName) {
      'light' => ThemeMode.light,
      'dark' => ThemeMode.dark,
      _ => ThemeMode.system,
    };
  }
}\n\n// ====== lib/features/trade/presentation/providers/trade_provider.dart ======\n
// lib/features/trade/presentation/providers/trade_provider.dart
import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import '../../domain/entities/trade.dart';
import '../../domain/usecases/watch_trades.dart';
import '../../data/datasources/trade_remote_ds.dart';
import '../../data/repositories/trade_repository_impl.dart';
import '../../../../core/network/web_socket_client.dart';
import '../../../../core/config/app_config.dart';

// 마켓 목록 제공자
final marketsProvider = FutureProvider<List<String>>((ref) async {
  try {
    // 1. 현재 시간 확인
    final now = DateTime.now();
    final isEarlyMorning = now.hour >= 9 && now.hour < 10;
    
    debugPrint('현재 시간: ${now.hour}:${now.minute} - ${isEarlyMorning ? '전일' : '당일'} 거래대금 기준 적용');

    // 2. 모든 KRW 마켓 목록 가져오기
    final marketsResponse = await http.get(Uri.parse('${AppConfig.upbitRestBase}/market/all'));
    
    if (marketsResponse.statusCode != 200) {
      debugPrint('마켓 목록 로드 실패: ${marketsResponse.statusCode}');
      return ['KRW-BTC', 'KRW-ETH', 'KRW-XRP', 'KRW-SOL', 'KRW-DOGE']; // 기본값
    }
    
    final List<dynamic> marketsData = jsonDecode(utf8.decode(marketsResponse.bodyBytes));
    
    // KRW 마켓만 필터링
    final List<String> krwMarkets = marketsData
        .where((item) => (item['market'] as String).startsWith('KRW-'))
        .map<String>((item) => item['market'] as String)
        .toList();
    
    debugPrint('KRW 마켓 목록 로드 완료: ${krwMarkets.length}개 종목');
    
    // 3. 티커 정보 API 호출
    final tickersUrl = '${AppConfig.upbitRestBase}/ticker?markets=${krwMarkets.join(',')}';
    final tickersResponse = await http.get(Uri.parse(tickersUrl));
    
    if (tickersResponse.statusCode != 200) {
      debugPrint('티커 정보 로드 실패: ${tickersResponse.statusCode}');
      return krwMarkets.length > 199 ? krwMarkets.sublist(0, 199) : krwMarkets;
    }
    
    final List<dynamic> tickersData = jsonDecode(utf8.decode(tickersResponse.bodyBytes));
    
    // 4. 시간대에 따라 적절한 거래대금 필드 선택
    final volumeKeyToUse = isEarlyMorning
        ? 'acc_trade_price_24h'  // 9시~10시: 24시간 누적 거래대금 (전일 포함)
        : 'acc_trade_price';     // 10시 이후: 당일 거래대금
    
    // 5. 선택된 거래대금 기준으로 정렬
    tickersData.sort((a, b) {
      final aVolume = a[volumeKeyToUse] as double? ?? 0.0;
      final bVolume = b[volumeKeyToUse] as double? ?? 0.0;
      return bVolume.compareTo(aVolume); // 내림차순
    });
    
    // 거래량 로그 출력 (디버깅용)
    debugPrint('거래대금 정보: ${volumeKeyToUse} 기준');
    for (int i = 0; i < 5 && i < tickersData.length; i++) {
      final item = tickersData[i];
      final market = item['market'] as String;
      final volume = item[volumeKeyToUse] as double? ?? 0.0;
      debugPrint('Top ${i+1}: $market - ${(volume / 1000000).toStringAsFixed(2)}백만원');
    }
    
    // 6. 상위 거래대금 마켓 추출
    final List<String> topMarkets = tickersData
        .take(199)
        .map<String>((item) => item['market'] as String)
        .toList();
    
    debugPrint('거래대금 상위 마켓 선택: ${topMarkets.length}개 종목');
    
    // 결과가 비어있으면 기본 마켓 목록 사용
    if (topMarkets.isEmpty) {
      return krwMarkets.length > 199 ? krwMarkets.sublist(0, 199) : krwMarkets;
    }
    
    // 7. 기본 주요 코인이 목록에 없으면 추가
    final essentialMarkets = ['KRW-BTC', 'KRW-ETH', 'KRW-XRP', 'KRW-SOL'];
    for (final market in essentialMarkets) {
      if (!topMarkets.contains(market)) {
        debugPrint('주요 코인 추가: $market (거래대금 순위에 없음)');
        topMarkets.add(market);
      }
    }
    
    // 8. 최대 199개로 제한
    if (topMarkets.length > 199) {
      return topMarkets.sublist(0, 199);
    }
    
    return topMarkets;
  } catch (e, stack) {
    debugPrint('마켓 목록 처리 중 오류: $e');
    debugPrint(stack.toString());
    return ['KRW-BTC', 'KRW-ETH', 'KRW-XRP', 'KRW-SOL', 'KRW-DOGE']; // 오류 시 기본값
  }
});

// 필터별 거래 목록을 위한 제공자
final filterListsProvider = StateProvider<Map<double, List<Map<String, dynamic>>>>((ref) {
  // 필터별 거래 목록 초기화
  final filterLists = <double, List<Map<String, dynamic>>>{};
  for (var filter in AppConfig.tradeFilters) {
    filterLists[filter] = [];
  }
  return filterLists;
});

// 웹소켓 메시지 생성 도우미 함수
String _createUpbitSubscribeMessage(List<String> markets) {
  return jsonEncode([
    {"ticket": "noonchit-${DateTime.now().millisecondsSinceEpoch}"},
    {"type": "trade", "codes": markets},
    {"format": "DEFAULT"}
  ]);
}

// WebSocketClient 생성을 위한 provider
final _wsClientProvider = Provider((ref) => WebSocketClient<dynamic>(
  url: AppConfig.upbitWsUrl,
  encodeSubscribe: _createUpbitSubscribeMessage,
  decode: (raw) => jsonDecode(utf8.decode(raw is List<int> ? raw : utf8.encode(raw.toString()))),
));

// DI graph
final _remoteDSProvider = Provider((ref) =>
    TradeRemoteDataSource(
      ref.read(_wsClientProvider),
      useTestData: false, // 테스트 모드 비활성화 (실제 API 사용)
    ));

final _repoProvider = Provider<TradeRepositoryImpl>(
  (ref) => TradeRepositoryImpl(ref.read(_remoteDSProvider)));

final _useCaseProvider =
    Provider((ref) => WatchTradesUseCase(ref.read(_repoProvider)));

/// 필터 임계값 프로바이더
final tradeFilterThresholdProvider = StateProvider<double>((ref) => 20000000.0); // 기본값: 2천만원

/// 필터 인덱스 프로바이더
final tradeFilterIndexProvider = StateProvider<int>((ref) => 3); // 기본값: 인덱스 3 (2천만원)

/// 필터링된 거래 목록 프로바이더
final filteredTradesProvider = StateProvider<List<Map<String, dynamic>>>((ref) => []);

/// 실시간 거래 데이터를 관리하는 Notifier
class TradeNotifier extends AutoDisposeAsyncNotifier<List<Trade>> {
  StreamSubscription<Trade>? _sub;
  
  // 각 필터 임계값별 거래 목록
  final Map<double, List<Map<String, dynamic>>> _filterLists = {};
  final Set<String> _processedTradeIds = {};
  
  @override
  FutureOr<List<Trade>> build() async {
    ref.onDispose(() {
      _sub?.cancel();
    });
    
    // 필터 목록 초기화
    for (var filter in AppConfig.tradeFilters) {
      _filterLists[filter] = [];
    }
    
    // 모든 종목 정보 가져오기
    final markets = await ref.watch(marketsProvider.future);
    
    // 종목 구독
    _listen(markets);
    return [];
  }
  
  /// 지정된 마켓 코드 목록에 대한 거래 구독 시작/변경
  void _listen(List<String> mkts) {
    _sub?.cancel();
    final usecase = ref.read(_useCaseProvider);
    
    _sub = usecase.execute(mkts).listen(
      (t) {
        // 이미 처리된 거래인지 확인
        final tradeId = '${t.market}-${t.sequentialId}';
        if (_processedTradeIds.contains(tradeId)) {
          return; // 이미 처리된 거래는 건너뜀
        }
        _processedTradeIds.add(tradeId);
        
        // 1000개 이상이면 오래된 ID 제거
        if (_processedTradeIds.length > 1000) {
          _processedTradeIds.remove(_processedTradeIds.first);
        }
        
        // 새로운 거래 정보 구성
        final total = t.price * t.volume;
        final newTrade = {
          'code': t.market,
          'price': t.price, 
          'volume': t.volume,
          'total': total,
          'timestamp': t.timestamp,
          'isBuy': t.side == 'BID',
          'sequential_id': t.sequentialId,
        };
        
        // 필터별 거래 목록 업데이트
        for (var filter in AppConfig.tradeFilters) {
          if (total >= filter) {
            _filterLists[filter]!.insert(0, newTrade);
            
            // 각 필터별 최대 200개 유지
            if (_filterLists[filter]!.length > 200) {
              _filterLists[filter]!.removeLast();
            }
          }
        }
        
        // 현재 임계값에 따라 필터링된 거래 목록 업데이트
        _updateFilteredTrades();
        
        // 원본 Trade 객체 목록 업데이트 (최대 1000개)
        final currentList = state.value != null ? List<Trade>.from(state.value!) : <Trade>[];
        currentList.insert(0, t);
        
        if (currentList.length > 1000) {
          currentList.removeRange(1000, currentList.length);
        }
        
        state = AsyncData(currentList);
      },
      onError: (e, stack) {
        debugPrint('거래 스트림 오류: $e');
        state = AsyncError(e, stack);
      }
    );
  }
  
  /// 필터링된 거래 목록 업데이트
  void _updateFilteredTrades() {
    final threshold = ref.read(tradeFilterThresholdProvider);
    final filteredList = <Map<String, dynamic>>[];
    final tradeIds = <String>{};
    
    // 현재 임계값 이상인 모든 필터의 거래를 수집
    for (var filter in AppConfig.tradeFilters.where((f) => f >= threshold)) {
      for (var trade in _filterLists[filter] ?? []) {
        if (trade['total'] is double && trade['total'] as double >= threshold) {
          final tradeId = '${trade['sequential_id']}-${(trade['timestamp'] as DateTime).millisecondsSinceEpoch}';
          if (!tradeIds.contains(tradeId)) {
            filteredList.add(trade);
            tradeIds.add(tradeId);
          }
        }
      }
    }
    
    // 시간순 정렬
    filteredList.sort((a, b) => (b['timestamp'] as DateTime).compareTo(a['timestamp'] as DateTime));
    
    // 최대 200개로 제한
    if (filteredList.length > 200) {
      filteredList.removeRange(200, filteredList.length);
    }
    
    // 필터링된 거래 목록 업데이트
    ref.read(filteredTradesProvider.notifier).state = filteredList;
  }
  
  /// 임계값 변경 시 호출될 메서드
  void setTradeThreshold(double threshold, int index) {
    if (index < 3 || index > 10) {
      debugPrint('유효하지 않은 인덱스: $index, 3-10 사이여야 함');
      return;
    }
    
    ref.read(tradeFilterThresholdProvider.notifier).state = threshold;
    ref.read(tradeFilterIndexProvider.notifier).state = index;
    
    _updateFilteredTrades();
    debugPrint('거래 필터 임계값 변경: $threshold, 인덱스: $index');
  }
  
  /// 구독 마켓 변경 메서드
  void updateMarkets(List<String> markets) {
    _listen(markets);
  }
}

/// 글로벌 싱글턴 Provider
final tradeProvider =
    AutoDisposeAsyncNotifierProvider<TradeNotifier, List<Trade>>(
        TradeNotifier.new);

/// 필터링된 거래 목록을 Trade 객체로 변환하는 Provider
final filteredTradeObjectsProvider = Provider<List<Trade>>((ref) {
  final filteredMaps = ref.watch(filteredTradesProvider);
  
  return filteredMaps.map((map) => Trade(
    market: map['code'] as String,
    price: map['price'] as double,
    volume: map['volume'] as double,
    side: (map['isBuy'] as bool) ? 'BID' : 'ASK',
    changePrice: 0.0,
    changeState: 'EVEN',
    timestampMs: (map['timestamp'] as DateTime).millisecondsSinceEpoch,
    sequentialId: map['sequential_id'] as String,
  )).toList();
});\n\n// ====== lib/features/surge/presentation/providers/surge_provider.dart ======\n
import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/bridge/signal_bus.dart';
import '../../../../core/config/app_config.dart';
import '../../domain/entities/surge_item.dart';
import '../../domain/usecases/watch_surge.dart';

// 급등 감지 임계값을 위한 Provider
final surgeThresholdProvider = StateProvider<double>((ref) => 
    AppConfig.surgeThresholdPercent);

// SurgeUseCase Provider
final surgeUseCaseProvider = Provider<WatchSurgeUseCase>((ref) {
  final signalBus = SignalBus();
  return WatchSurgeUseCase(
    signalBus,
    percentThreshold: ref.watch(surgeThresholdProvider),
  );
});

// 급등 항목 상태 관리 Notifier
class SurgeNotifier extends AutoDisposeAsyncNotifier<List<SurgeItem>> {
  StreamSubscription<SurgeItem>? _subscription;
  
  @override
  FutureOr<List<SurgeItem>> build() async {
    ref.onDispose(() {
      _subscription?.cancel();
    });
    
    final useCase = ref.watch(surgeUseCaseProvider);
    final items = <SurgeItem>[];
    
    _subscription = useCase.execute().listen(
      (surgeItem) {
        items.insert(0, surgeItem);
        
        // 최대 100개로 제한
        if (items.length > 100) {
          items.removeLast();
        }
        
        state = AsyncData(List.unmodifiable(items));
      },
      onError: (error, stackTrace) {
        state = AsyncError(error, stackTrace);
      }
    );
    
    return items;
  }
  
  // 특정 코인의 급등 항목만 필터링
  List<SurgeItem> getByMarket(String market) {
    if (state.value == null) return [];
    return state.value!.where((item) => item.market == market).toList();
  }
  
  // 급등 임계값 변경
  void setThreshold(double newThreshold) {
    ref.read(surgeThresholdProvider.notifier).state = newThreshold;
    
    // 임계값 변경 시 UseCase 다시 빌드 (Provider 의존성에 의해 자동으로 처리됨)
  }
  
  // 모든 데이터 지우기
  void clear() {
    state = const AsyncData([]);
  }
}

// 급등 Provider
final surgeProvider = 
    AutoDisposeAsyncNotifierProvider<SurgeNotifier, List<SurgeItem>>(
        SurgeNotifier.new);

// 상승만 필터링한 Provider
final risingProvider = Provider<List<SurgeItem>>((ref) {
  final surgeAsync = ref.watch(surgeProvider);
  return surgeAsync.maybeWhen(
    data: (items) => items.where((item) => item.isRising).toList(),
    orElse: () => [],
  );
});

// 하락만 필터링한 Provider
final fallingProvider = Provider<List<SurgeItem>>((ref) {
  final surgeAsync = ref.watch(surgeProvider);
  return surgeAsync.maybeWhen(
    data: (items) => items.where((item) => !item.isRising).toList(),
    orElse: () => [],
  );
});\n\n// ====== lib/features/volume/presentation/providers/volume_provider.dart ======\n
// lib/features/volume/presentation/providers/volume_provider.dart
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/bridge/signal_bus.dart';
import '../../../../core/config/app_config.dart';
import '../../../../shared/utils/trade_processor.dart'; // 중앙 관리되는 Trade Processor 임포트
import '../../domain/entities/volume_item.dart';

// 선택된 시간대 프로바이더
final selectedTimeFrameProvider = StateProvider<String>((ref) => '1m');

// 시간대 인덱스 프로바이더
final timeFrameIndexProvider = StateProvider<int>((ref) => 0); // 기본값: 인덱스 0 (1분)

// 중요: tradeProcessorProvider 정의를 제거하고 trade_processor.dart에서 가져옴
// final tradeProcessorProvider = ... 코드 제거

// 볼륨 데이터 변경 감지를 위한 Provider
final volumeUpdateNotifierProvider = StateProvider<int>((ref) => 0);

// 특정 시간대의 거래량 데이터를 제공하는 Provider (실시간 업데이트)
final volumeDataProvider = Provider<List<VolumeItem>>((ref) {
  // 볼륨 업데이트 알림 구독 (중요: 이 부분이 실시간 업데이트의 핵심)
  final updateCounter = ref.watch(volumeUpdateNotifierProvider);
  
  // 현재 선택된 시간대
  final timeFrame = ref.watch(selectedTimeFrameProvider);
  
  // 중앙에서 관리되는 TradeProcessor에서 데이터 가져오기
  final processor = ref.watch(tradeProcessorProvider);
  final volumeMap = processor.getVolumeForInterval(timeFrame);
  
  // VolumeItem 리스트로 변환
  final items = volumeMap.entries.map((entry) {
    return VolumeItem(
      market: entry.key,
      volume: entry.value,
      price: 0.0, // 가격 정보는 사용하지 않음
      timeFrame: timeFrame,
      lastUpdated: DateTime.now(),
    );
  }).toList();
  
  // 볼륨 기준 내림차순 정렬
  items.sort((a, b) => b.volume.compareTo(a.volume));
  
  debugPrint('volumeDataProvider: 시간대 $timeFrame의 데이터 ${items.length}개 필터링됨 (업데이트: $updateCounter)');
  return items;
});

// Top N 거래량 Provider (기본: 상위 50개)
final topVolumeProvider = Provider.family<List<VolumeItem>, int>((ref, count) {
  final items = ref.watch(volumeDataProvider);
  return items.take(count).toList();
});

// 볼륨 데이터 리셋 함수
void resetVolumeData(WidgetRef ref) {
  final processor = ref.read(tradeProcessorProvider);
  processor.checkAndResetVolumeData();
  
  // 데이터 리셋 후 업데이트 알림
  ref.read(volumeUpdateNotifierProvider.notifier).state++;
  
  debugPrint('resetVolumeData: 볼륨 데이터 리셋 완료');
}

// TradeProcessor에 볼륨 데이터 변경 감지 callback 설정
void setupVolumeDataChangeListener(WidgetRef ref) {
  final processor = ref.read(tradeProcessorProvider);
  
  processor.onVolumeDataChanged = (_) {
    // 볼륨 데이터가 변경될 때마다 StateProvider 업데이트
    ref.read(volumeUpdateNotifierProvider.notifier).state++;
  };
  
  debugPrint('setupVolumeDataChangeListener: 볼륨 데이터 변경 리스너 설정 완료');
}\n\n// ====== lib/features/momentary/presentation/providers/momentary_provider.dart ======\n
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/bridge/signal_bus.dart';
import '../../../../core/config/app_config.dart';
import '../../../../shared/utils/trade_processor.dart';
import '../../domain/entities/momentary_item.dart';

// 임계값 Provider
final momentaryThresholdProvider = StateProvider<double>((ref) =>
    AppConfig.tradeFilters[0]); // 기본값: 2백만원 (첫 번째 필터)

// 임계값 인덱스 Provider
final momentaryIndexProvider = StateProvider<int>((ref) => 0);

// TradeProcessor Provider (이미 정의되어 있다면 이 부분은 제거)
final tradeProcessorProvider = Provider<TradeProcessor>((ref) {
  final signalBus = SignalBus();
  final processor = TradeProcessor(signalBus);
  
  ref.onDispose(() {
    processor.dispose();
  });
  
  return processor;
});

// TradeProcessor가 momentaryTrades 컬렉션을 직접 가지고 있지 않으므로,
// 임시 데이터 저장소 역할을 하는 Provider 생성
final momentaryTradesStoreProvider = StateProvider<List<Map<String, dynamic>>>((ref) => []);

// 순간 거래 데이터를 SignalBus에서 수집하는 Provider
final momentaryTradesCollectorProvider = Provider<void>((ref) {
  final signalBus = SignalBus();
  final tradeStore = ref.read(momentaryTradesStoreProvider.notifier);
  
  // 구독 설정
  signalBus.eventsOfType(SignalEventType.trade).listen((trade) {
    try {
      final market = trade['code'] as String? ?? trade['market'] as String?;
      if (market == null) return;
      
      final priceRaw = trade['trade_price'] ?? trade['price'];
      final volumeRaw = trade['trade_volume'] ?? trade['volume'];
      
      final price = priceRaw is num ? priceRaw.toDouble() : 
                  double.tryParse(priceRaw.toString()) ?? 0.0;
      final volume = volumeRaw is num ? volumeRaw.toDouble() : 
                   double.tryParse(volumeRaw.toString()) ?? 0.0;
      
      final total = price * volume;
      final timestamp = DateTime.now();
      final isBuy = trade['ask_bid'] == 'BID' || trade['side'] == 'BID';
      
      // 새 거래 추가
      final newTrade = {
        'market': market,
        'price': price,
        'volume': volume,
        'total': total,
        'timestamp': timestamp,
        'isBuy': isBuy,
        'sequential_id': '${DateTime.now().millisecondsSinceEpoch}-${market.hashCode}',
      };
      
      // 상태 업데이트
      final currentTrades = List<Map<String, dynamic>>.from(tradeStore.state);
      currentTrades.insert(0, newTrade);
      
      // 최대 300개 제한
      if (currentTrades.length > 300) {
        currentTrades.removeLast();
      }
      
      tradeStore.state = currentTrades;
      
    } catch (e) {
      debugPrint('순간 거래 처리 중 오류: $e');
    }
  });
  
  return;
});

// 특정 임계값에 따른 순간 거래 목록을 제공하는 Provider
final momentaryDataProvider = Provider<List<MomentaryItem>>((ref) {
  // 수집 시작 (여기서 한 번만 호출됨)
  ref.watch(momentaryTradesCollectorProvider);
  
  // 현재 임계값
  final threshold = ref.watch(momentaryThresholdProvider);
  
  // 저장된 거래 데이터에서 필터링
  final tradeStore = ref.watch(momentaryTradesStoreProvider);
  final filteredTrades = tradeStore
      .where((trade) => (trade['total'] as double) >= threshold)
      .toList();
  
  // MomentaryItem 리스트로 변환
  final items = filteredTrades.map((trade) => MomentaryItem.fromTradeMap(trade)).toList();
  
  debugPrint('momentaryDataProvider: 임계값 $threshold의 데이터 ${items.length}개 필터링됨');
  return items;
});

// 매수/매도 필터링된 Provider
final buyTradesProvider = Provider<List<MomentaryItem>>((ref) {
  final items = ref.watch(momentaryDataProvider);
  return items.where((item) => item.isBuy).toList();
});

final sellTradesProvider = Provider<List<MomentaryItem>>((ref) {
  final items = ref.watch(momentaryDataProvider);
  return items.where((item) => !item.isBuy).toList();
});

// 데이터 초기화 함수
void clearMomentaryData(WidgetRef ref) {
  ref.read(momentaryTradesStoreProvider.notifier).state = [];
  debugPrint('clearMomentaryData: 순간 거래 데이터 초기화 완료');
}